###############################################################################
#                                                                             #
#                                                       04/Mar/2012  11:30:38 #
# IAR ANSI C/C++ Compiler V6.10.1.22143/W32 EVALUATION for ARM                #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\My Works\K60\Kinetis512\kinetis-sc\src\projects\gpio\ #
#                    FAT32.c                                                  #
#    Command line =  "F:\My Works\K60\Kinetis512\kinetis-sc\src\projects\gpio #
#                    \FAT32.c" -D IAR -D TWR_K60N512 -lCN "F:\My              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_128KB #
#                    \List\" -lB "F:\My Works\K60\Kinetis512\kinetis-sc\build #
#                    \iar\gpio\RAM_128KB\List\" -o "F:\My                     #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_128KB #
#                    \Obj\" --no_cse --no_unroll --no_inline                  #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I "F:\My     #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\projects\gpio\" -I "F:\My                            #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\common\" -I "F:\My Works\K60\Kinetis512\kinetis-sc\b #
#                    uild\iar\gpio\..\..\..\src\cpu\" -I "F:\My               #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\cpu\headers\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\uart\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\mcg\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\wdog\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\platforms\" -I "F:\My Works\K60\Kinetis512\kinetis-s #
#                    c\build\iar\gpio\..\" -Ol --use_c++_inline               #
#    List file    =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _128KB\List\FAT32.lst                                    #
#    Object file  =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _128KB\Obj\FAT32.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\My Works\K60\Kinetis512\kinetis-sc\src\projects\gpio\FAT32.c
      1          #include "FAT32.h"
      2          #include "hw_sdhc.h"        //存储设备的扇区读写驱动，这里是SD卡
      3          //#include "ch375.h"	   //存储设备的扇区读写驱动，这里是U盘
      4          //#include "cf.h"
      5          #include "string.h"

   \                                 In section .text, align 2
   \   __intrinsic __interwork __softfp char *strchr(char const *, int)
   \                     strchr:
   \   00000000   80B5               PUSH     {R7,LR}
   \   00000002   ........           BL       __iar_Strchr
   \   00000006   02BD               POP      {R1,PC}          ;; return
      6          
      7          /*******************************************************
      8          
      9                  +-----------------------------------------+
     10                  |振南电子 原创程序模块 znFAT文件系统 5.01 |
     11                  +-----------------------------------------+
     12          
     13            此源码版权属 振南 全权享有，如欲引用，敬请署名并告知
     14                  严禁随意用于商业目的，违者必究，后果自负
     15                   振南电子 
     16                       ->产品网站 http://www.znmcu.cn/
     17                       ->产品论坛 http://bbs.znmcu.cn/
     18                       ->产品网店 http://shop.znmcu.cn/
     19                       ->产品咨询 QQ:987582714 MSN:yzn07@126.com
     20          	                WW:yzn07
     21          说明：znFAT经多方测试，确保其正确性与稳定性，请放心使用，
     22                如有bug敬请告知，谢谢！！				  
     23          ********************************************************/
     24          
     25          //全局变量定义

   \                                 In section .bss, align 4
     26          struct direntry idata,temp_rec;
   \                     idata:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
   \                     temp_rec:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     27          int8 temp_dir_name[13]; 
   \                     temp_dir_name:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     28          uint32 temp_dir_cluster;
   \                     temp_dir_cluster:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     29          uint32 temp_last_cluster;
   \                     temp_last_cluster:
   \   00000000                      DS8 4
     30          

   \                                 In section .bss, align 4
     31          uint8 FAT32_Buffer[512]; //扇区数据读写缓冲区,由外部提供
   \                     FAT32_Buffer:
   \   00000000                      DS8 512
     32          
     33          extern struct FAT32_Init_Arg *pArg; //初始化参数结构体指针，用以指向某一存储设备的初始化参数结构体，由外部提供
     34          

   \                                 In section .bss, align 4
     35          unsigned char (*pRS)(unsigned long,unsigned char *); //指向实际存储设备的读扇区函数的函数指针，用以实现对设备的支持
   \                     pRS:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     36          unsigned char (*pWS)(unsigned long,unsigned char *); //指向实际存储设备的写扇区函数的函数指针，用以实现对设备的支持
   \                     pWS:
   \   00000000                      DS8 4
     37          
     38          extern unsigned char Dev_No;
     39          
     40          /******************************************************************
     41           - 功能描述：znFAT的存储设备底层驱动接口，读取存储设备的addr扇区的
     42                       512个字节的数据放入buf数据缓冲区中
     43           - 隶属模块：znFAT文件系统模块
     44           - 函数属性：内部（用于与存储设备的底层驱动对接）
     45           - 参数说明：addr:扇区地址
     46                       buf:指向数据缓冲区
     47           - 返回说明：0表示读取扇区成功，否则失败
     48           - 注：这里加入了天狼星精华板上的三种存储设备，即SD卡（有效）、U盘、
     49                 CF卡通过在程序中动态的切换不同的设备驱动，从而实现多设备(即同
     50          	   时对多种存储设备进行操作，比如从SD卡拷贝文件到U盘等等)，不同
     51          	   驱动的切换，只需要在程序中改变Dev_No这个全局变量的值即可
     52           ******************************************************************/
     53          

   \                                 In section .text, align 2, keep-with-next
     54          uint8 FAT32_ReadSector(uint32 addr,uint8 *buf) 
     55          {
   \                     FAT32_ReadSector:
   \   00000000   80B5               PUSH     {R7,LR}
     56           return(disk_read(0,buf,addr,1));  //替换成实际存储器的扇区读函数，这里是SD卡扇区读函数
   \   00000002   0123               MOVS     R3,#+1
   \   00000004   0200               MOVS     R2,R0
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ........           BL       disk_read
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   02BD               POP      {R1,PC}          ;; return
     57          }
     58          
     59          /******************************************************************
     60           - 功能描述：znFAT的存储设备底层驱动接口，将buf数据缓冲区中的512个
     61                       字节的数据写入到存储设备的addr扇区中
     62           - 隶属模块：znFAT文件系统模块
     63           - 函数属性：内部（用于与存储设备的底层驱动对接）
     64           - 参数说明：addr:扇区地址
     65                       buf:指向数据缓冲区
     66           - 返回说明：0表示读取扇区成功，否则失败
     67           - 注：略
     68           ******************************************************************/
     69          

   \                                 In section .text, align 2, keep-with-next
     70          uint8 FAT32_WriteSector(uint32 addr,uint8 *buf)
     71          {
   \                     FAT32_WriteSector:
   \   00000000   80B5               PUSH     {R7,LR}
     72           return(disk_write(0,buf,addr,1)); //替换成实际存储器的扇区写函数，这里是SD卡扇区写函数
   \   00000002   0123               MOVS     R3,#+1
   \   00000004   0200               MOVS     R2,R0
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ........           BL       disk_write
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   02BD               POP      {R1,PC}          ;; return
     73          }
     74          
     75          /******************************************************************
     76           - 功能描述：小端转大端，即LittleEndian车BigEndian
     77           - 隶属模块：znFAT文件系统模块
     78           - 函数属性：内部
     79           - 参数说明：dat:指向要转为大端的字节序列
     80                       len:要转为大端的字节序列长度
     81           - 返回说明：转为大端模式后，字节序列所表达的数据
     82           - 注：比如：小端模式的       0x33 0x22 0x11 0x00  (低字节在前)
     83                       转为大端模式后为 0x00 0x11 0x22 0x33  (高字节在前)
     84                       所表达的数值为   0x00112233
     85                       (CISC的CPU通常是小端的，所以FAT32也设计为小端，而单片机
     86                        这种RISC的CPU，通常来说都是大端的，所以需要这个函数将字
     87                        节的存放次序进行调整，才能得到正确的数值)
     88           ******************************************************************/
     89          

   \                                 In section .text, align 2, keep-with-next
     90          uint32 LE2BE(uint8 *dat,uint8 len) 
     91          {
   \                     LE2BE:
   \   00000000   30B4               PUSH     {R4,R5}
     92           uint32 temp=0;
   \   00000002   0022               MOVS     R2,#+0
     93           uint32 fact=1;
   \   00000004   0123               MOVS     R3,#+1
     94           uint8  i=0;
   \   00000006   0024               MOVS     R4,#+0
     95           for(i=0;i<len;i++)
   \   00000008   0025               MOVS     R5,#+0
   \   0000000A   2C00               MOVS     R4,R5
   \   0000000C   07E0               B.N      ??LE2BE_0
     96           {
     97            temp+=dat[i]*fact; //将各字节乘以相应的权值后累加
   \                     ??LE2BE_1:
   \   0000000E   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   255C               LDRB     R5,[R4, R0]
   \   00000012   03FB0522           MLA      R2,R3,R5,R2
     98            fact*=256; //更新权值
   \   00000016   4FF48075           MOV      R5,#+256
   \   0000001A   6B43               MULS     R3,R5,R3
     99           }
   \   0000001C   641C               ADDS     R4,R4,#+1
   \                     ??LE2BE_0:
   \   0000001E   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   8C42               CMP      R4,R1
   \   00000024   F3D3               BCC.N    ??LE2BE_1
    100           return temp;
   \   00000026   1000               MOVS     R0,R2
   \   00000028   30BC               POP      {R4,R5}
   \   0000002A   7047               BX       LR               ;; return
    101          }
    102          
    103          /******************************************************************
    104           - 功能描述：将小字字符转为大写
    105           - 隶属模块：znFAT文件系统模块
    106           - 函数属性：内部
    107           - 参数说明：c:要转换为大写的字符            
    108           - 返回说明：要转换的字节的相应的大写字符
    109           - 注：只对小写字符有效，如果不是a~z的小写字符，将直接返回
    110           ******************************************************************/
    111          

   \                                 In section .text, align 2, keep-with-next
    112          int8 L2U(int8 c)
    113          {
    114           if(c>='a' && c<='z') return c+'A'-'a';         
   \                     L2U:
   \   00000000   B0F16101           SUBS     R1,R0,#+97
   \   00000004   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   1A29               CMP      R1,#+26
   \   00000008   02D2               BCS.N    ??L2U_0
   \   0000000A   2038               SUBS     R0,R0,#+32
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   00E0               B.N      ??L2U_1
    115           else return c;
   \                     ??L2U_0:
   \   00000010   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??L2U_1:
   \   00000012   7047               BX       LR               ;; return
    116          }
    117          
    118          /******************************************************************
    119           - 功能描述：读取0扇区，检测有没有MBR(主引导记录)
    120           - 隶属模块：znFAT文件系统模块
    121           - 函数属性：内部
    122           - 参数说明：无     
    123           - 返回说明：1表示检测到MBR，0表示没有检测到MBR
    124           - 注：有些存储设备格式化为FAT32以后，没有MBR，则0扇区就是DBR
    125                 如果有MBR，就需要对其进行解析，以得到DBR的扇区位置，同时MBR中
    126                 还含分区、分区容量等信息
    127           ******************************************************************/
    128          

   \                                 In section .text, align 2, keep-with-next
    129          uint8 FAT32_is_MBR()
    130          {
   \                     FAT32_is_MBR:
   \   00000000   80B5               PUSH     {R7,LR}
    131           uint8 result;
    132           FAT32_ReadSector(0,FAT32_Buffer);
   \   00000002   ........           LDR.W    R1,??DataTable14
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ........           BL       FAT32_ReadSector
    133           if(FAT32_Buffer[0]!=0xeb) 
   \   0000000C   ........           LDR.W    R0,??DataTable14
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   EB28               CMP      R0,#+235
   \   00000014   01D0               BEQ.N    ??FAT32_is_MBR_0
    134           {
    135            result=1;
   \   00000016   0120               MOVS     R0,#+1
   \   00000018   00E0               B.N      ??FAT32_is_MBR_1
    136           }
    137           else 
    138           {
    139            result=0;
   \                     ??FAT32_is_MBR_0:
   \   0000001A   0020               MOVS     R0,#+0
    140           }
    141           return result;
   \                     ??FAT32_is_MBR_1:
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   02BD               POP      {R1,PC}          ;; return
    142          }
    143          
    144          /***********************************************************************
    145           - 功能描述：得到DBR所在的扇区号(如果没有MBR，则DBR就在0扇区)
    146           - 隶属模块：znFAT文件系统模块
    147           - 函数属性：内部
    148           - 参数说明：无     
    149           - 返回说明：DBR的扇区地址
    150           - 注：DBR中包含了很多有用的参数信息，因此正确定位DBR扇区的位置，是极为
    151                 重要的，后面将有专门的函数对DBR进行解析，正确解析DBR是实现FAT32的
    152                 基础
    153           ***********************************************************************/
    154          

   \                                 In section .text, align 2, keep-with-next
    155          uint16 FAT32_Find_DBR()
    156          {
   \                     FAT32_Find_DBR:
   \   00000000   80B5               PUSH     {R7,LR}
    157           uint16 sec_dbr;
    158           FAT32_ReadSector(0,FAT32_Buffer);
   \   00000002   ........           LDR.W    R1,??DataTable14
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   ........           BL       FAT32_ReadSector
    159           if(FAT32_Buffer[0]!=0xeb) 
   \   0000000C   ........           LDR.W    R0,??DataTable14
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   EB28               CMP      R0,#+235
   \   00000014   05D0               BEQ.N    ??FAT32_Find_DBR_0
    160           {
    161            sec_dbr=LE2BE(((((struct PartSector *)(FAT32_Buffer))->Part[0]).StartLBA),4);
   \   00000016   0421               MOVS     R1,#+4
   \   00000018   ........           LDR.W    R0,??DataTable14_1
   \   0000001C   ........           BL       LE2BE
   \   00000020   00E0               B.N      ??FAT32_Find_DBR_1
    162           }
    163           else
    164           {
    165            sec_dbr=0;
   \                     ??FAT32_Find_DBR_0:
   \   00000022   0020               MOVS     R0,#+0
    166           }
    167           return sec_dbr;
   \                     ??FAT32_Find_DBR_1:
   \   00000024   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   02BD               POP      {R1,PC}          ;; return
    168          }
    169          
    170          /***********************************************************************
    171           - 功能描述：获取分区的总容量
    172           - 隶属模块：znFAT文件系统模块
    173           - 函数属性：外部，使用户使用
    174           - 参数说明：无     
    175           - 返回说明：分区容量值，单位为字节
    176           - 注：这里得到的总容量是FAT32分区的容量，一定小于实际的物理容量
    177           ***********************************************************************/
    178          

   \                                 In section .text, align 2, keep-with-next
    179          uint32 FAT32_Get_Total_Size() 
    180          {
   \                     FAT32_Get_Total_Size:
   \   00000000   80B5               PUSH     {R7,LR}
    181           uint32 temp;
    182           FAT32_ReadSector(pArg->BPB_Sector_No,FAT32_Buffer);
   \   00000002   ........           LDR.W    R1,??DataTable14
   \   00000006   ........           LDR.W    R0,??DataTable14_2
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   4078               LDRB     R0,[R0, #+1]
   \   0000000E   ........           BL       FAT32_ReadSector
    183           FAT32_ReadSector(pArg->BPB_Sector_No,FAT32_Buffer);
   \   00000012   ........           LDR.W    R1,??DataTable14
   \   00000016   ........           LDR.W    R0,??DataTable14_2
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   4078               LDRB     R0,[R0, #+1]
   \   0000001E   ........           BL       FAT32_ReadSector
    184           temp=((LE2BE((((struct FAT32_BPB *)(FAT32_Buffer))->BPB_TotSec32),4)))*pArg->BytesPerSector;
   \   00000022   0421               MOVS     R1,#+4
   \   00000024   ........           LDR.W    R0,??DataTable14_3
   \   00000028   ........           BL       LE2BE
   \   0000002C   ........           LDR.W    R1,??DataTable14_2
   \   00000030   0968               LDR      R1,[R1, #+0]
   \   00000032   C968               LDR      R1,[R1, #+12]
   \   00000034   4843               MULS     R0,R1,R0
    185           return temp;
   \   00000036   02BD               POP      {R1,PC}          ;; return
    186          }
    187          
    188          /***********************************************************************
    189           - 功能描述：读取FSInfo获取最近的一个可用空闲簇
    190           - 隶属模块：znFAT文件系统模块
    191           - 函数属性：内部
    192           - 参数说明：无     
    193           - 返回说明：最近的一个可用空闲簇
    194           - 注：FAT32中的FSInfo扇区(绝对1扇区)中记录了最近的一个可用空闲簇
    195           ***********************************************************************/
    196          

   \                                 In section .text, align 2, keep-with-next
    197          uint32 Search_Last_Usable_Cluster()
    198          {
   \                     Search_Last_Usable_Cluster:
   \   00000000   80B5               PUSH     {R7,LR}
    199           FAT32_ReadSector(1+pArg->BPB_Sector_No,FAT32_Buffer);
   \   00000002   ........           LDR.W    R1,??DataTable14
   \   00000006   ........           LDR.W    R0,??DataTable14_2
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   4078               LDRB     R0,[R0, #+1]
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   ........           BL       FAT32_ReadSector
    200           return LE2BE(((struct FSInfo *)FAT32_Buffer)->Last_Cluster,4);
   \   00000014   0421               MOVS     R1,#+4
   \   00000016   ........           LDR.W    R0,??DataTable15
   \   0000001A   ........           BL       LE2BE
   \   0000001E   02BD               POP      {R1,PC}          ;; return
    201          }
    202          
    203          /***********************************************************************
    204           - 功能描述：FAT32文件系统初始化
    205           - 隶属模块：znFAT文件系统模块
    206           - 函数属性：外部，使用户使用
    207           - 参数说明：FAT32_Init_Arg类型的结构体指针，用于装载一些重要的参数信息，
    208                       以备后面使用     
    209           - 返回说明：无
    210           - 注：在使用znFAT前，这个函数是必须先被调用的，将很多参数信息装入到
    211                 arg指向的结构体中，比如扇区大小、根目录的位置、FAT表大小等等。
    212                 这些参数绝大部分是来自于DBR的BPB中，因此此函数主要在作对DBR的参数解析
    213           ***********************************************************************/
    214          

   \                                 In section .text, align 2, keep-with-next
    215          void FAT32_Init()
    216          {
   \                     FAT32_Init:
   \   00000000   10B5               PUSH     {R4,LR}
    217           struct FAT32_BPB *bpb;
    218          
    219           bpb=(struct FAT32_BPB *)(FAT32_Buffer);               //将数据缓冲区指针转为struct FAT32_BPB 型指针
   \   00000002   ........           LDR.W    R4,??DataTable14
    220          
    221           pArg->DEV_No=Dev_No; //装入设备号
   \   00000006   ........           LDR.W    R0,??DataTable14_2
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   ........           LDR.W    R1,??DataTable15_1
   \   00000010   0978               LDRB     R1,[R1, #+0]
   \   00000012   0170               STRB     R1,[R0, #+0]
    222          
    223           pArg->BPB_Sector_No   =FAT32_Find_DBR();               //FAT32_FindBPB()可以返回BPB所在的扇区号
   \   00000014   ........           BL       FAT32_Find_DBR
   \   00000018   ........           LDR.W    R1,??DataTable14_2
   \   0000001C   0968               LDR      R1,[R1, #+0]
   \   0000001E   4870               STRB     R0,[R1, #+1]
    224           pArg->BPB_Sector_No   =FAT32_Find_DBR();               //FAT32_FindBPB()可以返回BPB所在的扇区号
   \   00000020   ........           BL       FAT32_Find_DBR
   \   00000024   ........           LDR.W    R1,??DataTable14_2
   \   00000028   0968               LDR      R1,[R1, #+0]
   \   0000002A   4870               STRB     R0,[R1, #+1]
    225           pArg->Total_Size      =FAT32_Get_Total_Size();         //FAT32_Get_Total_Size()可以返回磁盘的总容量，单位是字节
   \   0000002C   ........           BL       FAT32_Get_Total_Size
   \   00000030   ........           LDR.W    R1,??DataTable14_2
   \   00000034   0968               LDR      R1,[R1, #+0]
   \   00000036   4860               STR      R0,[R1, #+4]
    226          
    227           pArg->FATsectors      =LE2BE((bpb->BPB_FATSz32)    ,4);//装入FAT表占用的扇区数到FATsectors中
   \   00000038   0421               MOVS     R1,#+4
   \   0000003A   14F12400           ADDS     R0,R4,#+36
   \   0000003E   ........           BL       LE2BE
   \   00000042   ........           LDR.W    R1,??DataTable14_2
   \   00000046   0968               LDR      R1,[R1, #+0]
   \   00000048   0861               STR      R0,[R1, #+16]
    228           pArg->FirstDirClust   =LE2BE((bpb->BPB_RootClus)   ,4);//装入根目录簇号到FirstDirClust中
   \   0000004A   0421               MOVS     R1,#+4
   \   0000004C   14F12C00           ADDS     R0,R4,#+44
   \   00000050   ........           BL       LE2BE
   \   00000054   ........           LDR.W    R1,??DataTable14_2
   \   00000058   0968               LDR      R1,[R1, #+0]
   \   0000005A   8860               STR      R0,[R1, #+8]
    229           pArg->BytesPerSector  =LE2BE((bpb->BPB_BytesPerSec),2);//装入每扇区字节数到BytesPerSector中
   \   0000005C   0221               MOVS     R1,#+2
   \   0000005E   14F10B00           ADDS     R0,R4,#+11
   \   00000062   ........           BL       LE2BE
   \   00000066   ........           LDR.W    R1,??DataTable14_2
   \   0000006A   0968               LDR      R1,[R1, #+0]
   \   0000006C   C860               STR      R0,[R1, #+12]
    230           pArg->SectorsPerClust =LE2BE((bpb->BPB_SecPerClus) ,1);//装入每簇扇区数到SectorsPerClust 中
   \   0000006E   0121               MOVS     R1,#+1
   \   00000070   14F10D00           ADDS     R0,R4,#+13
   \   00000074   ........           BL       LE2BE
   \   00000078   ........           LDR.W    R1,??DataTable14_2
   \   0000007C   0968               LDR      R1,[R1, #+0]
   \   0000007E   4861               STR      R0,[R1, #+20]
    231           pArg->FirstFATSector  =LE2BE((bpb->BPB_RsvdSecCnt) ,2)+pArg->BPB_Sector_No;//装入第一个FAT表扇区号到FirstFATSector 中
   \   00000080   0221               MOVS     R1,#+2
   \   00000082   14F10E00           ADDS     R0,R4,#+14
   \   00000086   ........           BL       LE2BE
   \   0000008A   ........           LDR.W    R1,??DataTable14_2
   \   0000008E   0968               LDR      R1,[R1, #+0]
   \   00000090   4978               LDRB     R1,[R1, #+1]
   \   00000092   50FA81F0           UXTAB    R0,R0,R1
   \   00000096   ........           LDR.W    R1,??DataTable14_2
   \   0000009A   0968               LDR      R1,[R1, #+0]
   \   0000009C   8861               STR      R0,[R1, #+24]
    232           pArg->FirstDirSector  =(pArg->FirstFATSector)+(bpb->BPB_NumFATs[0])*(pArg->FATsectors); //装入第一个目录扇区到FirstDirSector中
   \   0000009E   ........           LDR.W    R0,??DataTable14_2
   \   000000A2   0068               LDR      R0,[R0, #+0]
   \   000000A4   8069               LDR      R0,[R0, #+24]
   \   000000A6   217C               LDRB     R1,[R4, #+16]
   \   000000A8   ........           LDR.W    R2,??DataTable14_2
   \   000000AC   1268               LDR      R2,[R2, #+0]
   \   000000AE   1269               LDR      R2,[R2, #+16]
   \   000000B0   02FB0100           MLA      R0,R2,R1,R0
   \   000000B4   ........           LDR.W    R1,??DataTable14_2
   \   000000B8   0968               LDR      R1,[R1, #+0]
   \   000000BA   C861               STR      R0,[R1, #+28]
    233           
    234           pArg->Total_Size      =FAT32_Get_Total_Size();         //FAT32_Get_Total_Size()可以返回磁盘的总容量，单位是兆
   \   000000BC   ........           BL       FAT32_Get_Total_Size
   \   000000C0   ........           LDR.W    R1,??DataTable14_2
   \   000000C4   0968               LDR      R1,[R1, #+0]
   \   000000C6   4860               STR      R0,[R1, #+4]
    235           
    236           temp_last_cluster=Search_Last_Usable_Cluster();
   \   000000C8   ........           BL       Search_Last_Usable_Cluster
   \   000000CC   ........           LDR.W    R1,??DataTable15_2
   \   000000D0   0860               STR      R0,[R1, #+0]
    237          }
   \   000000D2   10BD               POP      {R4,PC}          ;; return
    238          
    239          /***********************************************************************
    240           - 功能描述：获取剩余容量
    241           - 隶属模块：znFAT文件系统模块
    242           - 函数属性：外部，使用户使用
    243           - 参数说明：无    
    244           - 返回说明：剩余容量，单位字节
    245           - 注：从FSInfo中读取空闲簇数，而从计算得到剩余的容量，单位字节
    246           ***********************************************************************/
    247          

   \                                 In section .text, align 2, keep-with-next
    248          uint32 FAT32_Get_Remain_Cap()
    249          {
   \                     FAT32_Get_Remain_Cap:
   \   00000000   80B5               PUSH     {R7,LR}
    250           FAT32_ReadSector(1+pArg->BPB_Sector_No,FAT32_Buffer);
   \   00000002   ........           LDR.W    R1,??DataTable14
   \   00000006   ........           LDR.W    R0,??DataTable14_2
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   4078               LDRB     R0,[R0, #+1]
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   ........           BL       FAT32_ReadSector
    251           if(((struct FSInfo *)FAT32_Buffer)->Free_Cluster[0]==0xff 
    252           && ((struct FSInfo *)FAT32_Buffer)->Free_Cluster[1]==0xff 
    253           && ((struct FSInfo *)FAT32_Buffer)->Free_Cluster[2]==0xff 
    254           && ((struct FSInfo *)FAT32_Buffer)->Free_Cluster[3]==0xff)
   \   00000014   ........           LDR.W    R0,??DataTable14
   \   00000018   90F8E801           LDRB     R0,[R0, #+488]
   \   0000001C   FF28               CMP      R0,#+255
   \   0000001E   16D1               BNE.N    ??FAT32_Get_Remain_Cap_0
   \   00000020   ........           LDR.W    R0,??DataTable14
   \   00000024   90F8E901           LDRB     R0,[R0, #+489]
   \   00000028   FF28               CMP      R0,#+255
   \   0000002A   10D1               BNE.N    ??FAT32_Get_Remain_Cap_0
   \   0000002C   ........           LDR.W    R0,??DataTable14
   \   00000030   90F8EA01           LDRB     R0,[R0, #+490]
   \   00000034   FF28               CMP      R0,#+255
   \   00000036   0AD1               BNE.N    ??FAT32_Get_Remain_Cap_0
   \   00000038   ........           LDR.W    R0,??DataTable14
   \   0000003C   90F8EB01           LDRB     R0,[R0, #+491]
   \   00000040   FF28               CMP      R0,#+255
   \   00000042   04D1               BNE.N    ??FAT32_Get_Remain_Cap_0
    255           return pArg->Total_Size;
   \   00000044   ........           LDR.W    R0,??DataTable14_2
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   4068               LDR      R0,[R0, #+4]
   \   0000004C   0EE0               B.N      ??FAT32_Get_Remain_Cap_1
    256           else
    257           return LE2BE(((struct FSInfo *)FAT32_Buffer)->Free_Cluster,4)*pArg->SectorsPerClust*pArg->BytesPerSector; 
   \                     ??FAT32_Get_Remain_Cap_0:
   \   0000004E   0421               MOVS     R1,#+4
   \   00000050   ........           LDR.W    R0,??DataTable15_3
   \   00000054   ........           BL       LE2BE
   \   00000058   ........           LDR.W    R1,??DataTable14_2
   \   0000005C   0968               LDR      R1,[R1, #+0]
   \   0000005E   4969               LDR      R1,[R1, #+20]
   \   00000060   4843               MULS     R0,R1,R0
   \   00000062   ........           LDR.W    R1,??DataTable14_2
   \   00000066   0968               LDR      R1,[R1, #+0]
   \   00000068   C968               LDR      R1,[R1, #+12]
   \   0000006A   4843               MULS     R0,R1,R0
   \                     ??FAT32_Get_Remain_Cap_1:
   \   0000006C   02BD               POP      {R1,PC}          ;; return
    258          }
    259          
    260          /***********************************************************************
    261           - 功能描述：更新FSInfo中的可用空闲簇的数量
    262           - 隶属模块：znFAT文件系统模块
    263           - 函数属性：内部
    264           - 参数说明：PlusOrMinus:可用空闲簇数加1或减1    
    265           - 返回说明：无
    266           - 注：创建文件、追加数据、删除文件等操作都可能会使可用的空闲簇数变化
    267                 要及时更新
    268           ***********************************************************************/
    269          

   \                                 In section .text, align 2, keep-with-next
    270          void FAT32_Update_FSInfo_Free_Clu(uint32 PlusOrMinus)
    271          {
   \                     FAT32_Update_FSInfo_Free_Clu:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0400               MOVS     R4,R0
    272           uint32 Free_Clu=0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0090               STR      R0,[SP, #+0]
    273           FAT32_ReadSector(1+pArg->BPB_Sector_No,FAT32_Buffer);
   \   0000000A   ........           LDR.W    R1,??DataTable14
   \   0000000E   ........           LDR.W    R0,??DataTable14_2
   \   00000012   0068               LDR      R0,[R0, #+0]
   \   00000014   4078               LDRB     R0,[R0, #+1]
   \   00000016   401C               ADDS     R0,R0,#+1
   \   00000018   ........           BL       FAT32_ReadSector
    274          
    275           Free_Clu=(FAT32_Get_Remain_Cap())/(pArg->SectorsPerClust*pArg->BytesPerSector);
   \   0000001C   ........           BL       FAT32_Get_Remain_Cap
   \   00000020   ........           LDR.W    R1,??DataTable14_2
   \   00000024   0968               LDR      R1,[R1, #+0]
   \   00000026   4969               LDR      R1,[R1, #+20]
   \   00000028   ........           LDR.W    R2,??DataTable14_2
   \   0000002C   1268               LDR      R2,[R2, #+0]
   \   0000002E   D268               LDR      R2,[R2, #+12]
   \   00000030   5143               MULS     R1,R2,R1
   \   00000032   B0FBF1F0           UDIV     R0,R0,R1
   \   00000036   0090               STR      R0,[SP, #+0]
    276          
    277           if(PlusOrMinus) Free_Clu++;
   \   00000038   002C               CMP      R4,#+0
   \   0000003A   03D0               BEQ.N    ??FAT32_Update_FSInfo_Free_Clu_0
   \   0000003C   0098               LDR      R0,[SP, #+0]
   \   0000003E   401C               ADDS     R0,R0,#+1
   \   00000040   0090               STR      R0,[SP, #+0]
   \   00000042   02E0               B.N      ??FAT32_Update_FSInfo_Free_Clu_1
    278           else Free_Clu--;
   \                     ??FAT32_Update_FSInfo_Free_Clu_0:
   \   00000044   0098               LDR      R0,[SP, #+0]
   \   00000046   401E               SUBS     R0,R0,#+1
   \   00000048   0090               STR      R0,[SP, #+0]
    279          
    280           ((struct FSInfo *)FAT32_Buffer)->Free_Cluster[0]=((unsigned char *)&Free_Clu)[3]; 
   \                     ??FAT32_Update_FSInfo_Free_Clu_1:
   \   0000004A   ........           LDR.W    R0,??DataTable14
   \   0000004E   9DF80310           LDRB     R1,[SP, #+3]
   \   00000052   80F8E811           STRB     R1,[R0, #+488]
    281           ((struct FSInfo *)FAT32_Buffer)->Free_Cluster[1]=((unsigned char *)&Free_Clu)[2];
   \   00000056   ........           LDR.W    R0,??DataTable14
   \   0000005A   9DF80210           LDRB     R1,[SP, #+2]
   \   0000005E   80F8E911           STRB     R1,[R0, #+489]
    282           ((struct FSInfo *)FAT32_Buffer)->Free_Cluster[2]=((unsigned char *)&Free_Clu)[1];
   \   00000062   ........           LDR.W    R0,??DataTable14
   \   00000066   9DF80110           LDRB     R1,[SP, #+1]
   \   0000006A   80F8EA11           STRB     R1,[R0, #+490]
    283           ((struct FSInfo *)FAT32_Buffer)->Free_Cluster[3]=((unsigned char *)&Free_Clu)[0];
   \   0000006E   ........           LDR.W    R0,??DataTable14
   \   00000072   9DF80010           LDRB     R1,[SP, #+0]
   \   00000076   80F8EB11           STRB     R1,[R0, #+491]
    284           FAT32_WriteSector(1+pArg->BPB_Sector_No,FAT32_Buffer);   
   \   0000007A   ........           LDR.W    R1,??DataTable14
   \   0000007E   ........           LDR.W    R0,??DataTable14_2
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   4078               LDRB     R0,[R0, #+1]
   \   00000086   401C               ADDS     R0,R0,#+1
   \   00000088   ........           BL       FAT32_WriteSector
    285          }
   \   0000008C   13BD               POP      {R0,R1,R4,PC}    ;; return
    286          
    287          /***********************************************************************
    288           - 功能描述：更新FSInfo中的下一个可用空闲簇的簇号
    289           - 隶属模块：znFAT文件系统模块
    290           - 函数属性：内部
    291           - 参数说明：Last_Clu:将要更新到FSInfo中的下一个可用空闲簇的簇号    
    292           - 返回说明：无
    293           - 注：FSInfo中的下一个可用空闲簇号可以给文件系统一个参考，直接告诉文件系统
    294                 下一个可用的空闲簇在什么地方
    295           ***********************************************************************/
    296          

   \                                 In section .text, align 2, keep-with-next
    297          void FAT32_Update_FSInfo_Last_Clu(uint32 Last_Clu)
    298          {
   \                     FAT32_Update_FSInfo_Last_Clu:
   \   00000000   01B5               PUSH     {R0,LR}
    299           FAT32_ReadSector(1+pArg->BPB_Sector_No,FAT32_Buffer);  
   \   00000002   ........           LDR.W    R1,??DataTable14
   \   00000006   ........           LDR.W    R0,??DataTable14_2
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   4078               LDRB     R0,[R0, #+1]
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   ........           BL       FAT32_ReadSector
    300           ((struct FSInfo *)FAT32_Buffer)->Last_Cluster[0]=((unsigned char *)&Last_Clu)[3]; 
   \   00000014   ........           LDR.W    R0,??DataTable14
   \   00000018   9DF80310           LDRB     R1,[SP, #+3]
   \   0000001C   80F8EC11           STRB     R1,[R0, #+492]
    301           ((struct FSInfo *)FAT32_Buffer)->Last_Cluster[1]=((unsigned char *)&Last_Clu)[2];
   \   00000020   ........           LDR.W    R0,??DataTable14
   \   00000024   9DF80210           LDRB     R1,[SP, #+2]
   \   00000028   80F8ED11           STRB     R1,[R0, #+493]
    302           ((struct FSInfo *)FAT32_Buffer)->Last_Cluster[2]=((unsigned char *)&Last_Clu)[1];
   \   0000002C   ........           LDR.W    R0,??DataTable14
   \   00000030   9DF80110           LDRB     R1,[SP, #+1]
   \   00000034   80F8EE11           STRB     R1,[R0, #+494]
    303           ((struct FSInfo *)FAT32_Buffer)->Last_Cluster[3]=((unsigned char *)&Last_Clu)[0];
   \   00000038   ........           LDR.W    R0,??DataTable14
   \   0000003C   9DF80010           LDRB     R1,[SP, #+0]
   \   00000040   80F8EF11           STRB     R1,[R0, #+495]
    304           FAT32_WriteSector(1+pArg->BPB_Sector_No,FAT32_Buffer);
   \   00000044   ........           LDR.W    R1,??DataTable14
   \   00000048   ........           LDR.W    R0,??DataTable14_2
   \   0000004C   0068               LDR      R0,[R0, #+0]
   \   0000004E   4078               LDRB     R0,[R0, #+1]
   \   00000050   401C               ADDS     R0,R0,#+1
   \   00000052   ........           BL       FAT32_WriteSector
    305          }
   \   00000056   01BD               POP      {R0,PC}          ;; return
    306          
    307          /***********************************************************************
    308           - 功能描述：获得下一个簇的簇号
    309           - 隶属模块：znFAT文件系统模块
    310           - 函数属性：内部
    311           - 参数说明：LastCluster:基准簇号  
    312           - 返回说明：LastClutster的下一簇的簇号
    313           - 注：获得下一簇的簇号，就是凭借FAT表中所记录的簇链关系来实现的
    314           ***********************************************************************/
    315          

   \                                 In section .text, align 2, keep-with-next
    316          uint32 FAT32_GetNextCluster(uint32 LastCluster)
    317          {
   \                     FAT32_GetNextCluster:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    318           uint32 temp;
    319           struct FAT32_FAT *pFAT;
    320           struct FAT32_FAT_Item *pFAT_Item;
    321           temp=((LastCluster/128)+pArg->FirstFATSector);
   \   00000004   ........           LDR.W    R0,??DataTable14_2
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   8069               LDR      R0,[R0, #+24]
   \   0000000C   10EBD410           ADDS     R0,R0,R4, LSR #+7
    322           FAT32_ReadSector(temp,FAT32_Buffer);
   \   00000010   ........           LDR.W    R1,??DataTable14
   \   00000014   ........           BL       FAT32_ReadSector
    323           pFAT=(struct FAT32_FAT *)FAT32_Buffer;
   \   00000018   ........           LDR.W    R0,??DataTable14
    324           pFAT_Item=&((pFAT->Items)[LastCluster%128]);
   \   0000001C   8021               MOVS     R1,#+128
   \   0000001E   B4FBF1F2           UDIV     R2,R4,R1
   \   00000022   02FB1142           MLS      R2,R2,R1,R4
   \   00000026   10EB8200           ADDS     R0,R0,R2, LSL #+2
    325           return LE2BE((uint8 *)pFAT_Item,4);
   \   0000002A   0421               MOVS     R1,#+4
   \   0000002C   ........           BL       LE2BE
   \   00000030   10BD               POP      {R4,PC}          ;; return
    326          }
    327          
    328          /***********************************************************************
    329           - 功能描述：比较目录名
    330           - 隶属模块：znFAT文件系统模块
    331           - 函数属性：内部
    332           - 参数说明：a:指向目录名1的指针
    333                       b:指向目录名2的指针
    334           - 返回说明：如果两个目录名相同就返回1，否则为0
    335           ***********************************************************************/
    336          

   \                                 In section .text, align 2, keep-with-next
    337          uint8 Compare_Dir_Name(int8 *a,int8 *b)
    338          {
   \                     Compare_Dir_Name:
   \   00000000   10B4               PUSH     {R4}
    339           uint8 i;
    340           for(i=0;i<8;i++)
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   00E0               B.N      ??Compare_Dir_Name_0
   \                     ??Compare_Dir_Name_1:
   \   00000006   521C               ADDS     R2,R2,#+1
   \                     ??Compare_Dir_Name_0:
   \   00000008   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   082A               CMP      R2,#+8
   \   0000000C   07D2               BCS.N    ??Compare_Dir_Name_2
    341           {
    342            if(a[i]!=b[i]) return 0;
   \   0000000E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   135C               LDRB     R3,[R2, R0]
   \   00000012   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   545C               LDRB     R4,[R2, R1]
   \   00000016   A342               CMP      R3,R4
   \   00000018   F5D0               BEQ.N    ??Compare_Dir_Name_1
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   00E0               B.N      ??Compare_Dir_Name_3
    343           }
    344           return 1;
   \                     ??Compare_Dir_Name_2:
   \   0000001E   0120               MOVS     R0,#+1
   \                     ??Compare_Dir_Name_3:
   \   00000020   10BC               POP      {R4}
   \   00000022   7047               BX       LR               ;; return
    345          }
    346          
    347          /***********************************************************************
    348           - 功能描述：文件名匹配(支持带*?通配符的文件名的匹配)
    349           - 隶属模块：znFAT文件系统模块
    350           - 函数属性：内部
    351           - 参数说明：pat:源文件名，可以含*或?通配符 如 *.txt 或 A?.mp3等等
    352                       name:目标文件名
    353           - 返回说明：如果两个文件名匹配就返回1，否则为0
    354           - 注：关于通配文件名匹配，有这样的例子，比如 A*.txt 与 ABC.txt是匹配的
    355             同时与 ABCDE.txt也是匹配的。此功能在文件枚举中将会用到，用来匹配
    356             文件名符合一定条件的文件
    357           ***********************************************************************/
    358          

   \                                 In section .text, align 2, keep-with-next
    359          uint8 FilenameMatch(int8 *pat,int8 *name)
    360          {
   \                     FilenameMatch:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0C00               MOVS     R4,R1
    361           int16 match,ndone;
    362           int8 *cpp,*cpn;
    363           cpp=pat;
    364           cpn=name;
   \   00000006   2000               MOVS     R0,R4
    365           match=1;
   \   00000008   0125               MOVS     R5,#+1
    366           ndone=1;
   \   0000000A   0127               MOVS     R7,#+1
   \   0000000C   03E0               B.N      ??FilenameMatch_0
    367           while(ndone)
    368           {
    369            switch (*cpp)
    370            {
    371             case '*':
    372                      cpp++;
    373                      cpn=strchr(cpn,*cpp);
    374                      if(cpn==NULL)
    375                      {
    376                       cpn=name;
    377                       while(*cpn) cpn++;
   \                     ??FilenameMatch_1:
   \   0000000E   401C               ADDS     R0,R0,#+1
   \                     ??FilenameMatch_2:
   \   00000010   0178               LDRB     R1,[R0, #+0]
   \   00000012   0029               CMP      R1,#+0
   \   00000014   FBD1               BNE.N    ??FilenameMatch_1
    378                      }
    379                      break;
   \                     ??FilenameMatch_3:
   \                     ??FilenameMatch_0:
   \   00000016   3FB2               SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000018   002F               CMP      R7,#+0
   \   0000001A   22D0               BEQ.N    ??FilenameMatch_4
   \   0000001C   3178               LDRB     R1,[R6, #+0]
   \   0000001E   0029               CMP      R1,#+0
   \   00000020   0FD0               BEQ.N    ??FilenameMatch_5
   \   00000022   2A29               CMP      R1,#+42
   \   00000024   02D0               BEQ.N    ??FilenameMatch_6
   \   00000026   3F29               CMP      R1,#+63
   \   00000028   08D0               BEQ.N    ??FilenameMatch_7
   \   0000002A   10E0               B.N      ??FilenameMatch_8
   \                     ??FilenameMatch_6:
   \   0000002C   761C               ADDS     R6,R6,#+1
   \   0000002E   3178               LDRB     R1,[R6, #+0]
   \   00000030   ........           BL       strchr
   \   00000034   0028               CMP      R0,#+0
   \   00000036   EED1               BNE.N    ??FilenameMatch_3
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   E9E7               B.N      ??FilenameMatch_2
    380             case '?':
    381                      cpp++;
   \                     ??FilenameMatch_7:
   \   0000003C   761C               ADDS     R6,R6,#+1
    382                      cpn++;
   \   0000003E   401C               ADDS     R0,R0,#+1
    383                      break;
   \   00000040   E9E7               B.N      ??FilenameMatch_0
    384             case 0:
    385                      if(*cpn!=0)
   \                     ??FilenameMatch_5:
   \   00000042   0178               LDRB     R1,[R0, #+0]
   \   00000044   0029               CMP      R1,#+0
   \   00000046   00D0               BEQ.N    ??FilenameMatch_9
    386                      match=0;
   \   00000048   0025               MOVS     R5,#+0
    387                      ndone=0;
   \                     ??FilenameMatch_9:
   \   0000004A   0027               MOVS     R7,#+0
    388                      break;
   \   0000004C   E3E7               B.N      ??FilenameMatch_0
    389             default:
    390                      if((*cpp)==(*cpn))
   \                     ??FilenameMatch_8:
   \   0000004E   3178               LDRB     R1,[R6, #+0]
   \   00000050   0278               LDRB     R2,[R0, #+0]
   \   00000052   9142               CMP      R1,R2
   \   00000054   02D1               BNE.N    ??FilenameMatch_10
    391                      {
    392                       cpp++;
   \   00000056   761C               ADDS     R6,R6,#+1
    393                       cpn++;
   \   00000058   401C               ADDS     R0,R0,#+1
   \   0000005A   01E0               B.N      ??FilenameMatch_11
    394                      }
    395                      else
    396                      {
    397                       match=0;
   \                     ??FilenameMatch_10:
   \   0000005C   0025               MOVS     R5,#+0
    398                       ndone=0;
   \   0000005E   0027               MOVS     R7,#+0
    399                      }
    400                      break;
   \                     ??FilenameMatch_11:
   \   00000060   D9E7               B.N      ??FilenameMatch_0
    401            }
    402           }
    403           return(match);
   \                     ??FilenameMatch_4:
   \   00000062   2800               MOVS     R0,R5
   \   00000064   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   F2BD               POP      {R1,R4-R7,PC}    ;; return
    404          }
    405          
    406          /***********************************************************************
    407           - 功能描述：FAT32的文件目录项的文件名字段(8个字节)，转为普通的文件名
    408                       如：ABC     MP3 将转为 ABC.MP3
    409           - 隶属模块：znFAT文件系统模块
    410           - 函数属性：内部
    411           - 参数说明：dName：指向文件目录项的文件名字段的指针
    412                       pName：指向转换完成后的文件名
    413           - 返回说明：无
    414           - 注：此函数配合上面的FilenameMatch函数，就可以实现对文件名通配匹配
    415           ***********************************************************************/
    416          

   \                                 In section .text, align 2, keep-with-next
    417          void FAT32_toFileName(char *dName,char *pName)
    418          {
   \                     FAT32_toFileName:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    419           char i=7,j=0,k=0;
   \   00000006   0726               MOVS     R6,#+7
   \   00000008   0027               MOVS     R7,#+0
   \   0000000A   0020               MOVS     R0,#+0
    420           while(dName[i--]==' ');
   \                     ??FAT32_toFileName_0:
   \   0000000C   3000               MOVS     R0,R6
   \   0000000E   461E               SUBS     R6,R0,#+1
   \   00000010   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   005D               LDRB     R0,[R0, R4]
   \   00000014   2028               CMP      R0,#+32
   \   00000016   F9D0               BEQ.N    ??FAT32_toFileName_0
    421           for(j=0;j<i+2;j++) pName[j]=L2U(dName[j]);
   \   00000018   0027               MOVS     R7,#+0
   \   0000001A   06E0               B.N      ??FAT32_toFileName_1
   \                     ??FAT32_toFileName_2:
   \   0000001C   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   385D               LDRB     R0,[R7, R4]
   \   00000020   ........           BL       L2U
   \   00000024   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000026   7855               STRB     R0,[R7, R5]
   \   00000028   7F1C               ADDS     R7,R7,#+1
   \                     ??FAT32_toFileName_1:
   \   0000002A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002E   B01C               ADDS     R0,R6,#+2
   \   00000030   8742               CMP      R7,R0
   \   00000032   F3DB               BLT.N    ??FAT32_toFileName_2
    422           pName[j++]='.';
   \   00000034   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000036   2E20               MOVS     R0,#+46
   \   00000038   7855               STRB     R0,[R7, R5]
   \   0000003A   7F1C               ADDS     R7,R7,#+1
    423           i=10;
   \   0000003C   0A26               MOVS     R6,#+10
    424           while(dName[i--]==' ');
   \                     ??FAT32_toFileName_3:
   \   0000003E   3000               MOVS     R0,R6
   \   00000040   461E               SUBS     R6,R0,#+1
   \   00000042   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   005D               LDRB     R0,[R0, R4]
   \   00000046   2028               CMP      R0,#+32
   \   00000048   F9D0               BEQ.N    ??FAT32_toFileName_3
    425           k=j+i-6;
   \   0000004A   F019               ADDS     R0,R6,R7
   \   0000004C   801F               SUBS     R0,R0,#+6
    426           i=0;
   \   0000004E   0026               MOVS     R6,#+0
   \   00000050   06E0               B.N      ??FAT32_toFileName_4
    427           for(;j<k;j++) pName[j]=dName[8+(i++)];
   \                     ??FAT32_toFileName_5:
   \   00000052   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000054   3119               ADDS     R1,R6,R4
   \   00000056   097A               LDRB     R1,[R1, #+8]
   \   00000058   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   7955               STRB     R1,[R7, R5]
   \   0000005C   761C               ADDS     R6,R6,#+1
   \   0000005E   7F1C               ADDS     R7,R7,#+1
   \                     ??FAT32_toFileName_4:
   \   00000060   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000062   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   8742               CMP      R7,R0
   \   00000066   F4D3               BCC.N    ??FAT32_toFileName_5
    428           pName[j]=0; 
   \   00000068   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006A   0020               MOVS     R0,#+0
   \   0000006C   7855               STRB     R0,[R7, R5]
    429          }
   \   0000006E   F1BD               POP      {R0,R4-R7,PC}    ;; return
    430          
    431          /***********************************************************************
    432           - 功能描述：将字符串中的小写字符都转为大写字符
    433           - 隶属模块：znFAT文件系统模块
    434           - 函数属性：内部
    435           - 参数说明：str：指向待转换的字符串
    436           - 返回说明：无
    437           - 注：短文件名的情况下，文件名中的字符其实都是大写字符，为了方便，将文件
    438                 名都转为大写
    439           ***********************************************************************/
    440          

   \                                 In section .text, align 2, keep-with-next
    441          void Str2Up(char *str)
    442          {
   \                     Str2Up:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    443           unsigned char len=strlen(str),i;
   \   00000004   2000               MOVS     R0,R4
   \   00000006   ........           BL       strlen
   \   0000000A   0500               MOVS     R5,R0
    444           for(i=0;i<len;i++)
   \   0000000C   0026               MOVS     R6,#+0
   \   0000000E   06E0               B.N      ??Str2Up_0
    445           {
    446            str[i]=L2U(str[i]); 
   \                     ??Str2Up_1:
   \   00000010   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   305D               LDRB     R0,[R6, R4]
   \   00000014   ........           BL       L2U
   \   00000018   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   3055               STRB     R0,[R6, R4]
    447           } 
   \   0000001C   761C               ADDS     R6,R6,#+1
   \                     ??Str2Up_0:
   \   0000001E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   AE42               CMP      R6,R5
   \   00000024   F4D3               BCC.N    ??Str2Up_1
    448          }
   \   00000026   70BD               POP      {R4-R6,PC}       ;; return
    449          
    450          /**************************************************************************
    451           - 功能描述：进入一个目录
    452           - 隶属模块：znFAT文件系统模块
    453           - 函数属性：外部，使用户使用
    454           - 参数说明：path:目录的路径 形如："\\dir1\\dir2\\" ，最后一定是以\\结束 
    455           - 返回说明：返回目录的开始簇号，如果进入目录失败，比如目录不存在，则返回0
    456           - 注：此函数由后面的FAT32_Open_File等函数调用，用来实现打开任意目录下的文件
    457                 不建议用户调用
    458           **************************************************************************/
    459          

   \                                 In section .text, align 2, keep-with-next
    460          uint32 FAT32_Enter_Dir(int8 *path)
    461          {
   \                     FAT32_Enter_Dir:
   \   00000000   2DE9F14F           PUSH     {R0,R4-R11,LR}
   \   00000004   86B0               SUB      SP,SP,#+24
    462           uint32 Cur_Clust,sec_temp,iSec,iDir,Old_Clust;
    463           uint8 i=1,counter=0,flag=0;
   \   00000006   0125               MOVS     R5,#+1
   \   00000008   0026               MOVS     R6,#+0
   \   0000000A   0027               MOVS     R7,#+0
    464           struct direntry *pDir;
    465           int8 name[20];
    466          
    467           Cur_Clust=pArg->FirstDirClust;
   \   0000000C   ........           LDR.W    R0,??DataTable14_2
   \   00000010   0068               LDR      R0,[R0, #+0]
   \   00000012   8468               LDR      R4,[R0, #+8]
    468           if(path[1]==0 && path[0]=='\\') return Cur_Clust;
   \   00000014   0698               LDR      R0,[SP, #+24]
   \   00000016   4078               LDRB     R0,[R0, #+1]
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   0FD1               BNE.N    ??FAT32_Enter_Dir_0
   \   0000001C   0698               LDR      R0,[SP, #+24]
   \   0000001E   0078               LDRB     R0,[R0, #+0]
   \   00000020   5C28               CMP      R0,#+92
   \   00000022   0BD1               BNE.N    ??FAT32_Enter_Dir_0
   \   00000024   2000               MOVS     R0,R4
   \   00000026   9DE0               B.N      ??FAT32_Enter_Dir_1
    469           else
    470           {
    471            while(path[i]!=0)
    472            {
    473             if(path[i]=='\\')
    474             {
    475              for(;counter<8;counter++)
    476          	{
    477          	 name[counter]=' ';
    478          	}
    479          	name[counter]=0;
    480          	counter=0;
    481          	
    482          	do
    483          	{
    484          	 sec_temp=(SOC(Cur_Clust));
    485          	 for(iSec=sec_temp;iSec<sec_temp+pArg->SectorsPerClust;iSec++)
    486          	 {
    487          	  FAT32_ReadSector(iSec,FAT32_Buffer);
    488          	  for(iDir=0;iDir<pArg->BytesPerSector;iDir+=sizeof(struct direntry))
    489                {
    490                 pDir=((struct direntry *)(FAT32_Buffer+iDir));
    491          	   if(Compare_Dir_Name(pDir->deName,name))
    492          	   {
    493          	    flag=1;
    494          		Cur_Clust=LE2BE(pDir->deLowCluster,2)+LE2BE(pDir->deHighClust,2)*65536;
    495          		iDir=pArg->BytesPerSector;
    496          		iSec=sec_temp+pArg->SectorsPerClust;
    497          	   } 
    498          	  }
    499          	 }
    500          	 Old_Clust=Cur_Clust;
    501          	}while(!flag && (Cur_Clust=FAT32_GetNextCluster(Cur_Clust))!=0x0fffffff);
    502          	if(!flag) 
    503          	{
    504          	 temp_dir_cluster=Old_Clust;
    505          	 strcpy(temp_dir_name,name);
    506          	 flag=0;
    507          	 return 0;
    508          	}
    509          	flag=0; 
    510             }
    511             else
    512             {
    513              name[counter++]=(L2U(path[i]));
   \                     ??FAT32_Enter_Dir_2:
   \   00000028   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0698               LDR      R0,[SP, #+24]
   \   0000002C   285C               LDRB     R0,[R5, R0]
   \   0000002E   ........           BL       L2U
   \   00000032   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000034   00A9               ADD      R1,SP,#+0
   \   00000036   7054               STRB     R0,[R6, R1]
   \   00000038   761C               ADDS     R6,R6,#+1
    514             }
    515             i++;
   \                     ??FAT32_Enter_Dir_3:
   \   0000003A   6D1C               ADDS     R5,R5,#+1
   \                     ??FAT32_Enter_Dir_0:
   \   0000003C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0698               LDR      R0,[SP, #+24]
   \   00000040   285C               LDRB     R0,[R5, R0]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   00F08080           BEQ.W    ??FAT32_Enter_Dir_4
   \   00000048   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004A   0698               LDR      R0,[SP, #+24]
   \   0000004C   285C               LDRB     R0,[R5, R0]
   \   0000004E   5C28               CMP      R0,#+92
   \   00000050   EAD1               BNE.N    ??FAT32_Enter_Dir_2
   \   00000052   04E0               B.N      ??FAT32_Enter_Dir_5
   \                     ??FAT32_Enter_Dir_6:
   \   00000054   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   00A8               ADD      R0,SP,#+0
   \   00000058   2021               MOVS     R1,#+32
   \   0000005A   3154               STRB     R1,[R6, R0]
   \   0000005C   761C               ADDS     R6,R6,#+1
   \                     ??FAT32_Enter_Dir_5:
   \   0000005E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000060   082E               CMP      R6,#+8
   \   00000062   F7D3               BCC.N    ??FAT32_Enter_Dir_6
   \   00000064   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000066   00A8               ADD      R0,SP,#+0
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   3154               STRB     R1,[R6, R0]
   \   0000006C   0026               MOVS     R6,#+0
   \                     ??FAT32_Enter_Dir_7:
   \   0000006E   ........           LDR.W    R0,??DataTable14_2
   \   00000072   0068               LDR      R0,[R0, #+0]
   \   00000074   8068               LDR      R0,[R0, #+8]
   \   00000076   201A               SUBS     R0,R4,R0
   \   00000078   ........           LDR.W    R1,??DataTable14_2
   \   0000007C   0968               LDR      R1,[R1, #+0]
   \   0000007E   4969               LDR      R1,[R1, #+20]
   \   00000080   ........           LDR.W    R2,??DataTable14_2
   \   00000084   1268               LDR      R2,[R2, #+0]
   \   00000086   D269               LDR      R2,[R2, #+28]
   \   00000088   01FB0028           MLA      R8,R1,R0,R2
   \   0000008C   C246               MOV      R10,R8
   \   0000008E   2EE0               B.N      ??FAT32_Enter_Dir_8
   \                     ??FAT32_Enter_Dir_9:
   \   00000090   ........           LDR.W    R0,??DataTable14
   \   00000094   1BEB0009           ADDS     R9,R11,R0
   \   00000098   00A9               ADD      R1,SP,#+0
   \   0000009A   4846               MOV      R0,R9
   \   0000009C   ........           BL       Compare_Dir_Name
   \   000000A0   0028               CMP      R0,#+0
   \   000000A2   1AD0               BEQ.N    ??FAT32_Enter_Dir_10
   \   000000A4   0127               MOVS     R7,#+1
   \   000000A6   0221               MOVS     R1,#+2
   \   000000A8   19F11A00           ADDS     R0,R9,#+26
   \   000000AC   ........           BL       LE2BE
   \   000000B0   0400               MOVS     R4,R0
   \   000000B2   0221               MOVS     R1,#+2
   \   000000B4   19F11400           ADDS     R0,R9,#+20
   \   000000B8   ........           BL       LE2BE
   \   000000BC   5FF48031           MOVS     R1,#+65536
   \   000000C0   01FB0044           MLA      R4,R1,R0,R4
   \   000000C4   ........           LDR.W    R0,??DataTable14_2
   \   000000C8   0068               LDR      R0,[R0, #+0]
   \   000000CA   D0F80CB0           LDR      R11,[R0, #+12]
   \   000000CE   ........           LDR.W    R0,??DataTable14_2
   \   000000D2   0068               LDR      R0,[R0, #+0]
   \   000000D4   4069               LDR      R0,[R0, #+20]
   \   000000D6   10EB080A           ADDS     R10,R0,R8
   \                     ??FAT32_Enter_Dir_10:
   \   000000DA   1BF1200B           ADDS     R11,R11,#+32
   \                     ??FAT32_Enter_Dir_11:
   \   000000DE   ........           LDR.W    R0,??DataTable14_2
   \   000000E2   0068               LDR      R0,[R0, #+0]
   \   000000E4   C068               LDR      R0,[R0, #+12]
   \   000000E6   8345               CMP      R11,R0
   \   000000E8   D2D3               BCC.N    ??FAT32_Enter_Dir_9
   \   000000EA   1AF1010A           ADDS     R10,R10,#+1
   \                     ??FAT32_Enter_Dir_8:
   \   000000EE   ........           LDR.W    R0,??DataTable14_2
   \   000000F2   0068               LDR      R0,[R0, #+0]
   \   000000F4   4069               LDR      R0,[R0, #+20]
   \   000000F6   10EB0800           ADDS     R0,R0,R8
   \   000000FA   8245               CMP      R10,R0
   \   000000FC   07D2               BCS.N    ??FAT32_Enter_Dir_12
   \   000000FE   ........           LDR.W    R1,??DataTable14
   \   00000102   5046               MOV      R0,R10
   \   00000104   ........           BL       FAT32_ReadSector
   \   00000108   5FF0000B           MOVS     R11,#+0
   \   0000010C   E7E7               B.N      ??FAT32_Enter_Dir_11
   \                     ??FAT32_Enter_Dir_12:
   \   0000010E   A046               MOV      R8,R4
   \   00000110   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000112   002F               CMP      R7,#+0
   \   00000114   07D1               BNE.N    ??FAT32_Enter_Dir_13
   \   00000116   2000               MOVS     R0,R4
   \   00000118   ........           BL       FAT32_GetNextCluster
   \   0000011C   0400               MOVS     R4,R0
   \   0000011E   7FF07041           MVNS     R1,#-268435456
   \   00000122   8842               CMP      R0,R1
   \   00000124   A3D1               BNE.N    ??FAT32_Enter_Dir_7
   \                     ??FAT32_Enter_Dir_13:
   \   00000126   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000128   002F               CMP      R7,#+0
   \   0000012A   0BD1               BNE.N    ??FAT32_Enter_Dir_14
   \   0000012C   ........           LDR.W    R0,??DataTable17
   \   00000130   C0F80080           STR      R8,[R0, #+0]
   \   00000134   00A9               ADD      R1,SP,#+0
   \   00000136   ........           LDR.W    R0,??DataTable17_1
   \   0000013A   ........           BL       strcpy
   \   0000013E   0027               MOVS     R7,#+0
   \   00000140   0020               MOVS     R0,#+0
   \   00000142   0FE0               B.N      ??FAT32_Enter_Dir_1
   \                     ??FAT32_Enter_Dir_14:
   \   00000144   0027               MOVS     R7,#+0
   \   00000146   78E7               B.N      ??FAT32_Enter_Dir_3
    516            }
    517           }
    518           name[counter]=0; 
   \                     ??FAT32_Enter_Dir_4:
   \   00000148   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000014A   00A8               ADD      R0,SP,#+0
   \   0000014C   0021               MOVS     R1,#+0
   \   0000014E   3154               STRB     R1,[R6, R0]
    519           flag=1;
   \   00000150   0127               MOVS     R7,#+1
    520           temp_dir_cluster=Cur_Clust;
   \   00000152   ........           LDR.W    R0,??DataTable17
   \   00000156   0460               STR      R4,[R0, #+0]
    521           strcpy(temp_dir_name,name);
   \   00000158   00A9               ADD      R1,SP,#+0
   \   0000015A   ........           LDR.W    R0,??DataTable17_1
   \   0000015E   ........           BL       strcpy
    522           return Cur_Clust;
   \   00000162   2000               MOVS     R0,R4
   \                     ??FAT32_Enter_Dir_1:
   \   00000164   07B0               ADD      SP,SP,#+28
   \   00000166   BDE8F08F           POP      {R4-R11,PC}      ;; return
    523          }
    524          
    525          /**************************************************************************
    526           - 功能描述：打开一个文件(支持文件名通配，如 A*.txt 或 *.*)
    527           - 隶属模块：znFAT文件系统模块
    528           - 函数属性：外部，使用户使用
    529           - 参数说明：pfi: FileInfoStruct类型的结构体指针，用来装载文件的参数信息
    530                        比如文件的大小、文件的名称、文件的开始簇等等，以备后面使用
    531                       filepath: 文件的路径，支持任意层目录 比如
    532                        "\\dir1\\dir2\\dir3\\....\\test.txt"
    533          			 item：在文件名中有通配符*或?的情况下，实现与之匹配的文件并非
    534          			 一个，item就是打开的文件的项数，比如符合通配条件的文件有6个，
    535          			 如果item=3，那么此函数就会打开这6个文件中按顺序排号为3的那个
    536          			 文件(item编号从0开始)
    537           - 返回说明：0：成功 1：文件不存在 2：目录不存在
    538           - 注：打开文件不成功有很多原因，比如文件不存在、文件的某一级目录不存在
    539                 通配情况下满足条件的文件项数小于item的值等等
    540          	   通常情况下，文件名中没有通配符，item的值我们取0就可以了
    541           **************************************************************************/
    542          

   \                                 In section .text, align 2, keep-with-next
    543          uint8 FAT32_Open_File(struct FileInfoStruct *pfi,int8 *filepath,unsigned long item)
    544          {
   \                     FAT32_Open_File:
   \   00000000   2DE9F44F           PUSH     {R2,R4-R11,LR}
   \   00000004   84B0               SUB      SP,SP,#+16
   \   00000006   0500               MOVS     R5,R0
    545           uint32 Cur_Clust,sec_temp,iSec,iFile,iItem=0;
   \   00000008   0026               MOVS     R6,#+0
    546           uint8 flag=0,index=0,i=0;
   \   0000000A   0027               MOVS     R7,#+0
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   05E0               B.N      ??FAT32_Open_File_0
    547           struct direntry *pFile;
    548           int8 temp_file_name[13];
    549           while(filepath[i]!=0)
    550           {
    551            if(filepath[i]=='\\') index=i;
   \                     ??FAT32_Open_File_1:
   \   00000012   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   505C               LDRB     R0,[R2, R1]
   \   00000016   5C28               CMP      R0,#+92
   \   00000018   00D1               BNE.N    ??FAT32_Open_File_2
   \   0000001A   1000               MOVS     R0,R2
    552            i++;
   \                     ??FAT32_Open_File_2:
   \   0000001C   521C               ADDS     R2,R2,#+1
    553           }
   \                     ??FAT32_Open_File_0:
   \   0000001E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   505C               LDRB     R0,[R2, R1]
   \   00000022   0028               CMP      R0,#+0
   \   00000024   F5D1               BNE.N    ??FAT32_Open_File_1
    554          
    555           if(Cur_Clust=FAT32_Enter_Dir(filepath))
   \   00000026   0800               MOVS     R0,R1
   \   00000028   ........           BL       FAT32_Enter_Dir
   \   0000002C   0400               MOVS     R4,R0
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   00F02281           BEQ.W    ??FAT32_Open_File_3
    556           {
    557            Str2Up(temp_dir_name);
   \   00000034   ........           LDR.W    R0,??DataTable17_1
   \   00000038   ........           BL       Str2Up
    558           do
    559           { 
    560            sec_temp=SOC(Cur_Clust);
   \                     ??FAT32_Open_File_4:
   \   0000003C   ........           LDR.W    R0,??DataTable14_2
   \   00000040   0068               LDR      R0,[R0, #+0]
   \   00000042   8068               LDR      R0,[R0, #+8]
   \   00000044   201A               SUBS     R0,R4,R0
   \   00000046   ........           LDR.W    R1,??DataTable14_2
   \   0000004A   0968               LDR      R1,[R1, #+0]
   \   0000004C   4969               LDR      R1,[R1, #+20]
   \   0000004E   ........           LDR.W    R2,??DataTable14_2
   \   00000052   1268               LDR      R2,[R2, #+0]
   \   00000054   D269               LDR      R2,[R2, #+28]
   \   00000056   01FB002B           MLA      R11,R1,R0,R2
    561            for(iSec=sec_temp;iSec<sec_temp+pArg->SectorsPerClust;iSec++)
   \   0000005A   D846               MOV      R8,R11
   \   0000005C   01E0               B.N      ??FAT32_Open_File_5
   \                     ??FAT32_Open_File_6:
   \   0000005E   18F10108           ADDS     R8,R8,#+1
   \                     ??FAT32_Open_File_5:
   \   00000062   ........           LDR.W    R0,??DataTable14_2
   \   00000066   0068               LDR      R0,[R0, #+0]
   \   00000068   4069               LDR      R0,[R0, #+20]
   \   0000006A   10EB0B00           ADDS     R0,R0,R11
   \   0000006E   8045               CMP      R8,R0
   \   00000070   80F0EF80           BCS.W    ??FAT32_Open_File_7
    562            {	
    563             FAT32_ReadSector(iSec,FAT32_Buffer);
   \   00000074   ........           LDR.W    R1,??DataTable14
   \   00000078   4046               MOV      R0,R8
   \   0000007A   ........           BL       FAT32_ReadSector
    564             for(iFile=0;iFile<pArg->BytesPerSector;iFile+=sizeof(struct direntry))
   \   0000007E   5FF00009           MOVS     R9,#+0
   \   00000082   02E0               B.N      ??FAT32_Open_File_8
    565             {
    566              pFile=((struct direntry *)(FAT32_Buffer+iFile));
    567          	FAT32_toFileName(pFile->deName,temp_file_name);
    568          	if(FilenameMatch(temp_dir_name,temp_file_name) && pFile->deName[0]!=0xe5 && pFile->deAttributes&0x20) //匹配文件名
    569          	{
    570          	 if(item==iItem)
    571          	 {	 
    572          	 flag=1;
    573               Cur_Clust=LE2BE(pFile->deLowCluster,2)+LE2BE(pFile->deHighClust,2)*65536;
    574          
    575               pfi->FileSize=LE2BE(pFile->deFileSize,4);
    576          	 strcpy(pfi->FileName,temp_file_name);
    577          	 pfi->FileStartCluster=LE2BE(pFile->deLowCluster,2)+LE2BE(pFile->deHighClust,2)*65536;
    578          	 pfi->FileCurCluster=pfi->FileStartCluster;
    579          	 pfi->FileCurSector=SOC(pfi->FileStartCluster);
    580          	 pfi->FileCurPos=0;
    581          	 pfi->FileCurOffset=0;
    582          	 pfi->Rec_Sec=iSec;
    583          	 pfi->nRec=iFile;
    584          
    585          	 pfi->FileAttr=pFile->deAttributes;
    586          	 sec_temp=LE2BE(pFile->deCTime,2);
    587          	 (pfi->FileCreateTime).sec=(sec_temp&0x001f)*2;
    588          	 (pfi->FileCreateTime).min=((sec_temp>>5)&0x003f);
    589          	 (pfi->FileCreateTime).hour=((sec_temp>>11)&0x001f);
    590          	 sec_temp=LE2BE(pFile->deCDate,2);
    591          	 (pfi->FileCreateDate).day=((sec_temp)&0x001f);
    592          	 (pfi->FileCreateDate).month=((sec_temp>>5)&0x000f);
    593          	 (pfi->FileCreateDate).year=((sec_temp>>9)&0x007f)+1980;
    594          
    595          	 sec_temp=LE2BE(pFile->deMTime,2);
    596          	 (pfi->FileMTime).sec=(sec_temp&0x001f)*2;
    597          	 (pfi->FileMTime).min=((sec_temp>>5)&0x003f);
    598          	 (pfi->FileMTime).hour=((sec_temp>>11)&0x001f);
    599          	 sec_temp=LE2BE(pFile->deMDate,2);
    600          	 (pfi->FileMDate).day=((sec_temp)&0x001f);
    601          	 (pfi->FileMDate).month=((sec_temp>>5)&0x000f);
    602          	 (pfi->FileMDate).year=((sec_temp>>9)&0x007f)+1980;
    603          
    604          	 sec_temp=LE2BE(pFile->deADate,2);
    605          	 (pfi->FileADate).day=((sec_temp)&0x001f);
    606          	 (pfi->FileADate).month=((sec_temp>>5)&0x000f);
    607          	 (pfi->FileADate).year=((sec_temp>>9)&0x007f)+1980;
    608          	    
    609          	 iFile=pArg->BytesPerSector;
    610          	 iSec=sec_temp+pArg->SectorsPerClust;
    611          	 }
    612          	 else
    613          	 {
    614          	  iItem++;
   \                     ??FAT32_Open_File_9:
   \   00000084   761C               ADDS     R6,R6,#+1
    615          	 }
   \                     ??FAT32_Open_File_10:
   \   00000086   19F12009           ADDS     R9,R9,#+32
   \                     ??FAT32_Open_File_8:
   \   0000008A   ........           LDR.W    R0,??DataTable14_2
   \   0000008E   0068               LDR      R0,[R0, #+0]
   \   00000090   C068               LDR      R0,[R0, #+12]
   \   00000092   8145               CMP      R9,R0
   \   00000094   E3D2               BCS.N    ??FAT32_Open_File_6
   \   00000096   ........           LDR.W    R0,??DataTable14
   \   0000009A   19EB000A           ADDS     R10,R9,R0
   \   0000009E   00A9               ADD      R1,SP,#+0
   \   000000A0   5046               MOV      R0,R10
   \   000000A2   ........           BL       FAT32_toFileName
   \   000000A6   00A9               ADD      R1,SP,#+0
   \   000000A8   ........           LDR.W    R0,??DataTable17_1
   \   000000AC   ........           BL       FilenameMatch
   \   000000B0   0028               CMP      R0,#+0
   \   000000B2   E8D0               BEQ.N    ??FAT32_Open_File_10
   \   000000B4   9AF80000           LDRB     R0,[R10, #+0]
   \   000000B8   E528               CMP      R0,#+229
   \   000000BA   E4D0               BEQ.N    ??FAT32_Open_File_10
   \   000000BC   9AF80B00           LDRB     R0,[R10, #+11]
   \   000000C0   8006               LSLS     R0,R0,#+26
   \   000000C2   E0D5               BPL.N    ??FAT32_Open_File_10
   \   000000C4   0498               LDR      R0,[SP, #+16]
   \   000000C6   B042               CMP      R0,R6
   \   000000C8   DCD1               BNE.N    ??FAT32_Open_File_9
   \   000000CA   0127               MOVS     R7,#+1
   \   000000CC   0221               MOVS     R1,#+2
   \   000000CE   1AF11A00           ADDS     R0,R10,#+26
   \   000000D2   ........           BL       LE2BE
   \   000000D6   0400               MOVS     R4,R0
   \   000000D8   0221               MOVS     R1,#+2
   \   000000DA   1AF11400           ADDS     R0,R10,#+20
   \   000000DE   ........           BL       LE2BE
   \   000000E2   5FF48031           MOVS     R1,#+65536
   \   000000E6   01FB0044           MLA      R4,R1,R0,R4
   \   000000EA   0421               MOVS     R1,#+4
   \   000000EC   1AF11C00           ADDS     R0,R10,#+28
   \   000000F0   ........           BL       LE2BE
   \   000000F4   6861               STR      R0,[R5, #+20]
   \   000000F6   00A9               ADD      R1,SP,#+0
   \   000000F8   2800               MOVS     R0,R5
   \   000000FA   ........           BL       strcpy
   \   000000FE   0221               MOVS     R1,#+2
   \   00000100   1AF11A00           ADDS     R0,R10,#+26
   \   00000104   ........           BL       LE2BE
   \   00000108   8346               MOV      R11,R0
   \   0000010A   0221               MOVS     R1,#+2
   \   0000010C   1AF11400           ADDS     R0,R10,#+20
   \   00000110   ........           BL       LE2BE
   \   00000114   5FF48031           MOVS     R1,#+65536
   \   00000118   01FB00B0           MLA      R0,R1,R0,R11
   \   0000011C   E860               STR      R0,[R5, #+12]
   \   0000011E   E868               LDR      R0,[R5, #+12]
   \   00000120   2861               STR      R0,[R5, #+16]
   \   00000122   E868               LDR      R0,[R5, #+12]
   \   00000124   ........           LDR.W    R1,??DataTable14_2
   \   00000128   0968               LDR      R1,[R1, #+0]
   \   0000012A   8968               LDR      R1,[R1, #+8]
   \   0000012C   401A               SUBS     R0,R0,R1
   \   0000012E   ........           LDR.W    R1,??DataTable14_2
   \   00000132   0968               LDR      R1,[R1, #+0]
   \   00000134   4969               LDR      R1,[R1, #+20]
   \   00000136   ........           LDR.W    R2,??DataTable14_2
   \   0000013A   1268               LDR      R2,[R2, #+0]
   \   0000013C   D269               LDR      R2,[R2, #+28]
   \   0000013E   01FB0020           MLA      R0,R1,R0,R2
   \   00000142   A861               STR      R0,[R5, #+24]
   \   00000144   0020               MOVS     R0,#+0
   \   00000146   A883               STRH     R0,[R5, #+28]
   \   00000148   0020               MOVS     R0,#+0
   \   0000014A   2862               STR      R0,[R5, #+32]
   \   0000014C   C5F82480           STR      R8,[R5, #+36]
   \   00000150   A5F82890           STRH     R9,[R5, #+40]
   \   00000154   9AF80B00           LDRB     R0,[R10, #+11]
   \   00000158   85F82A00           STRB     R0,[R5, #+42]
   \   0000015C   0221               MOVS     R1,#+2
   \   0000015E   1AF10E00           ADDS     R0,R10,#+14
   \   00000162   ........           BL       LE2BE
   \   00000166   8346               MOV      R11,R0
   \   00000168   1BF01F00           ANDS     R0,R11,#0x1F
   \   0000016C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016E   4000               LSLS     R0,R0,#+1
   \   00000170   85F82D00           STRB     R0,[R5, #+45]
   \   00000174   5FEA5B10           LSRS     R0,R11,#+5
   \   00000178   10F03F00           ANDS     R0,R0,#0x3F
   \   0000017C   85F82C00           STRB     R0,[R5, #+44]
   \   00000180   5FEADB20           LSRS     R0,R11,#+11
   \   00000184   10F01F00           ANDS     R0,R0,#0x1F
   \   00000188   85F82B00           STRB     R0,[R5, #+43]
   \   0000018C   0221               MOVS     R1,#+2
   \   0000018E   1AF11000           ADDS     R0,R10,#+16
   \   00000192   ........           BL       LE2BE
   \   00000196   8346               MOV      R11,R0
   \   00000198   1BF01F00           ANDS     R0,R11,#0x1F
   \   0000019C   85F83100           STRB     R0,[R5, #+49]
   \   000001A0   5FEA5B10           LSRS     R0,R11,#+5
   \   000001A4   10F00F00           ANDS     R0,R0,#0xF
   \   000001A8   85F83000           STRB     R0,[R5, #+48]
   \   000001AC   CBF34620           UBFX     R0,R11,#+9,#+7
   \   000001B0   00F2BC70           ADDW     R0,R0,#+1980
   \   000001B4   E885               STRH     R0,[R5, #+46]
   \   000001B6   0221               MOVS     R1,#+2
   \   000001B8   1AF11600           ADDS     R0,R10,#+22
   \   000001BC   ........           BL       LE2BE
   \   000001C0   8346               MOV      R11,R0
   \   000001C2   1BF01F00           ANDS     R0,R11,#0x1F
   \   000001C6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C8   4000               LSLS     R0,R0,#+1
   \   000001CA   85F83400           STRB     R0,[R5, #+52]
   \   000001CE   5FEA5B10           LSRS     R0,R11,#+5
   \   000001D2   10F03F00           ANDS     R0,R0,#0x3F
   \   000001D6   85F83300           STRB     R0,[R5, #+51]
   \   000001DA   5FEADB20           LSRS     R0,R11,#+11
   \   000001DE   10F01F00           ANDS     R0,R0,#0x1F
   \   000001E2   85F83200           STRB     R0,[R5, #+50]
   \   000001E6   0221               MOVS     R1,#+2
   \   000001E8   1AF11800           ADDS     R0,R10,#+24
   \   000001EC   ........           BL       LE2BE
   \   000001F0   8346               MOV      R11,R0
   \   000001F2   1BF01F00           ANDS     R0,R11,#0x1F
   \   000001F6   85F83900           STRB     R0,[R5, #+57]
   \   000001FA   5FEA5B10           LSRS     R0,R11,#+5
   \   000001FE   10F00F00           ANDS     R0,R0,#0xF
   \   00000202   85F83800           STRB     R0,[R5, #+56]
   \   00000206   CBF34620           UBFX     R0,R11,#+9,#+7
   \   0000020A   00F2BC70           ADDW     R0,R0,#+1980
   \   0000020E   E886               STRH     R0,[R5, #+54]
   \   00000210   0221               MOVS     R1,#+2
   \   00000212   1AF11200           ADDS     R0,R10,#+18
   \   00000216   ........           BL       LE2BE
   \   0000021A   8346               MOV      R11,R0
   \   0000021C   1BF01F00           ANDS     R0,R11,#0x1F
   \   00000220   85F83D00           STRB     R0,[R5, #+61]
   \   00000224   5FEA5B10           LSRS     R0,R11,#+5
   \   00000228   10F00F00           ANDS     R0,R0,#0xF
   \   0000022C   85F83C00           STRB     R0,[R5, #+60]
   \   00000230   CBF34620           UBFX     R0,R11,#+9,#+7
   \   00000234   00F2BC70           ADDW     R0,R0,#+1980
   \   00000238   6887               STRH     R0,[R5, #+58]
   \   0000023A   ........           LDR.W    R0,??DataTable14_2
   \   0000023E   0068               LDR      R0,[R0, #+0]
   \   00000240   D0F80C90           LDR      R9,[R0, #+12]
   \   00000244   ........           LDR.W    R0,??DataTable14_2
   \   00000248   0068               LDR      R0,[R0, #+0]
   \   0000024A   4069               LDR      R0,[R0, #+20]
   \   0000024C   10EB0B08           ADDS     R8,R0,R11
   \   00000250   19E7               B.N      ??FAT32_Open_File_10
    616          	} 
    617             }
    618            }
    619           }while(!flag && (Cur_Clust=FAT32_GetNextCluster(Cur_Clust))!=0x0fffffff);
   \                     ??FAT32_Open_File_7:
   \   00000252   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000254   002F               CMP      R7,#+0
   \   00000256   08D1               BNE.N    ??FAT32_Open_File_11
   \   00000258   2000               MOVS     R0,R4
   \   0000025A   ........           BL       FAT32_GetNextCluster
   \   0000025E   0400               MOVS     R4,R0
   \   00000260   7FF07041           MVNS     R1,#-268435456
   \   00000264   8842               CMP      R0,R1
   \   00000266   7FF4E9AE           BNE.W    ??FAT32_Open_File_4
    620           if(!flag) 
   \                     ??FAT32_Open_File_11:
   \   0000026A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000026C   002F               CMP      R7,#+0
   \   0000026E   01D1               BNE.N    ??FAT32_Open_File_12
    621           {
    622            return 1;
   \   00000270   0120               MOVS     R0,#+1
   \   00000272   02E0               B.N      ??FAT32_Open_File_13
    623           }
    624           return 0;
   \                     ??FAT32_Open_File_12:
   \   00000274   0020               MOVS     R0,#+0
   \   00000276   00E0               B.N      ??FAT32_Open_File_13
    625           }
    626           else
    627           {
    628            return 2; 
   \                     ??FAT32_Open_File_3:
   \   00000278   0220               MOVS     R0,#+2
   \                     ??FAT32_Open_File_13:
   \   0000027A   05B0               ADD      SP,SP,#+20
   \   0000027C   BDE8F08F           POP      {R4-R11,PC}      ;; return
    629           }
    630          }
    631          
    632          /**************************************************************************
    633           - 功能描述：文件定位
    634           - 隶属模块：znFAT文件系统模块
    635           - 函数属性：外部，使用户使用
    636           - 参数说明：pfi:FileInfoStruct类型的结构体指针，用于装载文件参数信息，文件
    637                       定位后，pfi所指向的结构体中的相关参数就被更新了，比如文件的当前
    638                       扇区，文件当前扇区中的位置，文件的当前偏移量等等，以备后面使用
    639                       offset:要定位的偏移量，如果offset大于文件的大小，则定位到文件的
    640                       末尾
    641           - 返回说明：文件定位成功返回0，否则为1
    642           - 注：此函数被下面的FAT32_Read_File调用，用于实现从指定位置读取数据，不建议
    643                 用户直接调用些函数
    644           **************************************************************************/
    645          

   \                                 In section .text, align 2, keep-with-next
    646          uint8 FAT32_Seek_File(struct FileInfoStruct *pfi,uint32 offset)
    647          {
   \                     FAT32_Seek_File:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    648           uint32 i,temp;
    649          
    650          if(offset<=pfi->FileSize)
   \   00000006   6069               LDR      R0,[R4, #+20]
   \   00000008   A842               CMP      R0,R5
   \   0000000A   C0F03881           BCC.W    ??FAT32_Seek_File_0
    651          { 
    652           if(offset==pfi->FileCurOffset)
   \   0000000E   206A               LDR      R0,[R4, #+32]
   \   00000010   8542               CMP      R5,R0
   \   00000012   0BD1               BNE.N    ??FAT32_Seek_File_1
    653           {
    654            pfi->FileCurPos%=pArg->BytesPerSector;
   \   00000014   A08B               LDRH     R0,[R4, #+28]
   \   00000016   ........           LDR.W    R1,??DataTable14_2
   \   0000001A   0968               LDR      R1,[R1, #+0]
   \   0000001C   C968               LDR      R1,[R1, #+12]
   \   0000001E   B0FBF1F2           UDIV     R2,R0,R1
   \   00000022   01FB1200           MLS      R0,R1,R2,R0
   \   00000026   A083               STRH     R0,[R4, #+28]
    655            return 1;  
   \   00000028   0120               MOVS     R0,#+1
   \   0000002A   29E1               B.N      ??FAT32_Seek_File_2
    656           }
    657           if(offset<pfi->FileCurOffset) 
   \                     ??FAT32_Seek_File_1:
   \   0000002C   206A               LDR      R0,[R4, #+32]
   \   0000002E   8542               CMP      R5,R0
   \   00000030   16D2               BCS.N    ??FAT32_Seek_File_3
    658           {
    659            pfi->FileCurCluster=pfi->FileStartCluster;
   \   00000032   E068               LDR      R0,[R4, #+12]
   \   00000034   2061               STR      R0,[R4, #+16]
    660            pfi->FileCurSector=SOC(pfi->FileCurCluster);
   \   00000036   2069               LDR      R0,[R4, #+16]
   \   00000038   ........           LDR.W    R1,??DataTable14_2
   \   0000003C   0968               LDR      R1,[R1, #+0]
   \   0000003E   8968               LDR      R1,[R1, #+8]
   \   00000040   401A               SUBS     R0,R0,R1
   \   00000042   ........           LDR.W    R1,??DataTable14_2
   \   00000046   0968               LDR      R1,[R1, #+0]
   \   00000048   4969               LDR      R1,[R1, #+20]
   \   0000004A   ........           LDR.W    R2,??DataTable14_2
   \   0000004E   1268               LDR      R2,[R2, #+0]
   \   00000050   D269               LDR      R2,[R2, #+28]
   \   00000052   01FB0020           MLA      R0,R1,R0,R2
   \   00000056   A061               STR      R0,[R4, #+24]
    661            pfi->FileCurPos=0;
   \   00000058   0020               MOVS     R0,#+0
   \   0000005A   A083               STRH     R0,[R4, #+28]
    662            pfi->FileCurOffset=0;
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   2062               STR      R0,[R4, #+32]
    663           } 
    664           if((offset-pfi->FileCurOffset)>=(pArg->BytesPerSector-pfi->FileCurPos))	 //目标偏移量与文件当前偏移量所差的字节数不小于文件在当前扇区中的位置到扇区末尾的字节数
   \                     ??FAT32_Seek_File_3:
   \   00000060   206A               LDR      R0,[R4, #+32]
   \   00000062   281A               SUBS     R0,R5,R0
   \   00000064   ........           LDR.W    R1,??DataTable14_2
   \   00000068   0968               LDR      R1,[R1, #+0]
   \   0000006A   C968               LDR      R1,[R1, #+12]
   \   0000006C   A28B               LDRH     R2,[R4, #+28]
   \   0000006E   891A               SUBS     R1,R1,R2
   \   00000070   8842               CMP      R0,R1
   \   00000072   C0F0A480           BCC.W    ??FAT32_Seek_File_4
    665           {
    666            pfi->FileCurOffset+=(pArg->BytesPerSector-pfi->FileCurPos);
   \   00000076   206A               LDR      R0,[R4, #+32]
   \   00000078   ........           LDR.W    R1,??DataTable14_2
   \   0000007C   0968               LDR      R1,[R1, #+0]
   \   0000007E   C968               LDR      R1,[R1, #+12]
   \   00000080   0818               ADDS     R0,R1,R0
   \   00000082   A18B               LDRH     R1,[R4, #+28]
   \   00000084   401A               SUBS     R0,R0,R1
   \   00000086   2062               STR      R0,[R4, #+32]
    667            pfi->FileCurPos=0;
   \   00000088   0020               MOVS     R0,#+0
   \   0000008A   A083               STRH     R0,[R4, #+28]
    668            if(pfi->FileCurSector-SOC(pfi->FileCurCluster)==(pArg->SectorsPerClust-1))
   \   0000008C   A069               LDR      R0,[R4, #+24]
   \   0000008E   ........           LDR.W    R1,??DataTable14_2
   \   00000092   0968               LDR      R1,[R1, #+0]
   \   00000094   4969               LDR      R1,[R1, #+20]
   \   00000096   ........           LDR.W    R2,??DataTable14_2
   \   0000009A   1268               LDR      R2,[R2, #+0]
   \   0000009C   9268               LDR      R2,[R2, #+8]
   \   0000009E   2369               LDR      R3,[R4, #+16]
   \   000000A0   D21A               SUBS     R2,R2,R3
   \   000000A2   02FB0100           MLA      R0,R2,R1,R0
   \   000000A6   ........           LDR.W    R1,??DataTable14_2
   \   000000AA   0968               LDR      R1,[R1, #+0]
   \   000000AC   C969               LDR      R1,[R1, #+28]
   \   000000AE   401A               SUBS     R0,R0,R1
   \   000000B0   ........           LDR.W    R1,??DataTable14_2
   \   000000B4   0968               LDR      R1,[R1, #+0]
   \   000000B6   4969               LDR      R1,[R1, #+20]
   \   000000B8   491E               SUBS     R1,R1,#+1
   \   000000BA   8842               CMP      R0,R1
   \   000000BC   15D1               BNE.N    ??FAT32_Seek_File_5
    669            {
    670             pfi->FileCurCluster=FAT32_GetNextCluster(pfi->FileCurCluster);
   \   000000BE   2069               LDR      R0,[R4, #+16]
   \   000000C0   ........           BL       FAT32_GetNextCluster
   \   000000C4   2061               STR      R0,[R4, #+16]
    671             pfi->FileCurSector=SOC(pfi->FileCurCluster);
   \   000000C6   2069               LDR      R0,[R4, #+16]
   \   000000C8   ........           LDR.W    R1,??DataTable14_2
   \   000000CC   0968               LDR      R1,[R1, #+0]
   \   000000CE   8968               LDR      R1,[R1, #+8]
   \   000000D0   401A               SUBS     R0,R0,R1
   \   000000D2   ........           LDR.W    R1,??DataTable14_2
   \   000000D6   0968               LDR      R1,[R1, #+0]
   \   000000D8   4969               LDR      R1,[R1, #+20]
   \   000000DA   ........           LDR.W    R2,??DataTable14_2
   \   000000DE   1268               LDR      R2,[R2, #+0]
   \   000000E0   D269               LDR      R2,[R2, #+28]
   \   000000E2   01FB0020           MLA      R0,R1,R0,R2
   \   000000E6   A061               STR      R0,[R4, #+24]
   \   000000E8   02E0               B.N      ??FAT32_Seek_File_6
    672            }
    673            else
    674            {
    675             pfi->FileCurSector++; 
   \                     ??FAT32_Seek_File_5:
   \   000000EA   A069               LDR      R0,[R4, #+24]
   \   000000EC   401C               ADDS     R0,R0,#+1
   \   000000EE   A061               STR      R0,[R4, #+24]
    676            }
    677           }
    678           else
    679           {
    680            pfi->FileCurPos=(pfi->FileCurPos+offset-pfi->FileCurOffset)%pArg->BytesPerSector;
    681            pfi->FileCurOffset=offset;
    682            return 1;
    683           }
    684           temp=SOC(pfi->FileCurCluster);
   \                     ??FAT32_Seek_File_6:
   \   000000F0   2069               LDR      R0,[R4, #+16]
   \   000000F2   ........           LDR.W    R1,??DataTable14_2
   \   000000F6   0968               LDR      R1,[R1, #+0]
   \   000000F8   8968               LDR      R1,[R1, #+8]
   \   000000FA   401A               SUBS     R0,R0,R1
   \   000000FC   ........           LDR.W    R1,??DataTable14_2
   \   00000100   0968               LDR      R1,[R1, #+0]
   \   00000102   4969               LDR      R1,[R1, #+20]
   \   00000104   ........           LDR.W    R2,??DataTable14_2
   \   00000108   1268               LDR      R2,[R2, #+0]
   \   0000010A   D269               LDR      R2,[R2, #+28]
   \   0000010C   01FB0026           MLA      R6,R1,R0,R2
    685           if((offset-(pfi->FileCurOffset))/pArg->BytesPerSector+(pfi->FileCurSector-temp)>(pArg->SectorsPerClust-1))
   \   00000110   206A               LDR      R0,[R4, #+32]
   \   00000112   281A               SUBS     R0,R5,R0
   \   00000114   ........           LDR.W    R1,??DataTable14_2
   \   00000118   0968               LDR      R1,[R1, #+0]
   \   0000011A   C968               LDR      R1,[R1, #+12]
   \   0000011C   B0FBF1F0           UDIV     R0,R0,R1
   \   00000120   A169               LDR      R1,[R4, #+24]
   \   00000122   0818               ADDS     R0,R1,R0
   \   00000124   801B               SUBS     R0,R0,R6
   \   00000126   ........           LDR.W    R1,??DataTable14_2
   \   0000012A   0968               LDR      R1,[R1, #+0]
   \   0000012C   4969               LDR      R1,[R1, #+20]
   \   0000012E   491E               SUBS     R1,R1,#+1
   \   00000130   8142               CMP      R1,R0
   \   00000132   55D2               BCS.N    ??FAT32_Seek_File_7
    686           {
    687            pfi->FileCurOffset+=(((pArg->SectorsPerClust)-(pfi->FileCurSector-(SOC(pfi->FileCurCluster))))*pArg->BytesPerSector);
   \   00000134   206A               LDR      R0,[R4, #+32]
   \   00000136   ........           LDR.W    R1,??DataTable14_2
   \   0000013A   0968               LDR      R1,[R1, #+0]
   \   0000013C   4969               LDR      R1,[R1, #+20]
   \   0000013E   A269               LDR      R2,[R4, #+24]
   \   00000140   891A               SUBS     R1,R1,R2
   \   00000142   ........           LDR.W    R2,??DataTable14_2
   \   00000146   1268               LDR      R2,[R2, #+0]
   \   00000148   5269               LDR      R2,[R2, #+20]
   \   0000014A   ........           LDR.W    R3,??DataTable14_2
   \   0000014E   1B68               LDR      R3,[R3, #+0]
   \   00000150   9B68               LDR      R3,[R3, #+8]
   \   00000152   2669               LDR      R6,[R4, #+16]
   \   00000154   9B1B               SUBS     R3,R3,R6
   \   00000156   03FB1211           MLS      R1,R3,R2,R1
   \   0000015A   ........           LDR.W    R2,??DataTable14_2
   \   0000015E   1268               LDR      R2,[R2, #+0]
   \   00000160   D269               LDR      R2,[R2, #+28]
   \   00000162   5118               ADDS     R1,R2,R1
   \   00000164   ........           LDR.W    R2,??DataTable14_2
   \   00000168   1268               LDR      R2,[R2, #+0]
   \   0000016A   D268               LDR      R2,[R2, #+12]
   \   0000016C   02FB0100           MLA      R0,R2,R1,R0
   \   00000170   2062               STR      R0,[R4, #+32]
    688            pfi->FileCurCluster=FAT32_GetNextCluster(pfi->FileCurCluster);
   \   00000172   2069               LDR      R0,[R4, #+16]
   \   00000174   ........           BL       FAT32_GetNextCluster
   \   00000178   2061               STR      R0,[R4, #+16]
    689            pfi->FileCurSector=SOC(pfi->FileCurCluster);
   \   0000017A   2069               LDR      R0,[R4, #+16]
   \   0000017C   ........           LDR.W    R1,??DataTable14_2
   \   00000180   0968               LDR      R1,[R1, #+0]
   \   00000182   8968               LDR      R1,[R1, #+8]
   \   00000184   401A               SUBS     R0,R0,R1
   \   00000186   ........           LDR.W    R1,??DataTable14_2
   \   0000018A   0968               LDR      R1,[R1, #+0]
   \   0000018C   4969               LDR      R1,[R1, #+20]
   \   0000018E   ........           LDR.W    R2,??DataTable14_2
   \   00000192   1268               LDR      R2,[R2, #+0]
   \   00000194   D269               LDR      R2,[R2, #+28]
   \   00000196   01FB0020           MLA      R0,R1,R0,R2
   \   0000019A   A061               STR      R0,[R4, #+24]
    690            pfi->FileCurPos=0;
   \   0000019C   0020               MOVS     R0,#+0
   \   0000019E   A083               STRH     R0,[R4, #+28]
    691           }
    692           else
    693           {
    694            pfi->FileCurSector+=(offset-pfi->FileCurOffset)/pArg->BytesPerSector;
    695            pfi->FileCurPos=(offset-pfi->FileCurOffset)%pArg->BytesPerSector;
    696            pfi->FileCurOffset=offset;
    697            return 1;
    698           }
    699          
    700           temp=(offset-pfi->FileCurOffset)/(pArg->BytesPerSector*pArg->SectorsPerClust);
   \   000001A0   206A               LDR      R0,[R4, #+32]
   \   000001A2   281A               SUBS     R0,R5,R0
   \   000001A4   ........           LDR.W    R1,??DataTable14_2
   \   000001A8   0968               LDR      R1,[R1, #+0]
   \   000001AA   C968               LDR      R1,[R1, #+12]
   \   000001AC   ........           LDR.W    R2,??DataTable14_2
   \   000001B0   1268               LDR      R2,[R2, #+0]
   \   000001B2   5269               LDR      R2,[R2, #+20]
   \   000001B4   5143               MULS     R1,R2,R1
   \   000001B6   B0FBF1F6           UDIV     R6,R0,R1
    701           for(i=0;i<temp;i++)
   \   000001BA   0027               MOVS     R7,#+0
   \   000001BC   2EE0               B.N      ??FAT32_Seek_File_8
   \                     ??FAT32_Seek_File_4:
   \   000001BE   A08B               LDRH     R0,[R4, #+28]
   \   000001C0   15FA80F0           UXTAH    R0,R5,R0
   \   000001C4   216A               LDR      R1,[R4, #+32]
   \   000001C6   401A               SUBS     R0,R0,R1
   \   000001C8   ........           LDR.W    R1,??DataTable14_2
   \   000001CC   0968               LDR      R1,[R1, #+0]
   \   000001CE   C968               LDR      R1,[R1, #+12]
   \   000001D0   B0FBF1F2           UDIV     R2,R0,R1
   \   000001D4   01FB1200           MLS      R0,R1,R2,R0
   \   000001D8   A083               STRH     R0,[R4, #+28]
   \   000001DA   2562               STR      R5,[R4, #+32]
   \   000001DC   0120               MOVS     R0,#+1
   \   000001DE   4FE0               B.N      ??FAT32_Seek_File_2
   \                     ??FAT32_Seek_File_7:
   \   000001E0   A069               LDR      R0,[R4, #+24]
   \   000001E2   216A               LDR      R1,[R4, #+32]
   \   000001E4   691A               SUBS     R1,R5,R1
   \   000001E6   ........           LDR.W    R2,??DataTable14_2
   \   000001EA   1268               LDR      R2,[R2, #+0]
   \   000001EC   D268               LDR      R2,[R2, #+12]
   \   000001EE   B1FBF2F1           UDIV     R1,R1,R2
   \   000001F2   0818               ADDS     R0,R1,R0
   \   000001F4   A061               STR      R0,[R4, #+24]
   \   000001F6   206A               LDR      R0,[R4, #+32]
   \   000001F8   281A               SUBS     R0,R5,R0
   \   000001FA   ........           LDR.W    R1,??DataTable14_2
   \   000001FE   0968               LDR      R1,[R1, #+0]
   \   00000200   C968               LDR      R1,[R1, #+12]
   \   00000202   B0FBF1F2           UDIV     R2,R0,R1
   \   00000206   01FB1200           MLS      R0,R1,R2,R0
   \   0000020A   A083               STRH     R0,[R4, #+28]
   \   0000020C   2562               STR      R5,[R4, #+32]
   \   0000020E   0120               MOVS     R0,#+1
   \   00000210   36E0               B.N      ??FAT32_Seek_File_2
    702           {
    703            pfi->FileCurCluster=FAT32_GetNextCluster(pfi->FileCurCluster);
   \                     ??FAT32_Seek_File_9:
   \   00000212   2069               LDR      R0,[R4, #+16]
   \   00000214   ........           BL       FAT32_GetNextCluster
   \   00000218   2061               STR      R0,[R4, #+16]
    704           }
   \   0000021A   7F1C               ADDS     R7,R7,#+1
   \                     ??FAT32_Seek_File_8:
   \   0000021C   B742               CMP      R7,R6
   \   0000021E   F8D3               BCC.N    ??FAT32_Seek_File_9
    705           pfi->FileCurOffset+=(temp*(pArg->BytesPerSector*pArg->SectorsPerClust));
   \   00000220   206A               LDR      R0,[R4, #+32]
   \   00000222   ....               LDR.N    R1,??DataTable14_2
   \   00000224   0968               LDR      R1,[R1, #+0]
   \   00000226   C968               LDR      R1,[R1, #+12]
   \   00000228   01FB06F1           MUL      R1,R1,R6
   \   0000022C   ....               LDR.N    R2,??DataTable14_2
   \   0000022E   1268               LDR      R2,[R2, #+0]
   \   00000230   5269               LDR      R2,[R2, #+20]
   \   00000232   02FB0100           MLA      R0,R2,R1,R0
   \   00000236   2062               STR      R0,[R4, #+32]
    706           pfi->FileCurSector=(SOC(pfi->FileCurCluster))+(offset-pfi->FileCurOffset)/pArg->BytesPerSector;
   \   00000238   2069               LDR      R0,[R4, #+16]
   \   0000023A   ....               LDR.N    R1,??DataTable14_2
   \   0000023C   0968               LDR      R1,[R1, #+0]
   \   0000023E   8968               LDR      R1,[R1, #+8]
   \   00000240   401A               SUBS     R0,R0,R1
   \   00000242   ....               LDR.N    R1,??DataTable14_2
   \   00000244   0968               LDR      R1,[R1, #+0]
   \   00000246   4969               LDR      R1,[R1, #+20]
   \   00000248   ....               LDR.N    R2,??DataTable14_2
   \   0000024A   1268               LDR      R2,[R2, #+0]
   \   0000024C   D269               LDR      R2,[R2, #+28]
   \   0000024E   01FB0020           MLA      R0,R1,R0,R2
   \   00000252   216A               LDR      R1,[R4, #+32]
   \   00000254   691A               SUBS     R1,R5,R1
   \   00000256   ....               LDR.N    R2,??DataTable14_2
   \   00000258   1268               LDR      R2,[R2, #+0]
   \   0000025A   D268               LDR      R2,[R2, #+12]
   \   0000025C   B1FBF2F1           UDIV     R1,R1,R2
   \   00000260   0818               ADDS     R0,R1,R0
   \   00000262   A061               STR      R0,[R4, #+24]
    707           pfi->FileCurPos=((offset-pfi->FileCurOffset))%pArg->BytesPerSector;
   \   00000264   206A               LDR      R0,[R4, #+32]
   \   00000266   281A               SUBS     R0,R5,R0
   \   00000268   ....               LDR.N    R1,??DataTable14_2
   \   0000026A   0968               LDR      R1,[R1, #+0]
   \   0000026C   C968               LDR      R1,[R1, #+12]
   \   0000026E   B0FBF1F2           UDIV     R2,R0,R1
   \   00000272   01FB1200           MLS      R0,R1,R2,R0
   \   00000276   A083               STRH     R0,[R4, #+28]
    708           pfi->FileCurOffset=offset;
   \   00000278   2562               STR      R5,[R4, #+32]
    709          }
    710          else
    711          {
    712           return 1;
    713          }
    714           return 0;
   \   0000027A   0020               MOVS     R0,#+0
   \   0000027C   00E0               B.N      ??FAT32_Seek_File_2
   \                     ??FAT32_Seek_File_0:
   \   0000027E   0120               MOVS     R0,#+1
   \                     ??FAT32_Seek_File_2:
   \   00000280   F2BD               POP      {R1,R4-R7,PC}    ;; return
    715          }
    716          
    717          /**************************************************************************
    718           - 功能描述：从文件的某一个位置处，读取一定长度的数据，放入数据缓冲区中
    719           - 隶属模块：znFAT文件系统模块
    720           - 函数属性：外部，使用户使用
    721           - 参数说明：pfi:FileInfoStruct类型的结构体指针，用于装载文件参数信息，文件
    722                       读取的过程中，此结构体中的相关参数会更新，比如文件的当前偏移量、
    723                       文件的当前扇区，文件的当前簇等等
    724                       offset:要定位的偏移量，要小于文件的大小 
    725                       len:要读取的数据的长度，如果len+offset大于文件的大小，则实际读
    726                       取的数据量是从offset开始到文件结束
    727                       pbuf:数据缓冲区
    728           - 返回说明：读取到的实际的数据长度，如果读取失败，比如指定的偏移量大于了文件
    729                       大小，则返回0
    730           - 注：在读取一个文件的数据前，必须先将该文件用FAT32_Open_File打开
    731           **************************************************************************/
    732          

   \                                 In section .text, align 2, keep-with-next
    733          uint32 FAT32_Read_File(struct FileInfoStruct *pfi,uint32 offset,uint32 len,uint8 *pbuf)
    734          {
   \                     FAT32_Read_File:
   \   00000000   2DE9F047           PUSH     {R4-R10,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   1500               MOVS     R5,R2
   \   00000008   1E00               MOVS     R6,R3
    735           uint32 i,j,k,temp;
    736           uint32 counter=0;
   \   0000000A   5FF0000A           MOVS     R10,#+0
    737           if(offset<pfi->FileSize)
   \   0000000E   6069               LDR      R0,[R4, #+20]
   \   00000010   8142               CMP      R1,R0
   \   00000012   80F05781           BCS.W    ??FAT32_Read_File_0
    738           {
    739            if(offset+len>pfi->FileSize) len=pfi->FileSize-offset;
   \   00000016   6069               LDR      R0,[R4, #+20]
   \   00000018   6A18               ADDS     R2,R5,R1
   \   0000001A   9042               CMP      R0,R2
   \   0000001C   01D2               BCS.N    ??FAT32_Read_File_1
   \   0000001E   6069               LDR      R0,[R4, #+20]
   \   00000020   451A               SUBS     R5,R0,R1
    740            FAT32_Seek_File(pfi,offset);
   \                     ??FAT32_Read_File_1:
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       FAT32_Seek_File
    741            
    742            FAT32_ReadSector(pfi->FileCurSector,FAT32_Buffer);
   \   00000028   ....               LDR.N    R1,??DataTable14
   \   0000002A   A069               LDR      R0,[R4, #+24]
   \   0000002C   ........           BL       FAT32_ReadSector
    743            for(i=pfi->FileCurPos;i<pArg->BytesPerSector;i++)
   \   00000030   A08B               LDRH     R0,[R4, #+28]
   \   00000032   0CE0               B.N      ??FAT32_Read_File_2
    744            {
    745             if(counter>=len) 
    746             {
    747               return len;
    748             }
    749             pbuf[counter]=FAT32_Buffer[i];
   \                     ??FAT32_Read_File_3:
   \   00000034   ....               LDR.N    R1,??DataTable14
   \   00000036   415C               LDRB     R1,[R0, R1]
   \   00000038   0AF80610           STRB     R1,[R10, R6]
    750             counter++;
   \   0000003C   1AF1010A           ADDS     R10,R10,#+1
    751             pfi->FileCurPos++;
   \   00000040   A18B               LDRH     R1,[R4, #+28]
   \   00000042   491C               ADDS     R1,R1,#+1
   \   00000044   A183               STRH     R1,[R4, #+28]
    752             pfi->FileCurOffset++;
   \   00000046   216A               LDR      R1,[R4, #+32]
   \   00000048   491C               ADDS     R1,R1,#+1
   \   0000004A   2162               STR      R1,[R4, #+32]
   \   0000004C   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Read_File_2:
   \   0000004E   ....               LDR.N    R1,??DataTable14_2
   \   00000050   0968               LDR      R1,[R1, #+0]
   \   00000052   C968               LDR      R1,[R1, #+12]
   \   00000054   8842               CMP      R0,R1
   \   00000056   03D2               BCS.N    ??FAT32_Read_File_4
   \   00000058   AA45               CMP      R10,R5
   \   0000005A   EBD3               BCC.N    ??FAT32_Read_File_3
   \   0000005C   2800               MOVS     R0,R5
   \   0000005E   33E1               B.N      ??FAT32_Read_File_5
    753            }
    754            if(pfi->FileCurSector-(SOC(pfi->FileCurCluster))!=(pArg->SectorsPerClust-1))
   \                     ??FAT32_Read_File_4:
   \   00000060   A069               LDR      R0,[R4, #+24]
   \   00000062   ....               LDR.N    R1,??DataTable14_2
   \   00000064   0968               LDR      R1,[R1, #+0]
   \   00000066   4969               LDR      R1,[R1, #+20]
   \   00000068   ....               LDR.N    R2,??DataTable14_2
   \   0000006A   1268               LDR      R2,[R2, #+0]
   \   0000006C   9268               LDR      R2,[R2, #+8]
   \   0000006E   2369               LDR      R3,[R4, #+16]
   \   00000070   D21A               SUBS     R2,R2,R3
   \   00000072   02FB0100           MLA      R0,R2,R1,R0
   \   00000076   ....               LDR.N    R1,??DataTable14_2
   \   00000078   0968               LDR      R1,[R1, #+0]
   \   0000007A   C969               LDR      R1,[R1, #+28]
   \   0000007C   401A               SUBS     R0,R0,R1
   \   0000007E   ....               LDR.N    R1,??DataTable14_2
   \   00000080   0968               LDR      R1,[R1, #+0]
   \   00000082   4969               LDR      R1,[R1, #+20]
   \   00000084   491E               SUBS     R1,R1,#+1
   \   00000086   8842               CMP      R0,R1
   \   00000088   36D0               BEQ.N    ??FAT32_Read_File_6
    755            {
    756             for(j=pfi->FileCurSector+1;j<(SOC(pfi->FileCurCluster))+pArg->SectorsPerClust;j++)
   \   0000008A   A069               LDR      R0,[R4, #+24]
   \   0000008C   10F10109           ADDS     R9,R0,#+1
   \   00000090   01E0               B.N      ??FAT32_Read_File_7
   \                     ??FAT32_Read_File_8:
   \   00000092   19F10109           ADDS     R9,R9,#+1
   \                     ??FAT32_Read_File_7:
   \   00000096   2069               LDR      R0,[R4, #+16]
   \   00000098   ....               LDR.N    R1,??DataTable14_2
   \   0000009A   0968               LDR      R1,[R1, #+0]
   \   0000009C   8968               LDR      R1,[R1, #+8]
   \   0000009E   401A               SUBS     R0,R0,R1
   \   000000A0   ....               LDR.N    R1,??DataTable14_2
   \   000000A2   0968               LDR      R1,[R1, #+0]
   \   000000A4   4969               LDR      R1,[R1, #+20]
   \   000000A6   ....               LDR.N    R2,??DataTable14_2
   \   000000A8   1268               LDR      R2,[R2, #+0]
   \   000000AA   D269               LDR      R2,[R2, #+28]
   \   000000AC   01FB0020           MLA      R0,R1,R0,R2
   \   000000B0   ....               LDR.N    R1,??DataTable14_2
   \   000000B2   0968               LDR      R1,[R1, #+0]
   \   000000B4   4969               LDR      R1,[R1, #+20]
   \   000000B6   0818               ADDS     R0,R1,R0
   \   000000B8   8145               CMP      R9,R0
   \   000000BA   1DD2               BCS.N    ??FAT32_Read_File_6
    757             {
    758              FAT32_ReadSector(j,FAT32_Buffer);
   \   000000BC   ....               LDR.N    R1,??DataTable14
   \   000000BE   4846               MOV      R0,R9
   \   000000C0   ........           BL       FAT32_ReadSector
    759              pfi->FileCurSector=j;
   \   000000C4   C4F81890           STR      R9,[R4, #+24]
    760              for(i=0;i<pArg->BytesPerSector;i++)
   \   000000C8   0020               MOVS     R0,#+0
   \   000000CA   0CE0               B.N      ??FAT32_Read_File_9
    761              {
    762               if(counter>=len)
    763               {
    764                 return len;
    765               }
    766               pbuf[counter]=FAT32_Buffer[i];
   \                     ??FAT32_Read_File_10:
   \   000000CC   ....               LDR.N    R1,??DataTable14
   \   000000CE   415C               LDRB     R1,[R0, R1]
   \   000000D0   0AF80610           STRB     R1,[R10, R6]
    767               counter++;
   \   000000D4   1AF1010A           ADDS     R10,R10,#+1
    768               pfi->FileCurPos++;
   \   000000D8   A18B               LDRH     R1,[R4, #+28]
   \   000000DA   491C               ADDS     R1,R1,#+1
   \   000000DC   A183               STRH     R1,[R4, #+28]
    769               pfi->FileCurOffset++;
   \   000000DE   216A               LDR      R1,[R4, #+32]
   \   000000E0   491C               ADDS     R1,R1,#+1
   \   000000E2   2162               STR      R1,[R4, #+32]
   \   000000E4   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Read_File_9:
   \   000000E6   ....               LDR.N    R1,??DataTable14_2
   \   000000E8   0968               LDR      R1,[R1, #+0]
   \   000000EA   C968               LDR      R1,[R1, #+12]
   \   000000EC   8842               CMP      R0,R1
   \   000000EE   D0D2               BCS.N    ??FAT32_Read_File_8
   \   000000F0   AA45               CMP      R10,R5
   \   000000F2   EBD3               BCC.N    ??FAT32_Read_File_10
   \   000000F4   2800               MOVS     R0,R5
   \   000000F6   E7E0               B.N      ??FAT32_Read_File_5
    770              }
    771             }
    772            } 
    773            temp=(len-counter)/(pArg->BytesPerSector*pArg->SectorsPerClust);
   \                     ??FAT32_Read_File_6:
   \   000000F8   B5EB0A00           SUBS     R0,R5,R10
   \   000000FC   ....               LDR.N    R1,??DataTable14_2
   \   000000FE   0968               LDR      R1,[R1, #+0]
   \   00000100   C968               LDR      R1,[R1, #+12]
   \   00000102   ....               LDR.N    R2,??DataTable14_2
   \   00000104   1268               LDR      R2,[R2, #+0]
   \   00000106   5269               LDR      R2,[R2, #+20]
   \   00000108   5143               MULS     R1,R2,R1
   \   0000010A   B0FBF1F7           UDIV     R7,R0,R1
    774            for(k=0;k<temp;k++)
   \   0000010E   5FF00008           MOVS     R8,#+0
   \   00000112   01E0               B.N      ??FAT32_Read_File_11
   \                     ??FAT32_Read_File_12:
   \   00000114   18F10108           ADDS     R8,R8,#+1
   \                     ??FAT32_Read_File_11:
   \   00000118   B845               CMP      R8,R7
   \   0000011A   4DD2               BCS.N    ??FAT32_Read_File_13
    775            {
    776             pfi->FileCurCluster=FAT32_GetNextCluster(pfi->FileCurCluster);
   \   0000011C   2069               LDR      R0,[R4, #+16]
   \   0000011E   ........           BL       FAT32_GetNextCluster
   \   00000122   2061               STR      R0,[R4, #+16]
    777             for(j=(SOC(pfi->FileCurCluster));j<(SOC(pfi->FileCurCluster))+pArg->SectorsPerClust;j++)
   \   00000124   2069               LDR      R0,[R4, #+16]
   \   00000126   ....               LDR.N    R1,??DataTable14_2
   \   00000128   0968               LDR      R1,[R1, #+0]
   \   0000012A   8968               LDR      R1,[R1, #+8]
   \   0000012C   401A               SUBS     R0,R0,R1
   \   0000012E   ....               LDR.N    R1,??DataTable14_2
   \   00000130   0968               LDR      R1,[R1, #+0]
   \   00000132   4969               LDR      R1,[R1, #+20]
   \   00000134   ....               LDR.N    R2,??DataTable14_2
   \   00000136   1268               LDR      R2,[R2, #+0]
   \   00000138   D269               LDR      R2,[R2, #+28]
   \   0000013A   01FB0029           MLA      R9,R1,R0,R2
   \   0000013E   01E0               B.N      ??FAT32_Read_File_14
   \                     ??FAT32_Read_File_15:
   \   00000140   19F10109           ADDS     R9,R9,#+1
   \                     ??FAT32_Read_File_14:
   \   00000144   2069               LDR      R0,[R4, #+16]
   \   00000146   ....               LDR.N    R1,??DataTable14_2
   \   00000148   0968               LDR      R1,[R1, #+0]
   \   0000014A   8968               LDR      R1,[R1, #+8]
   \   0000014C   401A               SUBS     R0,R0,R1
   \   0000014E   ....               LDR.N    R1,??DataTable14_2
   \   00000150   0968               LDR      R1,[R1, #+0]
   \   00000152   4969               LDR      R1,[R1, #+20]
   \   00000154   ....               LDR.N    R2,??DataTable14_2
   \   00000156   1268               LDR      R2,[R2, #+0]
   \   00000158   D269               LDR      R2,[R2, #+28]
   \   0000015A   01FB0020           MLA      R0,R1,R0,R2
   \   0000015E   ....               LDR.N    R1,??DataTable14_2
   \   00000160   0968               LDR      R1,[R1, #+0]
   \   00000162   4969               LDR      R1,[R1, #+20]
   \   00000164   0818               ADDS     R0,R1,R0
   \   00000166   8145               CMP      R9,R0
   \   00000168   D4D2               BCS.N    ??FAT32_Read_File_12
    778             {
    779              FAT32_ReadSector(j,FAT32_Buffer);
   \   0000016A   ....               LDR.N    R1,??DataTable14
   \   0000016C   4846               MOV      R0,R9
   \   0000016E   ........           BL       FAT32_ReadSector
    780              pfi->FileCurSector=j;
   \   00000172   C4F81890           STR      R9,[R4, #+24]
    781              for(i=0;i<pArg->BytesPerSector;i++)
   \   00000176   0020               MOVS     R0,#+0
   \   00000178   15E0               B.N      ??FAT32_Read_File_16
    782              {
    783               if(counter>=len)  
    784           	 {
    785                 return len;
    786               }
    787               pbuf[counter]=FAT32_Buffer[i];
   \                     ??FAT32_Read_File_17:
   \   0000017A   ....               LDR.N    R1,??DataTable14
   \   0000017C   415C               LDRB     R1,[R0, R1]
   \   0000017E   0AF80610           STRB     R1,[R10, R6]
    788               counter++;
   \   00000182   1AF1010A           ADDS     R10,R10,#+1
    789               pfi->FileCurOffset++;
   \   00000186   216A               LDR      R1,[R4, #+32]
   \   00000188   491C               ADDS     R1,R1,#+1
   \   0000018A   2162               STR      R1,[R4, #+32]
    790          	 pfi->FileCurPos++;
   \   0000018C   A18B               LDRH     R1,[R4, #+28]
   \   0000018E   491C               ADDS     R1,R1,#+1
   \   00000190   A183               STRH     R1,[R4, #+28]
    791          	 pfi->FileCurPos%=pArg->BytesPerSector;
   \   00000192   A18B               LDRH     R1,[R4, #+28]
   \   00000194   ....               LDR.N    R2,??DataTable14_2
   \   00000196   1268               LDR      R2,[R2, #+0]
   \   00000198   D268               LDR      R2,[R2, #+12]
   \   0000019A   B1FBF2F3           UDIV     R3,R1,R2
   \   0000019E   02FB1311           MLS      R1,R2,R3,R1
   \   000001A2   A183               STRH     R1,[R4, #+28]
   \   000001A4   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Read_File_16:
   \   000001A6   ....               LDR.N    R1,??DataTable14_2
   \   000001A8   0968               LDR      R1,[R1, #+0]
   \   000001AA   C968               LDR      R1,[R1, #+12]
   \   000001AC   8842               CMP      R0,R1
   \   000001AE   C7D2               BCS.N    ??FAT32_Read_File_15
   \   000001B0   AA45               CMP      R10,R5
   \   000001B2   E2D3               BCC.N    ??FAT32_Read_File_17
   \   000001B4   2800               MOVS     R0,R5
   \   000001B6   87E0               B.N      ??FAT32_Read_File_5
    792              } 
    793             }    
    794            }
    795            pfi->FileCurCluster=FAT32_GetNextCluster(pfi->FileCurCluster);
   \                     ??FAT32_Read_File_13:
   \   000001B8   2069               LDR      R0,[R4, #+16]
   \   000001BA   ........           BL       FAT32_GetNextCluster
   \   000001BE   2061               STR      R0,[R4, #+16]
    796            temp=(SOC(pfi->FileCurCluster))+((len-counter)/pArg->BytesPerSector);
   \   000001C0   2069               LDR      R0,[R4, #+16]
   \   000001C2   ....               LDR.N    R1,??DataTable14_2
   \   000001C4   0968               LDR      R1,[R1, #+0]
   \   000001C6   8968               LDR      R1,[R1, #+8]
   \   000001C8   401A               SUBS     R0,R0,R1
   \   000001CA   ....               LDR.N    R1,??DataTable14_2
   \   000001CC   0968               LDR      R1,[R1, #+0]
   \   000001CE   4969               LDR      R1,[R1, #+20]
   \   000001D0   ....               LDR.N    R2,??DataTable14_2
   \   000001D2   1268               LDR      R2,[R2, #+0]
   \   000001D4   D269               LDR      R2,[R2, #+28]
   \   000001D6   01FB0020           MLA      R0,R1,R0,R2
   \   000001DA   B5EB0A01           SUBS     R1,R5,R10
   \   000001DE   ....               LDR.N    R2,??DataTable14_2
   \   000001E0   1268               LDR      R2,[R2, #+0]
   \   000001E2   D268               LDR      R2,[R2, #+12]
   \   000001E4   B1FBF2F1           UDIV     R1,R1,R2
   \   000001E8   0F18               ADDS     R7,R1,R0
    797            pfi->FileCurSector=(SOC(pfi->FileCurCluster));
   \   000001EA   2069               LDR      R0,[R4, #+16]
   \   000001EC   ....               LDR.N    R1,??DataTable14_2
   \   000001EE   0968               LDR      R1,[R1, #+0]
   \   000001F0   8968               LDR      R1,[R1, #+8]
   \   000001F2   401A               SUBS     R0,R0,R1
   \   000001F4   ....               LDR.N    R1,??DataTable14_2
   \   000001F6   0968               LDR      R1,[R1, #+0]
   \   000001F8   4969               LDR      R1,[R1, #+20]
   \   000001FA   ....               LDR.N    R2,??DataTable14_2
   \   000001FC   1268               LDR      R2,[R2, #+0]
   \   000001FE   D269               LDR      R2,[R2, #+28]
   \   00000200   01FB0020           MLA      R0,R1,R0,R2
   \   00000204   A061               STR      R0,[R4, #+24]
    798            for(j=(SOC(pfi->FileCurCluster));j<temp;j++)
   \   00000206   2069               LDR      R0,[R4, #+16]
   \   00000208   ....               LDR.N    R1,??DataTable14_2
   \   0000020A   0968               LDR      R1,[R1, #+0]
   \   0000020C   8968               LDR      R1,[R1, #+8]
   \   0000020E   401A               SUBS     R0,R0,R1
   \   00000210   ....               LDR.N    R1,??DataTable14_2
   \   00000212   0968               LDR      R1,[R1, #+0]
   \   00000214   4969               LDR      R1,[R1, #+20]
   \   00000216   ....               LDR.N    R2,??DataTable14_2
   \   00000218   1268               LDR      R2,[R2, #+0]
   \   0000021A   D269               LDR      R2,[R2, #+28]
   \   0000021C   01FB0029           MLA      R9,R1,R0,R2
   \   00000220   01E0               B.N      ??FAT32_Read_File_18
   \                     ??FAT32_Read_File_19:
   \   00000222   19F10109           ADDS     R9,R9,#+1
   \                     ??FAT32_Read_File_18:
   \   00000226   B945               CMP      R9,R7
   \   00000228   26D2               BCS.N    ??FAT32_Read_File_20
    799            {
    800             FAT32_ReadSector(j,FAT32_Buffer);
   \   0000022A   ....               LDR.N    R1,??DataTable14
   \   0000022C   4846               MOV      R0,R9
   \   0000022E   ........           BL       FAT32_ReadSector
    801             pfi->FileCurSector=j;
   \   00000232   C4F81890           STR      R9,[R4, #+24]
    802             for(i=0;i<pArg->BytesPerSector;i++)
   \   00000236   0020               MOVS     R0,#+0
   \   00000238   15E0               B.N      ??FAT32_Read_File_21
    803             {
    804              if(counter>=len) 
    805              {
    806                return len;
    807              }
    808              pbuf[counter]=FAT32_Buffer[i];
   \                     ??FAT32_Read_File_22:
   \   0000023A   ....               LDR.N    R1,??DataTable14
   \   0000023C   415C               LDRB     R1,[R0, R1]
   \   0000023E   0AF80610           STRB     R1,[R10, R6]
    809              counter++;
   \   00000242   1AF1010A           ADDS     R10,R10,#+1
    810              pfi->FileCurPos++;
   \   00000246   A18B               LDRH     R1,[R4, #+28]
   \   00000248   491C               ADDS     R1,R1,#+1
   \   0000024A   A183               STRH     R1,[R4, #+28]
    811              pfi->FileCurPos%=pArg->BytesPerSector;
   \   0000024C   A18B               LDRH     R1,[R4, #+28]
   \   0000024E   ....               LDR.N    R2,??DataTable14_2
   \   00000250   1268               LDR      R2,[R2, #+0]
   \   00000252   D268               LDR      R2,[R2, #+12]
   \   00000254   B1FBF2F3           UDIV     R3,R1,R2
   \   00000258   02FB1311           MLS      R1,R2,R3,R1
   \   0000025C   A183               STRH     R1,[R4, #+28]
    812              pfi->FileCurOffset++;
   \   0000025E   216A               LDR      R1,[R4, #+32]
   \   00000260   491C               ADDS     R1,R1,#+1
   \   00000262   2162               STR      R1,[R4, #+32]
   \   00000264   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Read_File_21:
   \   00000266   ....               LDR.N    R1,??DataTable14_2
   \   00000268   0968               LDR      R1,[R1, #+0]
   \   0000026A   C968               LDR      R1,[R1, #+12]
   \   0000026C   8842               CMP      R0,R1
   \   0000026E   D8D2               BCS.N    ??FAT32_Read_File_19
   \   00000270   AA45               CMP      R10,R5
   \   00000272   E2D3               BCC.N    ??FAT32_Read_File_22
   \   00000274   2800               MOVS     R0,R5
   \   00000276   27E0               B.N      ??FAT32_Read_File_5
    813             }   
    814            }
    815            pfi->FileCurSector=j;
   \                     ??FAT32_Read_File_20:
   \   00000278   C4F81890           STR      R9,[R4, #+24]
    816            FAT32_ReadSector(pfi->FileCurSector,FAT32_Buffer);
   \   0000027C   ....               LDR.N    R1,??DataTable14
   \   0000027E   A069               LDR      R0,[R4, #+24]
   \   00000280   ........           BL       FAT32_ReadSector
    817            temp=len-counter;
   \   00000284   B5EB0A07           SUBS     R7,R5,R10
    818            for(i=0;i<temp;i++)
   \   00000288   0020               MOVS     R0,#+0
   \   0000028A   15E0               B.N      ??FAT32_Read_File_23
    819            {
    820             if(counter>=len) 
    821             {
    822               return len;
    823             }
    824             pbuf[counter]=FAT32_Buffer[i];
   \                     ??FAT32_Read_File_24:
   \   0000028C   ....               LDR.N    R1,??DataTable14
   \   0000028E   415C               LDRB     R1,[R0, R1]
   \   00000290   0AF80610           STRB     R1,[R10, R6]
    825             counter++;
   \   00000294   1AF1010A           ADDS     R10,R10,#+1
    826             pfi->FileCurPos++;
   \   00000298   A18B               LDRH     R1,[R4, #+28]
   \   0000029A   491C               ADDS     R1,R1,#+1
   \   0000029C   A183               STRH     R1,[R4, #+28]
    827             pfi->FileCurPos%=pArg->BytesPerSector;
   \   0000029E   A18B               LDRH     R1,[R4, #+28]
   \   000002A0   ....               LDR.N    R2,??DataTable14_2
   \   000002A2   1268               LDR      R2,[R2, #+0]
   \   000002A4   D268               LDR      R2,[R2, #+12]
   \   000002A6   B1FBF2F3           UDIV     R3,R1,R2
   \   000002AA   02FB1311           MLS      R1,R2,R3,R1
   \   000002AE   A183               STRH     R1,[R4, #+28]
    828             pfi->FileCurOffset++;  
   \   000002B0   216A               LDR      R1,[R4, #+32]
   \   000002B2   491C               ADDS     R1,R1,#+1
   \   000002B4   2162               STR      R1,[R4, #+32]
   \   000002B6   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Read_File_23:
   \   000002B8   B842               CMP      R0,R7
   \   000002BA   04D2               BCS.N    ??FAT32_Read_File_25
   \   000002BC   AA45               CMP      R10,R5
   \   000002BE   E5D3               BCC.N    ??FAT32_Read_File_24
   \   000002C0   2800               MOVS     R0,R5
   \   000002C2   01E0               B.N      ??FAT32_Read_File_5
    829            }
    830           }
    831           else
    832           {
    833            len=0;
   \                     ??FAT32_Read_File_0:
   \   000002C4   0025               MOVS     R5,#+0
    834           }
    835           return len;
   \                     ??FAT32_Read_File_25:
   \   000002C6   2800               MOVS     R0,R5
   \                     ??FAT32_Read_File_5:
   \   000002C8   BDE8F087           POP      {R4-R10,PC}      ;; return
    836          }
    837          
    838          /**************************************************************************
    839           - 功能描述：从文件某一位置读取一定长度的数据，由pfun所指向的函数来处理
    840           - 隶属模块：znFAT文件系统模块
    841           - 函数属性：外部，使用户使用
    842           - 参数说明：pfi:FileInfoStruct类型的结构体指针，用于装载文件参数信息，文件
    843                       读取的过程中，此结构体中的相关参数会更新，比如文件的当前偏移量、
    844                       文件的当前扇区，文件的当前簇等等
    845                       offset:要定位的偏移量，要小于文件的大小 
    846                       len:要读取的数据的长度，如果len+offset大于文件的大小，则实际读
    847                       取的数据量是从offset开始到文件结束
    848                       pfun:对读取的数据的处理函数，pfun指向处理函数，这样可以灵活的
    849                       配置数据如何去处理，比如是放在缓冲区中，还是把数据通过串口发送
    850                       出去，只需要pfun去指向相应的处理函数可以了
    851           - 返回说明：读取到的实际的数据长度，如果读取失败，比如指定的偏移量大于了文件
    852                       大小，则返回0
    853           - 注：在读取一个文件的数据前，必须先将该文件用FAT32_Open_File打开
    854           **************************************************************************/
    855          /*
    856          uint32 FAT32_Read_FileX(struct FileInfoStruct *pfi,uint32 offset,uint32 len,void (*pfun)(uint8))
    857          {
    858           uint32 i,j,k,temp;
    859           uint32 counter=0;
    860           if(offset<pfi->FileSize)
    861           {
    862            if(offset+len>pfi->FileSize) len=pfi->FileSize-offset;
    863            FAT32_Seek_File(pfi,offset);
    864            
    865            FAT32_ReadSector(pfi->FileCurSector,FAT32_Buffer);
    866            for(i=pfi->FileCurPos;i<pArg->BytesPerSector;i++)
    867            {
    868             if(counter>=len) 
    869             {
    870               return len;
    871             }
    872             (*pfun)(FAT32_Buffer[i]);
    873             counter++;
    874             pfi->FileCurPos++;
    875             pfi->FileCurOffset++;
    876            }
    877            if(pfi->FileCurSector-(SOC(pfi->FileCurCluster))!=(pArg->SectorsPerClust-1))
    878            {
    879             for(j=pfi->FileCurSector+1;j<(SOC(pfi->FileCurCluster))+pArg->SectorsPerClust;j++)
    880             {
    881              FAT32_ReadSector(j,FAT32_Buffer);
    882              pfi->FileCurSector=j;
    883              for(i=0;i<pArg->BytesPerSector;i++)
    884              {
    885               if(counter>=len)
    886               {
    887                 return len;
    888               }
    889               (*pfun)(FAT32_Buffer[i]);
    890               counter++;
    891               pfi->FileCurPos++;
    892               pfi->FileCurOffset++;
    893              }
    894             }
    895            } 
    896            temp=(len-counter)/(pArg->BytesPerSector*pArg->SectorsPerClust);
    897            for(k=0;k<temp;k++)
    898            {
    899             pfi->FileCurCluster=FAT32_GetNextCluster(pfi->FileCurCluster);
    900             for(j=(SOC(pfi->FileCurCluster));j<(SOC(pfi->FileCurCluster))+pArg->SectorsPerClust;j++)
    901             {
    902              FAT32_ReadSector(j,FAT32_Buffer);
    903              pfi->FileCurSector=j;
    904              for(i=0;i<pArg->BytesPerSector;i++)
    905              {
    906               if(counter>=len)  
    907           	 {
    908                 return len;
    909               }
    910               (*pfun)(FAT32_Buffer[i]);
    911               counter++;
    912               pfi->FileCurOffset++;
    913          	 pfi->FileCurPos++;
    914          	 pfi->FileCurPos%=pArg->BytesPerSector;
    915              } 
    916             }    
    917            }
    918            pfi->FileCurCluster=FAT32_GetNextCluster(pfi->FileCurCluster);
    919            temp=(SOC(pfi->FileCurCluster))+((len-counter)/pArg->BytesPerSector);
    920            pfi->FileCurSector=(SOC(pfi->FileCurCluster));
    921            for(j=(SOC(pfi->FileCurCluster));j<temp;j++)
    922            {
    923             FAT32_ReadSector(j,FAT32_Buffer);
    924             pfi->FileCurSector=j;
    925             for(i=0;i<pArg->BytesPerSector;i++)
    926             {
    927              if(counter>=len) 
    928              {
    929                return len;
    930              }
    931              (*pfun)(FAT32_Buffer[i]);
    932              counter++;
    933              pfi->FileCurPos++;
    934              pfi->FileCurPos%=pArg->BytesPerSector;
    935              pfi->FileCurOffset++;
    936             }   
    937            }
    938            pfi->FileCurSector=j;
    939            FAT32_ReadSector(pfi->FileCurSector,FAT32_Buffer);
    940            temp=len-counter;
    941            for(i=0;i<temp;i++)
    942            {
    943             if(counter>=len) 
    944             {
    945               return len;
    946             }
    947             (*pfun)(FAT32_Buffer[i]);
    948             counter++;
    949             pfi->FileCurPos++;
    950             pfi->FileCurPos%=pArg->BytesPerSector;
    951             pfi->FileCurOffset++;  
    952            }
    953           }
    954           else
    955           {
    956            len=0;
    957           }
    958           return len;
    959          }
    960          */
    961          /**************************************************************************
    962           - 功能描述：寻找可用的空闲簇
    963           - 隶属模块：znFAT文件系统模块
    964           - 函数属性：内部
    965           - 参数说明：无
    966           - 返回说明：如果找到了空闲簇，返回空闲簇的簇号，否则返回0
    967           - 注：寻找空闲簇是创建目录/文件以及向文件写入数据的基础，它如果能很快的寻
    968                 找到空闲簇，那么创建目录/文件以及向文件写入数据这些操作也会比较快。
    969                 所以我们绝不会从最开始的簇依次去寻找，而是使用了二分搜索的算法，以达
    970                 到较好的效果。如果空闲簇没有找到，很有可能就说明存储设备已经没有空间
    971                 了
    972           **************************************************************************/
    973          

   \                                 In section .text, align 2, keep-with-next
    974          uint32 FAT32_Find_Free_Clust(unsigned char flag)
    975          {
   \                     FAT32_Find_Free_Clust:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    976           uint32 iClu,iSec;
    977           struct FAT32_FAT *pFAT;
    978           for(iSec=pArg->FirstFATSector+temp_last_cluster/128;iSec<pArg->FirstFATSector+pArg->FATsectors;iSec++)
   \   00000004   ........           LDR.W    R0,??DataTable24
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   8069               LDR      R0,[R0, #+24]
   \   0000000C   ....               LDR.N    R1,??DataTable15_2
   \   0000000E   0968               LDR      R1,[R1, #+0]
   \   00000010   10EBD115           ADDS     R5,R0,R1, LSR #+7
   \   00000014   00E0               B.N      ??FAT32_Find_Free_Clust_0
   \                     ??FAT32_Find_Free_Clust_1:
   \   00000016   6D1C               ADDS     R5,R5,#+1
   \                     ??FAT32_Find_Free_Clust_0:
   \   00000018   ........           LDR.W    R0,??DataTable24
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   8069               LDR      R0,[R0, #+24]
   \   00000020   ........           LDR.W    R1,??DataTable24
   \   00000024   0968               LDR      R1,[R1, #+0]
   \   00000026   0969               LDR      R1,[R1, #+16]
   \   00000028   0818               ADDS     R0,R1,R0
   \   0000002A   8542               CMP      R5,R0
   \   0000002C   3DD2               BCS.N    ??FAT32_Find_Free_Clust_2
    979           {
    980            FAT32_ReadSector(iSec,FAT32_Buffer);
   \   0000002E   ........           LDR.W    R1,??DataTable23
   \   00000032   2800               MOVS     R0,R5
   \   00000034   ........           BL       FAT32_ReadSector
    981            pFAT=(struct FAT32_FAT *)FAT32_Buffer;
   \   00000038   ........           LDR.W    R7,??DataTable23
    982            for(iClu=0;iClu<pArg->BytesPerSector/4;iClu++)
   \   0000003C   0026               MOVS     R6,#+0
   \   0000003E   00E0               B.N      ??FAT32_Find_Free_Clust_3
   \                     ??FAT32_Find_Free_Clust_4:
   \   00000040   761C               ADDS     R6,R6,#+1
   \                     ??FAT32_Find_Free_Clust_3:
   \   00000042   ........           LDR.W    R0,??DataTable24
   \   00000046   0068               LDR      R0,[R0, #+0]
   \   00000048   C068               LDR      R0,[R0, #+12]
   \   0000004A   B6EB900F           CMP      R6,R0, LSR #+2
   \   0000004E   E2D2               BCS.N    ??FAT32_Find_Free_Clust_1
    983            {
    984             if(LE2BE((uint8 *)(&((pFAT->Items))[iClu]),4)==0)
   \   00000050   0421               MOVS     R1,#+4
   \   00000052   17EB8600           ADDS     R0,R7,R6, LSL #+2
   \   00000056   ........           BL       LE2BE
   \   0000005A   0028               CMP      R0,#+0
   \   0000005C   F0D1               BNE.N    ??FAT32_Find_Free_Clust_4
    985             {
    986              if(!flag)
   \   0000005E   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   002C               CMP      R4,#+0
   \   00000062   0FD1               BNE.N    ??FAT32_Find_Free_Clust_5
    987          	{
    988          	 FAT32_Update_FSInfo_Free_Clu(0);
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   ........           BL       FAT32_Update_FSInfo_Free_Clu
    989          	 temp_last_cluster=128*(iSec-pArg->FirstFATSector)+iClu;	   
   \   0000006A   ........           LDR.W    R0,??DataTable24
   \   0000006E   0068               LDR      R0,[R0, #+0]
   \   00000070   8069               LDR      R0,[R0, #+24]
   \   00000072   281A               SUBS     R0,R5,R0
   \   00000074   8021               MOVS     R1,#+128
   \   00000076   01FB0060           MLA      R0,R1,R0,R6
   \   0000007A   ....               LDR.N    R1,??DataTable15_2
   \   0000007C   0860               STR      R0,[R1, #+0]
    990               return temp_last_cluster;
   \   0000007E   ....               LDR.N    R0,??DataTable15_2
   \   00000080   0068               LDR      R0,[R0, #+0]
   \   00000082   13E0               B.N      ??FAT32_Find_Free_Clust_6
    991          	}
    992          	else
    993          	{
    994          	 FAT32_Update_FSInfo_Last_Clu(128*(iSec-pArg->FirstFATSector)+iClu);
   \                     ??FAT32_Find_Free_Clust_5:
   \   00000084   ........           LDR.W    R0,??DataTable24
   \   00000088   0068               LDR      R0,[R0, #+0]
   \   0000008A   8069               LDR      R0,[R0, #+24]
   \   0000008C   281A               SUBS     R0,R5,R0
   \   0000008E   8021               MOVS     R1,#+128
   \   00000090   01FB0060           MLA      R0,R1,R0,R6
   \   00000094   ........           BL       FAT32_Update_FSInfo_Last_Clu
    995          	 return 128*(iSec-pArg->FirstFATSector)+iClu;
   \   00000098   ........           LDR.W    R0,??DataTable24
   \   0000009C   0068               LDR      R0,[R0, #+0]
   \   0000009E   8069               LDR      R0,[R0, #+24]
   \   000000A0   281A               SUBS     R0,R5,R0
   \   000000A2   8021               MOVS     R1,#+128
   \   000000A4   01FB0060           MLA      R0,R1,R0,R6
   \   000000A8   00E0               B.N      ??FAT32_Find_Free_Clust_6
    996          	}
    997             }
    998            }
    999           }
   1000           return 0;
   \                     ??FAT32_Find_Free_Clust_2:
   \   000000AA   0020               MOVS     R0,#+0
   \                     ??FAT32_Find_Free_Clust_6:
   \   000000AC   F2BD               POP      {R1,R4-R7,PC}    ;; return
   1001          }
   1002          
   1003          /**************************************************************************
   1004           - 功能描述：填充文件/目录项
   1005           - 隶属模块：znFAT文件系统模块
   1006           - 函数属性：内部
   1007           - 参数说明：prec:指向一个direntry类型的结构体，它的结构就是FAT32中文件/
   1008                       目录项的结构
   1009                       name:文件或目录的名称
   1010                       is_dir:指示这个文件/目录项是文件还是目录，分别用来实现文件、
   1011                       目录的创建 1表示创建目录 0表示创建文件
   1012           - 返回说明：无
   1013           - 注：这里创建文件或目录的方法是，先将文件或目录的信息填充到一个结构体中，
   1014                 然后再将这个结构体的数据写入到存储设备的相应的扇区的相应位置上去，这
   1015                 样就完成了文件或目录的创建。
   1016                 在填充文件或目录的信息时，文件或目录的首簇并没有填进去，而是全0
   1017           **************************************************************************/
   1018          

   \                                 In section .text, align 2, keep-with-next
   1019          void Fill_Rec_Inf(struct direntry *prec,int8 *name,uint8 is_dir,uint8 *ptd)
   1020          {
   \                     Fill_Rec_Inf:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   8846               MOV      R8,R1
   \   00000008   1600               MOVS     R6,R2
   \   0000000A   1D00               MOVS     R5,R3
   1021           uint8 i=0,len=0;
   \   0000000C   0027               MOVS     R7,#+0
   \   0000000E   5FF00009           MOVS     R9,#+0
   1022           uint16 temp;
   1023          
   1024           if(is_dir)
   \   00000012   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   002E               CMP      R6,#+0
   \   00000016   3DD0               BEQ.N    ??Fill_Rec_Inf_0
   1025           {
   1026            len=strlen(name);
   \   00000018   4046               MOV      R0,R8
   \   0000001A   ........           BL       strlen
   \   0000001E   8146               MOV      R9,R0
   1027            if(len>8)
   \   00000020   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000024   B9F1090F           CMP      R9,#+9
   \   00000028   1BD3               BCC.N    ??Fill_Rec_Inf_1
   1028            {
   1029             for(i=0;i<6;i++)
   \   0000002A   0027               MOVS     R7,#+0
   \   0000002C   07E0               B.N      ??Fill_Rec_Inf_2
   1030             {
   1031              (prec->deName)[i]=L2U(name[i]);
   \                     ??Fill_Rec_Inf_3:
   \   0000002E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   17F80800           LDRB     R0,[R7, R8]
   \   00000034   ........           BL       L2U
   \   00000038   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003A   3855               STRB     R0,[R7, R4]
   1032             }
   \   0000003C   7F1C               ADDS     R7,R7,#+1
   \                     ??Fill_Rec_Inf_2:
   \   0000003E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   062F               CMP      R7,#+6
   \   00000042   F4D3               BCC.N    ??Fill_Rec_Inf_3
   1033             (prec->deName)[6]='~';
   \   00000044   7E20               MOVS     R0,#+126
   \   00000046   A071               STRB     R0,[R4, #+6]
   1034             (prec->deName)[7]='1';
   \   00000048   3120               MOVS     R0,#+49
   \   0000004A   E071               STRB     R0,[R4, #+7]
   1035            }
   1036            else
   1037            {
   1038             for(i=0;i<len;i++)
   1039             {
   1040              (prec->deName)[i]=L2U(name[i]);
   1041             }
   1042             for(;i<8;i++)
   1043             {
   1044              (prec->deName)[i]=' ';
   1045             }
   1046            }
   1047            for(i=0;i<3;i++)
   \                     ??Fill_Rec_Inf_4:
   \   0000004C   0027               MOVS     R7,#+0
   \                     ??Fill_Rec_Inf_5:
   \   0000004E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000050   032F               CMP      R7,#+3
   \   00000052   80F08880           BCS.W    ??Fill_Rec_Inf_6
   1048            {
   1049             (prec->deExtension)[i]=' ';
   \   00000056   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   3819               ADDS     R0,R7,R4
   \   0000005A   2021               MOVS     R1,#+32
   \   0000005C   0172               STRB     R1,[R0, #+8]
   1050            }
   \   0000005E   7F1C               ADDS     R7,R7,#+1
   \   00000060   F5E7               B.N      ??Fill_Rec_Inf_5
   \                     ??Fill_Rec_Inf_1:
   \   00000062   0027               MOVS     R7,#+0
   \   00000064   07E0               B.N      ??Fill_Rec_Inf_7
   \                     ??Fill_Rec_Inf_8:
   \   00000066   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000068   17F80800           LDRB     R0,[R7, R8]
   \   0000006C   ........           BL       L2U
   \   00000070   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000072   3855               STRB     R0,[R7, R4]
   \   00000074   7F1C               ADDS     R7,R7,#+1
   \                     ??Fill_Rec_Inf_7:
   \   00000076   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000078   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000007C   4F45               CMP      R7,R9
   \   0000007E   F2D3               BCC.N    ??Fill_Rec_Inf_8
   \                     ??Fill_Rec_Inf_9:
   \   00000080   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000082   082F               CMP      R7,#+8
   \   00000084   E2D2               BCS.N    ??Fill_Rec_Inf_4
   \   00000086   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000088   2020               MOVS     R0,#+32
   \   0000008A   3855               STRB     R0,[R7, R4]
   \   0000008C   7F1C               ADDS     R7,R7,#+1
   \   0000008E   F7E7               B.N      ??Fill_Rec_Inf_9
   1051           }
   1052           else
   1053           {
   1054            while(name[len]!='.' && name[len]!=0) len++;
   \                     ??Fill_Rec_Inf_10:
   \   00000090   19F10109           ADDS     R9,R9,#+1
   \                     ??Fill_Rec_Inf_0:
   \   00000094   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000098   19F80800           LDRB     R0,[R9, R8]
   \   0000009C   2E28               CMP      R0,#+46
   \   0000009E   05D0               BEQ.N    ??Fill_Rec_Inf_11
   \   000000A0   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000A4   19F80800           LDRB     R0,[R9, R8]
   \   000000A8   0028               CMP      R0,#+0
   \   000000AA   F1D1               BNE.N    ??Fill_Rec_Inf_10
   1055            if(len>8)
   \                     ??Fill_Rec_Inf_11:
   \   000000AC   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000B0   B9F1090F           CMP      R9,#+9
   \   000000B4   20D3               BCC.N    ??Fill_Rec_Inf_12
   1056            {
   1057             for(i=0;i<6;i++)
   \   000000B6   0027               MOVS     R7,#+0
   \   000000B8   07E0               B.N      ??Fill_Rec_Inf_13
   1058             {
   1059              (prec->deName)[i]=L2U(name[i]);
   \                     ??Fill_Rec_Inf_14:
   \   000000BA   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000BC   17F80800           LDRB     R0,[R7, R8]
   \   000000C0   ........           BL       L2U
   \   000000C4   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C6   3855               STRB     R0,[R7, R4]
   1060             }
   \   000000C8   7F1C               ADDS     R7,R7,#+1
   \                     ??Fill_Rec_Inf_13:
   \   000000CA   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000CC   062F               CMP      R7,#+6
   \   000000CE   F4D3               BCC.N    ??Fill_Rec_Inf_14
   1061             (prec->deName)[6]='~';
   \   000000D0   7E20               MOVS     R0,#+126
   \   000000D2   A071               STRB     R0,[R4, #+6]
   1062             (prec->deName)[7]='1';
   \   000000D4   3120               MOVS     R0,#+49
   \   000000D6   E071               STRB     R0,[R4, #+7]
   1063            }
   1064            else
   1065            {
   1066             for(i=0;i<len;i++)
   1067             {
   1068              (prec->deName)[i]=L2U(name[i]);
   1069             }
   1070             for(;i<8;i++)
   1071             {
   1072              (prec->deName)[i]=' ';
   1073             }
   1074            }
   1075            if(name[len]==0)
   \                     ??Fill_Rec_Inf_15:
   \   000000D8   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000DC   19F80800           LDRB     R0,[R9, R8]
   \   000000E0   0028               CMP      R0,#+0
   \   000000E2   20D1               BNE.N    ??Fill_Rec_Inf_16
   1076            {
   1077             for(i=0;i<3;i++)
   \   000000E4   0027               MOVS     R7,#+0
   \                     ??Fill_Rec_Inf_17:
   \   000000E6   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000E8   032F               CMP      R7,#+3
   \   000000EA   3CD2               BCS.N    ??Fill_Rec_Inf_6
   1078             {
   1079              (prec->deExtension)[i]=' ';
   \   000000EC   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000EE   3819               ADDS     R0,R7,R4
   \   000000F0   2021               MOVS     R1,#+32
   \   000000F2   0172               STRB     R1,[R0, #+8]
   1080             }
   \   000000F4   7F1C               ADDS     R7,R7,#+1
   \   000000F6   F6E7               B.N      ??Fill_Rec_Inf_17
   1081            }
   \                     ??Fill_Rec_Inf_12:
   \   000000F8   0027               MOVS     R7,#+0
   \   000000FA   07E0               B.N      ??Fill_Rec_Inf_18
   \                     ??Fill_Rec_Inf_19:
   \   000000FC   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000FE   17F80800           LDRB     R0,[R7, R8]
   \   00000102   ........           BL       L2U
   \   00000106   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000108   3855               STRB     R0,[R7, R4]
   \   0000010A   7F1C               ADDS     R7,R7,#+1
   \                     ??Fill_Rec_Inf_18:
   \   0000010C   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000010E   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000112   4F45               CMP      R7,R9
   \   00000114   F2D3               BCC.N    ??Fill_Rec_Inf_19
   \                     ??Fill_Rec_Inf_20:
   \   00000116   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000118   082F               CMP      R7,#+8
   \   0000011A   DDD2               BCS.N    ??Fill_Rec_Inf_15
   \   0000011C   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000011E   2020               MOVS     R0,#+32
   \   00000120   3855               STRB     R0,[R7, R4]
   \   00000122   7F1C               ADDS     R7,R7,#+1
   \   00000124   F7E7               B.N      ??Fill_Rec_Inf_20
   1082            else
   1083            {
   1084             for(i=0;i<3;i++)
   \                     ??Fill_Rec_Inf_16:
   \   00000126   0027               MOVS     R7,#+0
   \   00000128   04E0               B.N      ??Fill_Rec_Inf_21
   1085             {
   1086              (prec->deExtension)[i]=' ';
   \                     ??Fill_Rec_Inf_22:
   \   0000012A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000012C   3819               ADDS     R0,R7,R4
   \   0000012E   2021               MOVS     R1,#+32
   \   00000130   0172               STRB     R1,[R0, #+8]
   1087             }
   \   00000132   7F1C               ADDS     R7,R7,#+1
   \                     ??Fill_Rec_Inf_21:
   \   00000134   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000136   032F               CMP      R7,#+3
   \   00000138   F7D3               BCC.N    ??Fill_Rec_Inf_22
   1088             len++;
   \   0000013A   19F10109           ADDS     R9,R9,#+1
   1089             i=0;
   \   0000013E   0027               MOVS     R7,#+0
   \   00000140   0BE0               B.N      ??Fill_Rec_Inf_23
   1090             while(name[len]!=0)
   1091             {
   1092              (prec->deExtension)[i++]=L2U(name[len]);
   \                     ??Fill_Rec_Inf_24:
   \   00000142   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000146   19F80800           LDRB     R0,[R9, R8]
   \   0000014A   ........           BL       L2U
   \   0000014E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000150   3919               ADDS     R1,R7,R4
   \   00000152   0872               STRB     R0,[R1, #+8]
   \   00000154   7F1C               ADDS     R7,R7,#+1
   1093          	len++;
   \   00000156   19F10109           ADDS     R9,R9,#+1
   1094             }
   \                     ??Fill_Rec_Inf_23:
   \   0000015A   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000015E   19F80800           LDRB     R0,[R9, R8]
   \   00000162   0028               CMP      R0,#+0
   \   00000164   EDD1               BNE.N    ??Fill_Rec_Inf_24
   1095            }
   1096           }
   1097           if(is_dir)
   \                     ??Fill_Rec_Inf_6:
   \   00000166   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000168   002E               CMP      R6,#+0
   \   0000016A   02D0               BEQ.N    ??Fill_Rec_Inf_25
   1098            (prec->deAttributes)=0x10;
   \   0000016C   1020               MOVS     R0,#+16
   \   0000016E   E072               STRB     R0,[R4, #+11]
   \   00000170   01E0               B.N      ??Fill_Rec_Inf_26
   1099           else
   1100            (prec->deAttributes)=0x20;
   \                     ??Fill_Rec_Inf_25:
   \   00000172   2020               MOVS     R0,#+32
   \   00000174   E072               STRB     R0,[R4, #+11]
   1101           
   1102           temp=MAKE_FILE_TIME(ptd[3],ptd[4],ptd[5]);
   \                     ??Fill_Rec_Inf_26:
   \   00000176   E878               LDRB     R0,[R5, #+3]
   \   00000178   2979               LDRB     R1,[R5, #+4]
   \   0000017A   4901               LSLS     R1,R1,#+5
   \   0000017C   11EBC020           ADDS     R0,R1,R0, LSL #+11
   \   00000180   6979               LDRB     R1,[R5, #+5]
   \   00000182   10EB5100           ADDS     R0,R0,R1, LSR #+1
   1103           (prec->deCTime)[0]=temp;
   \   00000186   A073               STRB     R0,[R4, #+14]
   1104           (prec->deCTime)[1]=temp>>8;
   \   00000188   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000018A   000A               LSRS     R0,R0,#+8
   \   0000018C   E073               STRB     R0,[R4, #+15]
   1105           temp=MAKE_FILE_DATE(ptd[0],ptd[1],ptd[2]);
   \   0000018E   2878               LDRB     R0,[R5, #+0]
   \   00000190   1430               ADDS     R0,R0,#+20
   \   00000192   6978               LDRB     R1,[R5, #+1]
   \   00000194   4901               LSLS     R1,R1,#+5
   \   00000196   11EB4020           ADDS     R0,R1,R0, LSL #+9
   \   0000019A   A978               LDRB     R1,[R5, #+2]
   \   0000019C   50FA81F0           UXTAB    R0,R0,R1
   1106           (prec->deCDate)[0]=temp;
   \   000001A0   2074               STRB     R0,[R4, #+16]
   1107           (prec->deCDate)[1]=temp>>8;
   \   000001A2   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001A4   000A               LSRS     R0,R0,#+8
   \   000001A6   6074               STRB     R0,[R4, #+17]
   1108          
   1109           (prec->deLowerCase)=0;
   \   000001A8   0020               MOVS     R0,#+0
   \   000001AA   2073               STRB     R0,[R4, #+12]
   1110           (prec->deHighClust)[0]=0;
   \   000001AC   0020               MOVS     R0,#+0
   \   000001AE   2075               STRB     R0,[R4, #+20]
   1111           (prec->deHighClust)[1]=0;
   \   000001B0   0020               MOVS     R0,#+0
   \   000001B2   6075               STRB     R0,[R4, #+21]
   1112           (prec->deLowCluster)[0]=0;
   \   000001B4   0020               MOVS     R0,#+0
   \   000001B6   A076               STRB     R0,[R4, #+26]
   1113           (prec->deLowCluster)[1]=0;
   \   000001B8   0020               MOVS     R0,#+0
   \   000001BA   E076               STRB     R0,[R4, #+27]
   1114           for(i=0;i<4;i++)
   \   000001BC   0027               MOVS     R7,#+0
   \   000001BE   04E0               B.N      ??Fill_Rec_Inf_27
   1115           {
   1116            (prec->deFileSize)[i]=0;
   \                     ??Fill_Rec_Inf_28:
   \   000001C0   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001C2   3819               ADDS     R0,R7,R4
   \   000001C4   0021               MOVS     R1,#+0
   \   000001C6   0177               STRB     R1,[R0, #+28]
   1117           }				
   \   000001C8   7F1C               ADDS     R7,R7,#+1
   \                     ??Fill_Rec_Inf_27:
   \   000001CA   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001CC   042F               CMP      R7,#+4
   \   000001CE   F7D3               BCC.N    ??Fill_Rec_Inf_28
   1118          }
   \   000001D0   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
   1119          
   1120          /**************************************************************************
   1121           - 功能描述：更新FAT表
   1122           - 隶属模块：znFAT文件系统模块
   1123           - 函数属性：内部
   1124           - 参数说明：cluster:要更新的簇项号
   1125                       dat:要将相应的簇项更新为dat
   1126           - 返回说明：无
   1127           - 注：在向文件写入了数据后，需要对FAT表进行更表，以表明新数据的簇链关系 
   1128                 删除文件的时候，也需要将该文件的簇项进行清除，销毁文件的簇链关系
   1129           **************************************************************************/
   1130          

   \                                 In section .text, align 2, keep-with-next
   1131          void FAT32_Modify_FAT(uint32 cluster,uint32 dat)
   1132          {
   \                     FAT32_Modify_FAT:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   1133           FAT32_ReadSector(pArg->FirstFATSector+(cluster*4/pArg->BytesPerSector),FAT32_Buffer);
   \   00000006   ........           LDR.W    R1,??DataTable23
   \   0000000A   ........           LDR.W    R0,??DataTable24
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   8069               LDR      R0,[R0, #+24]
   \   00000012   A200               LSLS     R2,R4,#+2
   \   00000014   ........           LDR.W    R3,??DataTable24
   \   00000018   1B68               LDR      R3,[R3, #+0]
   \   0000001A   DB68               LDR      R3,[R3, #+12]
   \   0000001C   B2FBF3F2           UDIV     R2,R2,R3
   \   00000020   1018               ADDS     R0,R2,R0
   \   00000022   ........           BL       FAT32_ReadSector
   1134           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+0]=dat&0x000000ff;
   \   00000026   A000               LSLS     R0,R4,#+2
   \   00000028   ........           LDR.W    R1,??DataTable24
   \   0000002C   0968               LDR      R1,[R1, #+0]
   \   0000002E   C968               LDR      R1,[R1, #+12]
   \   00000030   B0FBF1F2           UDIV     R2,R0,R1
   \   00000034   01FB1200           MLS      R0,R1,R2,R0
   \   00000038   ........           LDR.W    R1,??DataTable23
   \   0000003C   4554               STRB     R5,[R0, R1]
   1135           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+1]=(dat&0x0000ff00)>>8;
   \   0000003E   A000               LSLS     R0,R4,#+2
   \   00000040   ........           LDR.W    R1,??DataTable24
   \   00000044   0968               LDR      R1,[R1, #+0]
   \   00000046   C968               LDR      R1,[R1, #+12]
   \   00000048   B0FBF1F2           UDIV     R2,R0,R1
   \   0000004C   01FB1200           MLS      R0,R1,R2,R0
   \   00000050   ........           LDR.W    R1,??DataTable23
   \   00000054   4018               ADDS     R0,R0,R1
   \   00000056   290A               LSRS     R1,R5,#+8
   \   00000058   4170               STRB     R1,[R0, #+1]
   1136           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+2]=(dat&0x00ff0000)>>16;
   \   0000005A   A000               LSLS     R0,R4,#+2
   \   0000005C   ........           LDR.W    R1,??DataTable24
   \   00000060   0968               LDR      R1,[R1, #+0]
   \   00000062   C968               LDR      R1,[R1, #+12]
   \   00000064   B0FBF1F2           UDIV     R2,R0,R1
   \   00000068   01FB1200           MLS      R0,R1,R2,R0
   \   0000006C   ........           LDR.W    R1,??DataTable23
   \   00000070   4018               ADDS     R0,R0,R1
   \   00000072   290C               LSRS     R1,R5,#+16
   \   00000074   8170               STRB     R1,[R0, #+2]
   1137           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+3]=(dat&0xff000000)>>24;
   \   00000076   A000               LSLS     R0,R4,#+2
   \   00000078   ........           LDR.W    R1,??DataTable24
   \   0000007C   0968               LDR      R1,[R1, #+0]
   \   0000007E   C968               LDR      R1,[R1, #+12]
   \   00000080   B0FBF1F2           UDIV     R2,R0,R1
   \   00000084   01FB1200           MLS      R0,R1,R2,R0
   \   00000088   ........           LDR.W    R1,??DataTable23
   \   0000008C   4018               ADDS     R0,R0,R1
   \   0000008E   290E               LSRS     R1,R5,#+24
   \   00000090   C170               STRB     R1,[R0, #+3]
   1138           FAT32_WriteSector(pArg->FirstFATSector+(cluster*4/pArg->BytesPerSector),FAT32_Buffer);
   \   00000092   ........           LDR.W    R1,??DataTable23
   \   00000096   ........           LDR.W    R0,??DataTable24
   \   0000009A   0068               LDR      R0,[R0, #+0]
   \   0000009C   8069               LDR      R0,[R0, #+24]
   \   0000009E   A200               LSLS     R2,R4,#+2
   \   000000A0   ........           LDR.W    R3,??DataTable24
   \   000000A4   1B68               LDR      R3,[R3, #+0]
   \   000000A6   DB68               LDR      R3,[R3, #+12]
   \   000000A8   B2FBF3F2           UDIV     R2,R2,R3
   \   000000AC   1018               ADDS     R0,R2,R0
   \   000000AE   ........           BL       FAT32_WriteSector
   1139          
   1140           FAT32_ReadSector(pArg->FirstFATSector+pArg->FATsectors+(cluster*4/pArg->BytesPerSector),FAT32_Buffer);
   \   000000B2   ........           LDR.W    R1,??DataTable23
   \   000000B6   ........           LDR.W    R0,??DataTable24
   \   000000BA   0068               LDR      R0,[R0, #+0]
   \   000000BC   8069               LDR      R0,[R0, #+24]
   \   000000BE   ........           LDR.W    R2,??DataTable24
   \   000000C2   1268               LDR      R2,[R2, #+0]
   \   000000C4   1269               LDR      R2,[R2, #+16]
   \   000000C6   1018               ADDS     R0,R2,R0
   \   000000C8   A200               LSLS     R2,R4,#+2
   \   000000CA   ........           LDR.W    R3,??DataTable24
   \   000000CE   1B68               LDR      R3,[R3, #+0]
   \   000000D0   DB68               LDR      R3,[R3, #+12]
   \   000000D2   B2FBF3F2           UDIV     R2,R2,R3
   \   000000D6   1018               ADDS     R0,R2,R0
   \   000000D8   ........           BL       FAT32_ReadSector
   1141           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+0]=dat&0x000000ff;
   \   000000DC   A000               LSLS     R0,R4,#+2
   \   000000DE   ........           LDR.W    R1,??DataTable24
   \   000000E2   0968               LDR      R1,[R1, #+0]
   \   000000E4   C968               LDR      R1,[R1, #+12]
   \   000000E6   B0FBF1F2           UDIV     R2,R0,R1
   \   000000EA   01FB1200           MLS      R0,R1,R2,R0
   \   000000EE   ........           LDR.W    R1,??DataTable23
   \   000000F2   4554               STRB     R5,[R0, R1]
   1142           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+1]=(dat&0x0000ff00)>>8;
   \   000000F4   A000               LSLS     R0,R4,#+2
   \   000000F6   ........           LDR.W    R1,??DataTable24
   \   000000FA   0968               LDR      R1,[R1, #+0]
   \   000000FC   C968               LDR      R1,[R1, #+12]
   \   000000FE   B0FBF1F2           UDIV     R2,R0,R1
   \   00000102   01FB1200           MLS      R0,R1,R2,R0
   \   00000106   ........           LDR.W    R1,??DataTable23
   \   0000010A   4018               ADDS     R0,R0,R1
   \   0000010C   290A               LSRS     R1,R5,#+8
   \   0000010E   4170               STRB     R1,[R0, #+1]
   1143           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+2]=(dat&0x00ff0000)>>16;
   \   00000110   A000               LSLS     R0,R4,#+2
   \   00000112   ........           LDR.W    R1,??DataTable24
   \   00000116   0968               LDR      R1,[R1, #+0]
   \   00000118   C968               LDR      R1,[R1, #+12]
   \   0000011A   B0FBF1F2           UDIV     R2,R0,R1
   \   0000011E   01FB1200           MLS      R0,R1,R2,R0
   \   00000122   ........           LDR.W    R1,??DataTable23
   \   00000126   4018               ADDS     R0,R0,R1
   \   00000128   290C               LSRS     R1,R5,#+16
   \   0000012A   8170               STRB     R1,[R0, #+2]
   1144           FAT32_Buffer[((cluster*4)%pArg->BytesPerSector)+3]=(dat&0xff000000)>>24;
   \   0000012C   A000               LSLS     R0,R4,#+2
   \   0000012E   ........           LDR.W    R1,??DataTable24
   \   00000132   0968               LDR      R1,[R1, #+0]
   \   00000134   C968               LDR      R1,[R1, #+12]
   \   00000136   B0FBF1F2           UDIV     R2,R0,R1
   \   0000013A   01FB1200           MLS      R0,R1,R2,R0
   \   0000013E   ........           LDR.W    R1,??DataTable23
   \   00000142   4018               ADDS     R0,R0,R1
   \   00000144   290E               LSRS     R1,R5,#+24
   \   00000146   C170               STRB     R1,[R0, #+3]
   1145           FAT32_WriteSector(pArg->FirstFATSector+pArg->FATsectors+(cluster*4/pArg->BytesPerSector),FAT32_Buffer); 
   \   00000148   ........           LDR.W    R1,??DataTable23
   \   0000014C   ........           LDR.W    R0,??DataTable24
   \   00000150   0068               LDR      R0,[R0, #+0]
   \   00000152   8069               LDR      R0,[R0, #+24]
   \   00000154   ........           LDR.W    R2,??DataTable24
   \   00000158   1268               LDR      R2,[R2, #+0]
   \   0000015A   1269               LDR      R2,[R2, #+16]
   \   0000015C   1018               ADDS     R0,R2,R0
   \   0000015E   A200               LSLS     R2,R4,#+2
   \   00000160   ........           LDR.W    R3,??DataTable24
   \   00000164   1B68               LDR      R3,[R3, #+0]
   \   00000166   DB68               LDR      R3,[R3, #+12]
   \   00000168   B2FBF3F2           UDIV     R2,R2,R3
   \   0000016C   1018               ADDS     R0,R2,R0
   \   0000016E   ........           BL       FAT32_WriteSector
   1146          }
   \   00000172   31BD               POP      {R0,R4,R5,PC}    ;; return
   1147          
   1148          /**************************************************************************
   1149           - 功能描述：清空某个簇的所有扇区，填充0
   1150           - 隶属模块：znFAT文件系统模块
   1151           - 函数属性：内部
   1152           - 参数说明：cluster:要清空的簇的簇号
   1153           - 返回说明：无
   1154           **************************************************************************/
   1155          

   \                                 In section .text, align 2, keep-with-next
   1156          void FAT32_Empty_Cluster(uint32 Cluster)
   1157          {
   \                     FAT32_Empty_Cluster:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   1158           uint32 iSec;
   1159           uint16 i;
   1160           for(i=0;i<pArg->BytesPerSector;i++)
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   05E0               B.N      ??FAT32_Empty_Cluster_0
   1161           {
   1162            FAT32_Buffer[i]=0;
   \                     ??FAT32_Empty_Cluster_1:
   \   00000008   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   ........           LDR.W    R1,??DataTable23
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   4254               STRB     R2,[R0, R1]
   1163           }
   \   00000012   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Empty_Cluster_0:
   \   00000014   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   ........           LDR.W    R1,??DataTable24
   \   0000001A   0968               LDR      R1,[R1, #+0]
   \   0000001C   C968               LDR      R1,[R1, #+12]
   \   0000001E   8842               CMP      R0,R1
   \   00000020   F2D3               BCC.N    ??FAT32_Empty_Cluster_1
   1164           for(iSec=SOC(Cluster);iSec<SOC(Cluster)+pArg->SectorsPerClust;iSec++)
   \   00000022   ........           LDR.W    R0,??DataTable24
   \   00000026   0068               LDR      R0,[R0, #+0]
   \   00000028   8068               LDR      R0,[R0, #+8]
   \   0000002A   201A               SUBS     R0,R4,R0
   \   0000002C   ........           LDR.W    R1,??DataTable24
   \   00000030   0968               LDR      R1,[R1, #+0]
   \   00000032   4969               LDR      R1,[R1, #+20]
   \   00000034   ........           LDR.W    R2,??DataTable24
   \   00000038   1268               LDR      R2,[R2, #+0]
   \   0000003A   D269               LDR      R2,[R2, #+28]
   \   0000003C   01FB0025           MLA      R5,R1,R0,R2
   \   00000040   05E0               B.N      ??FAT32_Empty_Cluster_2
   1165           {
   1166            FAT32_WriteSector(iSec,FAT32_Buffer);
   \                     ??FAT32_Empty_Cluster_3:
   \   00000042   ........           LDR.W    R1,??DataTable23
   \   00000046   2800               MOVS     R0,R5
   \   00000048   ........           BL       FAT32_WriteSector
   1167           }
   \   0000004C   6D1C               ADDS     R5,R5,#+1
   \                     ??FAT32_Empty_Cluster_2:
   \   0000004E   ........           LDR.W    R0,??DataTable24
   \   00000052   0068               LDR      R0,[R0, #+0]
   \   00000054   8068               LDR      R0,[R0, #+8]
   \   00000056   201A               SUBS     R0,R4,R0
   \   00000058   ........           LDR.W    R1,??DataTable24
   \   0000005C   0968               LDR      R1,[R1, #+0]
   \   0000005E   4969               LDR      R1,[R1, #+20]
   \   00000060   ........           LDR.W    R2,??DataTable24
   \   00000064   1268               LDR      R2,[R2, #+0]
   \   00000066   D269               LDR      R2,[R2, #+28]
   \   00000068   01FB0020           MLA      R0,R1,R0,R2
   \   0000006C   ........           LDR.W    R1,??DataTable24
   \   00000070   0968               LDR      R1,[R1, #+0]
   \   00000072   4969               LDR      R1,[R1, #+20]
   \   00000074   0818               ADDS     R0,R1,R0
   \   00000076   8542               CMP      R5,R0
   \   00000078   E3D3               BCC.N    ??FAT32_Empty_Cluster_3
   1168          }
   \   0000007A   31BD               POP      {R0,R4,R5,PC}    ;; return
   1169          
   1170          /**************************************************************************
   1171           - 功能描述：在存储设备中创建一个文件/目录项
   1172           - 隶属模块：znFAT文件系统模块
   1173           - 函数属性：内部
   1174           - 参数说明：pfi:指向FileInfoStruct类型的结构体，用于装载刚创建的文件的信息
   1175                           也就是说，如果创建的是目录，则此结构体不会被更新
   1176                       cluster:在cluster这个簇中创建文件/目录项，用于实现在任意目录下
   1177                           创建文件或目录，可以通过FAT32_Enter_Dir来获取某一个目录的开
   1178                           始簇
   1179                       name:文件/目录的名称
   1180                       is_dir:指示要创建的是文件还是目录，文件与目录的创建方法是不同的
   1181                           1表示创建目录 0表示创建文件
   1182           - 返回说明：成功返回1，失败返回-1
   1183           **************************************************************************/
   1184          

   \                                 In section .text, align 2, keep-with-next
   1185          uint8 FAT32_Create_Rec(struct FileInfoStruct *pfi,uint32 cluster,int8 *name,uint8 is_dir,uint8 *ptd)
   1186          {
   \                     FAT32_Create_Rec:
   \   00000000   2DE9F54F           PUSH     {R0,R2,R4-R11,LR}
   \   00000004   83B0               SUB      SP,SP,#+12
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1E00               MOVS     R6,R3
   1187           uint32 iSec,iRec,temp_sec,temp_clu,new_clu,i,old_clu;
   1188           uint8 flag=0;
   \   0000000A   5FF00008           MOVS     R8,#+0
   1189           uint16 temp_Rec;
   1190           struct direntry *pRec;
   1191           Fill_Rec_Inf(&temp_rec,name,is_dir,ptd);
   \   0000000E   0E9B               LDR      R3,[SP, #+56]
   \   00000010   3200               MOVS     R2,R6
   \   00000012   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0499               LDR      R1,[SP, #+16]
   \   00000016   ........           LDR.W    R0,??DataTable24_1
   \   0000001A   ........           BL       Fill_Rec_Inf
   1192           do
   1193           {
   1194            old_clu=cluster;
   \                     ??FAT32_Create_Rec_0:
   \   0000001E   0195               STR      R5,[SP, #+4]
   1195            temp_sec=SOC(cluster);
   \   00000020   ........           LDR.W    R0,??DataTable24
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   8068               LDR      R0,[R0, #+8]
   \   00000028   281A               SUBS     R0,R5,R0
   \   0000002A   ........           LDR.W    R1,??DataTable24
   \   0000002E   0968               LDR      R1,[R1, #+0]
   \   00000030   4969               LDR      R1,[R1, #+20]
   \   00000032   ........           LDR.W    R2,??DataTable24
   \   00000036   1268               LDR      R2,[R2, #+0]
   \   00000038   D269               LDR      R2,[R2, #+28]
   \   0000003A   01FB0027           MLA      R7,R1,R0,R2
   1196            for(iSec=temp_sec;iSec<temp_sec+pArg->SectorsPerClust;iSec++)
   \   0000003E   BA46               MOV      R10,R7
   \   00000040   01E0               B.N      ??FAT32_Create_Rec_1
   \                     ??FAT32_Create_Rec_2:
   \   00000042   1AF1010A           ADDS     R10,R10,#+1
   \                     ??FAT32_Create_Rec_1:
   \   00000046   ........           LDR.W    R0,??DataTable24
   \   0000004A   0068               LDR      R0,[R0, #+0]
   \   0000004C   4069               LDR      R0,[R0, #+20]
   \   0000004E   C019               ADDS     R0,R0,R7
   \   00000050   8245               CMP      R10,R0
   \   00000052   5AD2               BCS.N    ??FAT32_Create_Rec_3
   1197            {
   1198             FAT32_ReadSector(iSec,FAT32_Buffer);
   \   00000054   ........           LDR.W    R1,??DataTable23
   \   00000058   5046               MOV      R0,R10
   \   0000005A   ........           BL       FAT32_ReadSector
   1199             for(iRec=0;iRec<pArg->BytesPerSector;iRec+=sizeof(struct direntry))
   \   0000005E   5FF00009           MOVS     R9,#+0
   \   00000062   1CE0               B.N      ??FAT32_Create_Rec_4
   1200             {
   1201              pRec=(struct direntry *)(FAT32_Buffer+iRec);
   1202          	if((pRec->deName)[0]==0)
   1203          	{
   1204          	 flag=1;
   1205          	 if(is_dir)
   1206          	 {
   1207          	  if(!(new_clu=FAT32_Find_Free_Clust(0))) return -1;
   1208          	  FAT32_Modify_FAT(new_clu,0x0fffffff);
   1209          	  (temp_rec.deHighClust)[0]=(new_clu&0x00ff0000)>>16;
   1210                (temp_rec.deHighClust)[1]=(new_clu&0xff000000)>>24;
   1211                (temp_rec.deLowCluster)[0]=(new_clu&0x000000ff);
   1212                (temp_rec.deLowCluster)[1]=(new_clu&0x0000ff00)>>8;
   1213          	 }
   1214          	 FAT32_ReadSector(iSec,FAT32_Buffer);
   1215          	 for(i=0;i<sizeof(struct direntry);i++)
   1216          	 {
   1217          	  ((uint8 *)pRec)[i]=((uint8 *)(&temp_rec))[i];
   \                     ??FAT32_Create_Rec_5:
   \   00000064   ........           LDR.W    R1,??DataTable24_1
   \   00000068   415C               LDRB     R1,[R0, R1]
   \   0000006A   00F80B10           STRB     R1,[R0, R11]
   1218          	 }
   \   0000006E   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Create_Rec_6:
   \   00000070   2028               CMP      R0,#+32
   \   00000072   F7D3               BCC.N    ??FAT32_Create_Rec_5
   1219          	 FAT32_WriteSector(iSec,FAT32_Buffer);
   \   00000074   ........           LDR.W    R1,??DataTable23
   \   00000078   5046               MOV      R0,R10
   \   0000007A   ........           BL       FAT32_WriteSector
   1220          	 temp_sec=iSec;
   \   0000007E   5746               MOV      R7,R10
   1221          	 temp_Rec=iRec;
   \   00000080   ADF80090           STRH     R9,[SP, #+0]
   1222          	 iRec=pArg->BytesPerSector;
   \   00000084   ........           LDR.W    R0,??DataTable24
   \   00000088   0068               LDR      R0,[R0, #+0]
   \   0000008A   D0F80C90           LDR      R9,[R0, #+12]
   1223          	 iSec=temp_sec+pArg->SectorsPerClust;
   \   0000008E   ........           LDR.W    R0,??DataTable24
   \   00000092   0068               LDR      R0,[R0, #+0]
   \   00000094   4069               LDR      R0,[R0, #+20]
   \   00000096   10EB070A           ADDS     R10,R0,R7
   \                     ??FAT32_Create_Rec_7:
   \   0000009A   19F12009           ADDS     R9,R9,#+32
   \                     ??FAT32_Create_Rec_4:
   \   0000009E   ........           LDR.W    R0,??DataTable24
   \   000000A2   0068               LDR      R0,[R0, #+0]
   \   000000A4   C068               LDR      R0,[R0, #+12]
   \   000000A6   8145               CMP      R9,R0
   \   000000A8   CBD2               BCS.N    ??FAT32_Create_Rec_2
   \   000000AA   ........           LDR.W    R0,??DataTable23
   \   000000AE   19EB000B           ADDS     R11,R9,R0
   \   000000B2   9BF80000           LDRB     R0,[R11, #+0]
   \   000000B6   0028               CMP      R0,#+0
   \   000000B8   EFD1               BNE.N    ??FAT32_Create_Rec_7
   \   000000BA   5FF00108           MOVS     R8,#+1
   \   000000BE   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C0   002E               CMP      R6,#+0
   \   000000C2   1BD0               BEQ.N    ??FAT32_Create_Rec_8
   \   000000C4   0020               MOVS     R0,#+0
   \   000000C6   ........           BL       FAT32_Find_Free_Clust
   \   000000CA   0400               MOVS     R4,R0
   \   000000CC   0028               CMP      R0,#+0
   \   000000CE   01D1               BNE.N    ??FAT32_Create_Rec_9
   \   000000D0   FF20               MOVS     R0,#+255
   \   000000D2   32E1               B.N      ??FAT32_Create_Rec_10
   \                     ??FAT32_Create_Rec_9:
   \   000000D4   7FF07041           MVNS     R1,#-268435456
   \   000000D8   2000               MOVS     R0,R4
   \   000000DA   ........           BL       FAT32_Modify_FAT
   \   000000DE   200C               LSRS     R0,R4,#+16
   \   000000E0   ........           LDR.W    R1,??DataTable24_1
   \   000000E4   0875               STRB     R0,[R1, #+20]
   \   000000E6   200E               LSRS     R0,R4,#+24
   \   000000E8   ........           LDR.W    R1,??DataTable24_1
   \   000000EC   4875               STRB     R0,[R1, #+21]
   \   000000EE   ........           LDR.W    R0,??DataTable24_1
   \   000000F2   8476               STRB     R4,[R0, #+26]
   \   000000F4   200A               LSRS     R0,R4,#+8
   \   000000F6   ........           LDR.W    R1,??DataTable24_1
   \   000000FA   C876               STRB     R0,[R1, #+27]
   \                     ??FAT32_Create_Rec_8:
   \   000000FC   ........           LDR.W    R1,??DataTable23
   \   00000100   5046               MOV      R0,R10
   \   00000102   ........           BL       FAT32_ReadSector
   \   00000106   0020               MOVS     R0,#+0
   \   00000108   B2E7               B.N      ??FAT32_Create_Rec_6
   1224          	}
   1225             }
   1226            }
   1227           }while(!flag && (cluster=FAT32_GetNextCluster(cluster))!=0x0fffffff);
   \                     ??FAT32_Create_Rec_3:
   \   0000010A   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000010E   B8F1000F           CMP      R8,#+0
   \   00000112   08D1               BNE.N    ??FAT32_Create_Rec_11
   \   00000114   2800               MOVS     R0,R5
   \   00000116   ........           BL       FAT32_GetNextCluster
   \   0000011A   0500               MOVS     R5,R0
   \   0000011C   7FF07041           MVNS     R1,#-268435456
   \   00000120   8842               CMP      R0,R1
   \   00000122   7FF47CAF           BNE.W    ??FAT32_Create_Rec_0
   1228           if(!flag)
   \                     ??FAT32_Create_Rec_11:
   \   00000126   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000012A   B8F1000F           CMP      R8,#+0
   \   0000012E   5BD1               BNE.N    ??FAT32_Create_Rec_12
   1229           {
   1230            if(!(temp_clu=FAT32_Find_Free_Clust(0))) return -1;
   \   00000130   0020               MOVS     R0,#+0
   \   00000132   ........           BL       FAT32_Find_Free_Clust
   \   00000136   0700               MOVS     R7,R0
   \   00000138   002F               CMP      R7,#+0
   \   0000013A   01D1               BNE.N    ??FAT32_Create_Rec_13
   \   0000013C   FF20               MOVS     R0,#+255
   \   0000013E   FCE0               B.N      ??FAT32_Create_Rec_10
   1231            FAT32_Modify_FAT(temp_clu,0x0fffffff);
   \                     ??FAT32_Create_Rec_13:
   \   00000140   7FF07041           MVNS     R1,#-268435456
   \   00000144   3800               MOVS     R0,R7
   \   00000146   ........           BL       FAT32_Modify_FAT
   1232            FAT32_Modify_FAT(old_clu,temp_clu);
   \   0000014A   3900               MOVS     R1,R7
   \   0000014C   0198               LDR      R0,[SP, #+4]
   \   0000014E   ........           BL       FAT32_Modify_FAT
   1233            temp_sec=SOC(temp_clu);
   \   00000152   ........           LDR.W    R0,??DataTable24
   \   00000156   0068               LDR      R0,[R0, #+0]
   \   00000158   8068               LDR      R0,[R0, #+8]
   \   0000015A   381A               SUBS     R0,R7,R0
   \   0000015C   ........           LDR.W    R1,??DataTable24
   \   00000160   0968               LDR      R1,[R1, #+0]
   \   00000162   4969               LDR      R1,[R1, #+20]
   \   00000164   ........           LDR.W    R2,??DataTable24
   \   00000168   1268               LDR      R2,[R2, #+0]
   \   0000016A   D269               LDR      R2,[R2, #+28]
   \   0000016C   01FB0027           MLA      R7,R1,R0,R2
   1234            temp_Rec=0;
   \   00000170   0020               MOVS     R0,#+0
   \   00000172   ADF80000           STRH     R0,[SP, #+0]
   1235            FAT32_ReadSector(temp_sec,FAT32_Buffer);
   \   00000176   ........           LDR.W    R1,??DataTable23
   \   0000017A   3800               MOVS     R0,R7
   \   0000017C   ........           BL       FAT32_ReadSector
   1236            if(is_dir)
   \   00000180   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000182   002E               CMP      R6,#+0
   \   00000184   20D0               BEQ.N    ??FAT32_Create_Rec_14
   1237            {
   1238             if(!(new_clu=FAT32_Find_Free_Clust(0))) return -1;
   \   00000186   0020               MOVS     R0,#+0
   \   00000188   ........           BL       FAT32_Find_Free_Clust
   \   0000018C   0400               MOVS     R4,R0
   \   0000018E   0028               CMP      R0,#+0
   \   00000190   01D1               BNE.N    ??FAT32_Create_Rec_15
   \   00000192   FF20               MOVS     R0,#+255
   \   00000194   D1E0               B.N      ??FAT32_Create_Rec_10
   1239             FAT32_Modify_FAT(new_clu,0x0fffffff);
   \                     ??FAT32_Create_Rec_15:
   \   00000196   7FF07041           MVNS     R1,#-268435456
   \   0000019A   2000               MOVS     R0,R4
   \   0000019C   ........           BL       FAT32_Modify_FAT
   1240             FAT32_ReadSector(temp_sec,FAT32_Buffer);
   \   000001A0   ........           LDR.W    R1,??DataTable23
   \   000001A4   3800               MOVS     R0,R7
   \   000001A6   ........           BL       FAT32_ReadSector
   1241             (temp_rec.deHighClust)[0]=(new_clu&0x00ff0000)>>16;
   \   000001AA   200C               LSRS     R0,R4,#+16
   \   000001AC   ........           LDR.W    R1,??DataTable24_1
   \   000001B0   0875               STRB     R0,[R1, #+20]
   1242             (temp_rec.deHighClust)[1]=(new_clu&0xff000000)>>24;
   \   000001B2   200E               LSRS     R0,R4,#+24
   \   000001B4   ........           LDR.W    R1,??DataTable24_1
   \   000001B8   4875               STRB     R0,[R1, #+21]
   1243             (temp_rec.deLowCluster)[0]=(new_clu&0x000000ff);
   \   000001BA   ........           LDR.W    R0,??DataTable24_1
   \   000001BE   8476               STRB     R4,[R0, #+26]
   1244             (temp_rec.deLowCluster)[1]=(new_clu&0x0000ff00)>>8;
   \   000001C0   200A               LSRS     R0,R4,#+8
   \   000001C2   ........           LDR.W    R1,??DataTable24_1
   \   000001C6   C876               STRB     R0,[R1, #+27]
   1245            }
   1246            for(i=0;i<sizeof(struct direntry);i++)
   \                     ??FAT32_Create_Rec_14:
   \   000001C8   0020               MOVS     R0,#+0
   \   000001CA   06E0               B.N      ??FAT32_Create_Rec_16
   1247            {
   1248             FAT32_Buffer[i]=((uint8 *)(&temp_rec))[i]; 
   \                     ??FAT32_Create_Rec_17:
   \   000001CC   ........           LDR.W    R1,??DataTable23
   \   000001D0   ........           LDR.W    R2,??DataTable24_1
   \   000001D4   825C               LDRB     R2,[R0, R2]
   \   000001D6   4254               STRB     R2,[R0, R1]
   1249            }
   \   000001D8   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Create_Rec_16:
   \   000001DA   2028               CMP      R0,#+32
   \   000001DC   F6D3               BCC.N    ??FAT32_Create_Rec_17
   1250            FAT32_WriteSector(temp_sec,FAT32_Buffer);
   \   000001DE   ........           LDR.W    R1,??DataTable23
   \   000001E2   3800               MOVS     R0,R7
   \   000001E4   ........           BL       FAT32_WriteSector
   1251           }
   1252           if(is_dir)
   \                     ??FAT32_Create_Rec_12:
   \   000001E8   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001EA   002E               CMP      R6,#+0
   \   000001EC   00F07F80           BEQ.W    ??FAT32_Create_Rec_18
   1253           {
   1254            FAT32_Empty_Cluster(new_clu);
   \   000001F0   2000               MOVS     R0,R4
   \   000001F2   ........           BL       FAT32_Empty_Cluster
   1255          
   1256            Fill_Rec_Inf(&temp_rec,".",1,ptd);
   \   000001F6   0E9B               LDR      R3,[SP, #+56]
   \   000001F8   0122               MOVS     R2,#+1
   \   000001FA   ....               ADR.N    R1,??DataTable18  ;; "."
   \   000001FC   ........           LDR.W    R0,??DataTable24_1
   \   00000200   ........           BL       Fill_Rec_Inf
   1257            (temp_rec.deHighClust)[0]=(new_clu&0x00ff0000)>>16;
   \   00000204   200C               LSRS     R0,R4,#+16
   \   00000206   ........           LDR.W    R1,??DataTable24_1
   \   0000020A   0875               STRB     R0,[R1, #+20]
   1258            (temp_rec.deHighClust)[1]=(new_clu&0xff000000)>>24;
   \   0000020C   200E               LSRS     R0,R4,#+24
   \   0000020E   ........           LDR.W    R1,??DataTable24_1
   \   00000212   4875               STRB     R0,[R1, #+21]
   1259            (temp_rec.deLowCluster)[0]=(new_clu&0x000000ff);
   \   00000214   ........           LDR.W    R0,??DataTable24_1
   \   00000218   8476               STRB     R4,[R0, #+26]
   1260            (temp_rec.deLowCluster)[1]=(new_clu&0x0000ff00)>>8;
   \   0000021A   200A               LSRS     R0,R4,#+8
   \   0000021C   ........           LDR.W    R1,??DataTable24_1
   \   00000220   C876               STRB     R0,[R1, #+27]
   1261            for(i=0;i<sizeof(struct direntry);i++)
   \   00000222   0020               MOVS     R0,#+0
   \   00000224   06E0               B.N      ??FAT32_Create_Rec_19
   1262            {
   1263             FAT32_Buffer[i]=((uint8 *)(&temp_rec))[i]; 
   \                     ??FAT32_Create_Rec_20:
   \   00000226   ........           LDR.W    R1,??DataTable23
   \   0000022A   ........           LDR.W    R2,??DataTable24_1
   \   0000022E   825C               LDRB     R2,[R0, R2]
   \   00000230   4254               STRB     R2,[R0, R1]
   1264            }
   \   00000232   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Create_Rec_19:
   \   00000234   2028               CMP      R0,#+32
   \   00000236   F6D3               BCC.N    ??FAT32_Create_Rec_20
   1265            Fill_Rec_Inf(&temp_rec,"..",1,ptd);
   \   00000238   0E9B               LDR      R3,[SP, #+56]
   \   0000023A   0122               MOVS     R2,#+1
   \   0000023C   ....               ADR.N    R1,??DataTable18_1  ;; 0x2E, 0x2E, 0x00, 0x00
   \   0000023E   ........           LDR.W    R0,??DataTable24_1
   \   00000242   ........           BL       Fill_Rec_Inf
   1266            if(cluster==pArg->FirstDirClust)
   \   00000246   ........           LDR.W    R0,??DataTable24
   \   0000024A   0068               LDR      R0,[R0, #+0]
   \   0000024C   8068               LDR      R0,[R0, #+8]
   \   0000024E   8542               CMP      R5,R0
   \   00000250   10D1               BNE.N    ??FAT32_Create_Rec_21
   1267            {
   1268             (temp_rec.deHighClust)[0]=0;
   \   00000252   ........           LDR.W    R0,??DataTable24_1
   \   00000256   0021               MOVS     R1,#+0
   \   00000258   0175               STRB     R1,[R0, #+20]
   1269             (temp_rec.deHighClust)[1]=0;
   \   0000025A   ........           LDR.W    R0,??DataTable24_1
   \   0000025E   0021               MOVS     R1,#+0
   \   00000260   4175               STRB     R1,[R0, #+21]
   1270             (temp_rec.deLowCluster)[0]=0;
   \   00000262   ........           LDR.W    R0,??DataTable24_1
   \   00000266   0021               MOVS     R1,#+0
   \   00000268   8176               STRB     R1,[R0, #+26]
   1271             (temp_rec.deLowCluster)[1]=0;
   \   0000026A   ........           LDR.W    R0,??DataTable24_1
   \   0000026E   0021               MOVS     R1,#+0
   \   00000270   C176               STRB     R1,[R0, #+27]
   \   00000272   0EE0               B.N      ??FAT32_Create_Rec_22
   1272            }
   1273            else
   1274            {
   1275             (temp_rec.deHighClust)[0]=(cluster&0x00ff0000)>>16;
   \                     ??FAT32_Create_Rec_21:
   \   00000274   280C               LSRS     R0,R5,#+16
   \   00000276   ........           LDR.W    R1,??DataTable24_1
   \   0000027A   0875               STRB     R0,[R1, #+20]
   1276             (temp_rec.deHighClust)[1]=(cluster&0xff000000)>>24;
   \   0000027C   280E               LSRS     R0,R5,#+24
   \   0000027E   ........           LDR.W    R1,??DataTable24_1
   \   00000282   4875               STRB     R0,[R1, #+21]
   1277             (temp_rec.deLowCluster)[0]=(cluster&0x000000ff);
   \   00000284   ........           LDR.W    R0,??DataTable24_1
   \   00000288   8576               STRB     R5,[R0, #+26]
   1278             (temp_rec.deLowCluster)[1]=(cluster&0x0000ff00)>>8;
   \   0000028A   280A               LSRS     R0,R5,#+8
   \   0000028C   ........           LDR.W    R1,??DataTable24_1
   \   00000290   C876               STRB     R0,[R1, #+27]
   1279            }
   1280              
   1281            for(i=sizeof(struct direntry);i<2*sizeof(struct direntry);i++)
   \                     ??FAT32_Create_Rec_22:
   \   00000292   2020               MOVS     R0,#+32
   \   00000294   08E0               B.N      ??FAT32_Create_Rec_23
   1282            {
   1283             FAT32_Buffer[i]=((uint8 *)(&temp_rec))[i-sizeof(struct direntry)]; 
   \                     ??FAT32_Create_Rec_24:
   \   00000296   ........           LDR.W    R1,??DataTable24_1
   \   0000029A   4118               ADDS     R1,R0,R1
   \   0000029C   11F8201C           LDRB     R1,[R1, #-32]
   \   000002A0   ........           LDR.W    R2,??DataTable23
   \   000002A4   8154               STRB     R1,[R0, R2]
   1284            }
   \   000002A6   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Create_Rec_23:
   \   000002A8   4028               CMP      R0,#+64
   \   000002AA   F4D3               BCC.N    ??FAT32_Create_Rec_24
   1285            for(;i<pArg->BytesPerSector;i++)
   \                     ??FAT32_Create_Rec_25:
   \   000002AC   ........           LDR.W    R1,??DataTable24
   \   000002B0   0968               LDR      R1,[R1, #+0]
   \   000002B2   C968               LDR      R1,[R1, #+12]
   \   000002B4   8842               CMP      R0,R1
   \   000002B6   05D2               BCS.N    ??FAT32_Create_Rec_26
   1286            {
   1287             FAT32_Buffer[i]=0;
   \   000002B8   ........           LDR.W    R1,??DataTable23
   \   000002BC   0022               MOVS     R2,#+0
   \   000002BE   4254               STRB     R2,[R0, R1]
   1288            }		
   \   000002C0   401C               ADDS     R0,R0,#+1
   \   000002C2   F3E7               B.N      ??FAT32_Create_Rec_25
   1289            temp_sec=SOC(new_clu);
   \                     ??FAT32_Create_Rec_26:
   \   000002C4   ........           LDR.W    R0,??DataTable24
   \   000002C8   0068               LDR      R0,[R0, #+0]
   \   000002CA   8068               LDR      R0,[R0, #+8]
   \   000002CC   201A               SUBS     R0,R4,R0
   \   000002CE   ........           LDR.W    R1,??DataTable24
   \   000002D2   0968               LDR      R1,[R1, #+0]
   \   000002D4   4969               LDR      R1,[R1, #+20]
   \   000002D6   ........           LDR.W    R2,??DataTable24
   \   000002DA   1268               LDR      R2,[R2, #+0]
   \   000002DC   D269               LDR      R2,[R2, #+28]
   \   000002DE   01FB0027           MLA      R7,R1,R0,R2
   1290            FAT32_WriteSector(temp_sec,FAT32_Buffer);
   \   000002E2   ........           LDR.W    R1,??DataTable23
   \   000002E6   3800               MOVS     R0,R7
   \   000002E8   ........           BL       FAT32_WriteSector
   \   000002EC   21E0               B.N      ??FAT32_Create_Rec_27
   1291           }
   1292           else
   1293           {
   1294            strcpy(pfi->FileName,name);
   \                     ??FAT32_Create_Rec_18:
   \   000002EE   0499               LDR      R1,[SP, #+16]
   \   000002F0   0398               LDR      R0,[SP, #+12]
   \   000002F2   ........           BL       strcpy
   1295            pfi->FileStartCluster=0;
   \   000002F6   0398               LDR      R0,[SP, #+12]
   \   000002F8   0021               MOVS     R1,#+0
   \   000002FA   C160               STR      R1,[R0, #+12]
   1296            pfi->FileCurCluster=0;
   \   000002FC   0398               LDR      R0,[SP, #+12]
   \   000002FE   0021               MOVS     R1,#+0
   \   00000300   0161               STR      R1,[R0, #+16]
   1297            pfi->FileSize=0;
   \   00000302   0398               LDR      R0,[SP, #+12]
   \   00000304   0021               MOVS     R1,#+0
   \   00000306   4161               STR      R1,[R0, #+20]
   1298            pfi->FileCurSector=0;
   \   00000308   0398               LDR      R0,[SP, #+12]
   \   0000030A   0021               MOVS     R1,#+0
   \   0000030C   8161               STR      R1,[R0, #+24]
   1299            pfi->FileCurPos=0;
   \   0000030E   0398               LDR      R0,[SP, #+12]
   \   00000310   0021               MOVS     R1,#+0
   \   00000312   8183               STRH     R1,[R0, #+28]
   1300            pfi->FileCurOffset=0;
   \   00000314   0398               LDR      R0,[SP, #+12]
   \   00000316   0021               MOVS     R1,#+0
   \   00000318   0162               STR      R1,[R0, #+32]
   1301            pfi->Rec_Sec=temp_sec;
   \   0000031A   0398               LDR      R0,[SP, #+12]
   \   0000031C   4762               STR      R7,[R0, #+36]
   1302            pfi->nRec=temp_Rec;
   \   0000031E   0398               LDR      R0,[SP, #+12]
   \   00000320   BDF80010           LDRH     R1,[SP, #+0]
   \   00000324   0185               STRH     R1,[R0, #+40]
   1303          
   1304            pfi->FileAttr=temp_rec.deAttributes;
   \   00000326   0398               LDR      R0,[SP, #+12]
   \   00000328   ........           LDR.W    R1,??DataTable24_1
   \   0000032C   C97A               LDRB     R1,[R1, #+11]
   \   0000032E   80F82A10           STRB     R1,[R0, #+42]
   1305           }
   1306           FAT32_Find_Free_Clust(1);
   \                     ??FAT32_Create_Rec_27:
   \   00000332   0120               MOVS     R0,#+1
   \   00000334   ........           BL       FAT32_Find_Free_Clust
   1307           return 1;
   \   00000338   0120               MOVS     R0,#+1
   \                     ??FAT32_Create_Rec_10:
   \   0000033A   05B0               ADD      SP,SP,#+20
   \   0000033C   BDE8F08F           POP      {R4-R11,PC}      ;; return
   1308          }
   1309          
   1310          /**************************************************************************
   1311           - 功能描述：向某一个文件追加数据
   1312           - 隶属模块：znFAT文件系统模块
   1313           - 函数属性：外部，使用户使用
   1314           - 参数说明：pfi:指向FileInfoStruct类型的结构体，用于装载刚创建的文件的信息
   1315                       len:要追加的数据长度
   1316                       pbuf:指向数据缓冲区的指针
   1317           - 返回说明：成功返回实际写入的数据长度，失败返回0
   1318           - 注：追加数据失败很有可能是存储设备已经没有空间了，也就是找不到空闲簇了
   1319           **************************************************************************/
   1320          

   \                                 In section .text, align 2, keep-with-next
   1321          uint32 FAT32_Add_Dat(struct FileInfoStruct *pfi,uint32 len,uint8 *pbuf)
   1322          {
   \                     FAT32_Add_Dat:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   9046               MOV      R8,R2
   1323           uint32 i=0,counter=0,iSec,iClu;
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   5FF00009           MOVS     R9,#+0
   1324           uint32 temp_sub,temp_file_size,new_clu,temp_sec;
   1325           struct direntry *prec;
   1326           if(len>0)
   \   00000010   002D               CMP      R5,#+0
   \   00000012   00F0D281           BEQ.W    ??FAT32_Add_Dat_0
   1327           {
   1328            FAT32_ReadSector(pfi->Rec_Sec,FAT32_Buffer);
   \   00000016   ........           LDR.W    R1,??DataTable23
   \   0000001A   606A               LDR      R0,[R4, #+36]
   \   0000001C   ........           BL       FAT32_ReadSector
   1329            prec=(struct direntry *)(FAT32_Buffer+pfi->nRec);
   \   00000020   208D               LDRH     R0,[R4, #+40]
   \   00000022   ........           LDR.W    R1,??DataTable23
   \   00000026   10EB010A           ADDS     R10,R0,R1
   1330            temp_file_size=LE2BE((prec->deFileSize),4);
   \   0000002A   0421               MOVS     R1,#+4
   \   0000002C   1AF11C00           ADDS     R0,R10,#+28
   \   00000030   ........           BL       LE2BE
   \   00000034   0600               MOVS     R6,R0
   1331            if(!temp_file_size)
   \   00000036   002E               CMP      R6,#+0
   \   00000038   3CD1               BNE.N    ??FAT32_Add_Dat_1
   1332            {   
   1333             if(!(new_clu=FAT32_Find_Free_Clust(0))) return 0;
   \   0000003A   0020               MOVS     R0,#+0
   \   0000003C   ........           BL       FAT32_Find_Free_Clust
   \   00000040   0700               MOVS     R7,R0
   \   00000042   002F               CMP      R7,#+0
   \   00000044   01D1               BNE.N    ??FAT32_Add_Dat_2
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   BBE1               B.N      ??FAT32_Add_Dat_3
   1334             FAT32_Modify_FAT(new_clu,0x0fffffff);
   \                     ??FAT32_Add_Dat_2:
   \   0000004A   7FF07041           MVNS     R1,#-268435456
   \   0000004E   3800               MOVS     R0,R7
   \   00000050   ........           BL       FAT32_Modify_FAT
   1335             pfi->FileStartCluster=new_clu;
   \   00000054   E760               STR      R7,[R4, #+12]
   1336             pfi->FileCurCluster=pfi->FileStartCluster;
   \   00000056   E068               LDR      R0,[R4, #+12]
   \   00000058   2061               STR      R0,[R4, #+16]
   1337             pfi->FileSize=0;
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   6061               STR      R0,[R4, #+20]
   1338             pfi->FileCurSector=SOC(pfi->FileCurCluster);
   \   0000005E   2069               LDR      R0,[R4, #+16]
   \   00000060   ........           LDR.W    R1,??DataTable24
   \   00000064   0968               LDR      R1,[R1, #+0]
   \   00000066   8968               LDR      R1,[R1, #+8]
   \   00000068   401A               SUBS     R0,R0,R1
   \   0000006A   ........           LDR.W    R1,??DataTable24
   \   0000006E   0968               LDR      R1,[R1, #+0]
   \   00000070   4969               LDR      R1,[R1, #+20]
   \   00000072   ........           LDR.W    R2,??DataTable24
   \   00000076   1268               LDR      R2,[R2, #+0]
   \   00000078   D269               LDR      R2,[R2, #+28]
   \   0000007A   01FB0020           MLA      R0,R1,R0,R2
   \   0000007E   A061               STR      R0,[R4, #+24]
   1339             pfi->FileCurPos=0;
   \   00000080   0020               MOVS     R0,#+0
   \   00000082   A083               STRH     R0,[R4, #+28]
   1340             pfi->FileCurOffset=0;
   \   00000084   0020               MOVS     R0,#+0
   \   00000086   2062               STR      R0,[R4, #+32]
   1341             FAT32_ReadSector(pfi->Rec_Sec,FAT32_Buffer);
   \   00000088   ........           LDR.W    R1,??DataTable23
   \   0000008C   606A               LDR      R0,[R4, #+36]
   \   0000008E   ........           BL       FAT32_ReadSector
   1342             (prec->deHighClust)[0]=(new_clu&0x00ff0000)>>16;
   \   00000092   380C               LSRS     R0,R7,#+16
   \   00000094   8AF81400           STRB     R0,[R10, #+20]
   1343             (prec->deHighClust)[1]=(new_clu&0xff000000)>>24;
   \   00000098   380E               LSRS     R0,R7,#+24
   \   0000009A   8AF81500           STRB     R0,[R10, #+21]
   1344             (prec->deLowCluster)[0]=(new_clu&0x000000ff);
   \   0000009E   8AF81A70           STRB     R7,[R10, #+26]
   1345             (prec->deLowCluster)[1]=(new_clu&0x0000ff00)>>8;
   \   000000A2   380A               LSRS     R0,R7,#+8
   \   000000A4   8AF81B00           STRB     R0,[R10, #+27]
   1346             FAT32_WriteSector(pfi->Rec_Sec,FAT32_Buffer);
   \   000000A8   ........           LDR.W    R1,??DataTable23
   \   000000AC   606A               LDR      R0,[R4, #+36]
   \   000000AE   ........           BL       FAT32_WriteSector
   \   000000B2   28E0               B.N      ??FAT32_Add_Dat_4
   1347            }
   1348            else
   1349            {
   1350             if(!(temp_file_size%(pArg->SectorsPerClust*pArg->BytesPerSector))) //在簇的最末尾临界地方，需要寻找新簇
   \                     ??FAT32_Add_Dat_1:
   \   000000B4   ........           LDR.W    R0,??DataTable24
   \   000000B8   0068               LDR      R0,[R0, #+0]
   \   000000BA   4069               LDR      R0,[R0, #+20]
   \   000000BC   ........           LDR.W    R1,??DataTable24
   \   000000C0   0968               LDR      R1,[R1, #+0]
   \   000000C2   C968               LDR      R1,[R1, #+12]
   \   000000C4   4843               MULS     R0,R1,R0
   \   000000C6   B6FBF0F1           UDIV     R1,R6,R0
   \   000000CA   00FB1160           MLS      R0,R0,R1,R6
   \   000000CE   0028               CMP      R0,#+0
   \   000000D0   15D1               BNE.N    ??FAT32_Add_Dat_5
   1351             {
   1352              FAT32_Seek_File(pfi,pfi->FileSize-1);
   \   000000D2   6069               LDR      R0,[R4, #+20]
   \   000000D4   411E               SUBS     R1,R0,#+1
   \   000000D6   2000               MOVS     R0,R4
   \   000000D8   ........           BL       FAT32_Seek_File
   1353              if(!(new_clu=FAT32_Find_Free_Clust(0))) return 0;
   \   000000DC   0020               MOVS     R0,#+0
   \   000000DE   ........           BL       FAT32_Find_Free_Clust
   \   000000E2   0700               MOVS     R7,R0
   \   000000E4   002F               CMP      R7,#+0
   \   000000E6   01D1               BNE.N    ??FAT32_Add_Dat_6
   \   000000E8   0020               MOVS     R0,#+0
   \   000000EA   6AE1               B.N      ??FAT32_Add_Dat_3
   1354          	FAT32_Modify_FAT(pfi->FileCurCluster,new_clu);
   \                     ??FAT32_Add_Dat_6:
   \   000000EC   3900               MOVS     R1,R7
   \   000000EE   2069               LDR      R0,[R4, #+16]
   \   000000F0   ........           BL       FAT32_Modify_FAT
   1355              FAT32_Modify_FAT(new_clu,0x0fffffff);     
   \   000000F4   7FF07041           MVNS     R1,#-268435456
   \   000000F8   3800               MOVS     R0,R7
   \   000000FA   ........           BL       FAT32_Modify_FAT
   1356             }
   1357             FAT32_Seek_File(pfi,pfi->FileSize);
   \                     ??FAT32_Add_Dat_5:
   \   000000FE   6169               LDR      R1,[R4, #+20]
   \   00000100   2000               MOVS     R0,R4
   \   00000102   ........           BL       FAT32_Seek_File
   1358            }
   1359          
   1360            iSec=pfi->FileCurSector;
   \                     ??FAT32_Add_Dat_4:
   \   00000106   A769               LDR      R7,[R4, #+24]
   1361          
   1362            FAT32_ReadSector(iSec,FAT32_Buffer);
   \   00000108   ........           LDR.W    R1,??DataTable23
   \   0000010C   3800               MOVS     R0,R7
   \   0000010E   ........           BL       FAT32_ReadSector
   1363            for(i=pfi->FileCurPos;i<pArg->BytesPerSector;i++)
   \   00000112   A08B               LDRH     R0,[R4, #+28]
   \   00000114   00E0               B.N      ??FAT32_Add_Dat_7
   \                     ??FAT32_Add_Dat_8:
   \   00000116   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Add_Dat_7:
   \   00000118   ........           LDR.W    R1,??DataTable24
   \   0000011C   0968               LDR      R1,[R1, #+0]
   \   0000011E   C968               LDR      R1,[R1, #+12]
   \   00000120   8842               CMP      R0,R1
   \   00000122   0AD2               BCS.N    ??FAT32_Add_Dat_9
   1364            {
   1365             FAT32_Buffer[i]=pbuf[counter];
   \   00000124   19F80810           LDRB     R1,[R9, R8]
   \   00000128   ........           LDR.W    R2,??DataTable23
   \   0000012C   8154               STRB     R1,[R0, R2]
   1366             counter++;
   \   0000012E   19F10109           ADDS     R9,R9,#+1
   1367             if(counter>=len) 
   \   00000132   A945               CMP      R9,R5
   \   00000134   EFD3               BCC.N    ??FAT32_Add_Dat_8
   1368             {
   1369              iSec=pfi->FileCurSector;
   \   00000136   A769               LDR      R7,[R4, #+24]
   1370              goto end;
   \   00000138   03E1               B.N      ??FAT32_Add_Dat_10
   1371             }
   1372            }
   1373            FAT32_WriteSector(pfi->FileCurSector,FAT32_Buffer); //数据接缝  
   \                     ??FAT32_Add_Dat_9:
   \   0000013A   ........           LDR.W    R1,??DataTable23
   \   0000013E   A069               LDR      R0,[R4, #+24]
   \   00000140   ........           BL       FAT32_WriteSector
   1374            
   1375            if(pfi->FileCurSector-(SOC(pfi->FileCurCluster))<(pArg->SectorsPerClust-1)) //判断是不是一个簇的最后一个扇区,先将当前簇所有扇区填满 
   \   00000144   A069               LDR      R0,[R4, #+24]
   \   00000146   ........           LDR.W    R1,??DataTable24
   \   0000014A   0968               LDR      R1,[R1, #+0]
   \   0000014C   4969               LDR      R1,[R1, #+20]
   \   0000014E   ........           LDR.W    R2,??DataTable24
   \   00000152   1268               LDR      R2,[R2, #+0]
   \   00000154   9268               LDR      R2,[R2, #+8]
   \   00000156   2369               LDR      R3,[R4, #+16]
   \   00000158   D21A               SUBS     R2,R2,R3
   \   0000015A   02FB0100           MLA      R0,R2,R1,R0
   \   0000015E   ........           LDR.W    R1,??DataTable24
   \   00000162   0968               LDR      R1,[R1, #+0]
   \   00000164   C969               LDR      R1,[R1, #+28]
   \   00000166   401A               SUBS     R0,R0,R1
   \   00000168   ........           LDR.W    R1,??DataTable24
   \   0000016C   0968               LDR      R1,[R1, #+0]
   \   0000016E   4969               LDR      R1,[R1, #+20]
   \   00000170   491E               SUBS     R1,R1,#+1
   \   00000172   8842               CMP      R0,R1
   \   00000174   33D2               BCS.N    ??FAT32_Add_Dat_11
   1376            {
   1377             for(iSec=pfi->FileCurSector+1;iSec<=(SOC(pfi->FileCurCluster)+pArg->SectorsPerClust-1);iSec++)
   \   00000176   A069               LDR      R0,[R4, #+24]
   \   00000178   471C               ADDS     R7,R0,#+1
   \   0000017A   05E0               B.N      ??FAT32_Add_Dat_12
   1378             {
   1379              for(i=0;i<pArg->BytesPerSector;i++)
   1380              {
   1381          	 FAT32_Buffer[i]=pbuf[counter];
   1382          	 counter++;
   1383               if(counter>=len) 
   1384          	 {
   1385          	  goto end;
   1386          	 }
   1387              }
   1388              FAT32_WriteSector(iSec,FAT32_Buffer);
   \                     ??FAT32_Add_Dat_13:
   \   0000017C   ........           LDR.W    R1,??DataTable23
   \   00000180   3800               MOVS     R0,R7
   \   00000182   ........           BL       FAT32_WriteSector
   \   00000186   7F1C               ADDS     R7,R7,#+1
   \                     ??FAT32_Add_Dat_12:
   \   00000188   2069               LDR      R0,[R4, #+16]
   \   0000018A   ........           LDR.W    R1,??DataTable24
   \   0000018E   0968               LDR      R1,[R1, #+0]
   \   00000190   8968               LDR      R1,[R1, #+8]
   \   00000192   401A               SUBS     R0,R0,R1
   \   00000194   ........           LDR.W    R1,??DataTable24
   \   00000198   0968               LDR      R1,[R1, #+0]
   \   0000019A   4969               LDR      R1,[R1, #+20]
   \   0000019C   ........           LDR.W    R2,??DataTable24
   \   000001A0   1268               LDR      R2,[R2, #+0]
   \   000001A2   D269               LDR      R2,[R2, #+28]
   \   000001A4   01FB0020           MLA      R0,R1,R0,R2
   \   000001A8   ........           LDR.W    R1,??DataTable24
   \   000001AC   0968               LDR      R1,[R1, #+0]
   \   000001AE   4969               LDR      R1,[R1, #+20]
   \   000001B0   0818               ADDS     R0,R1,R0
   \   000001B2   401E               SUBS     R0,R0,#+1
   \   000001B4   B842               CMP      R0,R7
   \   000001B6   12D3               BCC.N    ??FAT32_Add_Dat_11
   \   000001B8   0020               MOVS     R0,#+0
   \   000001BA   00E0               B.N      ??FAT32_Add_Dat_14
   \                     ??FAT32_Add_Dat_15:
   \   000001BC   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Add_Dat_14:
   \   000001BE   ........           LDR.W    R1,??DataTable24
   \   000001C2   0968               LDR      R1,[R1, #+0]
   \   000001C4   C968               LDR      R1,[R1, #+12]
   \   000001C6   8842               CMP      R0,R1
   \   000001C8   D8D2               BCS.N    ??FAT32_Add_Dat_13
   \   000001CA   19F80810           LDRB     R1,[R9, R8]
   \   000001CE   ........           LDR.W    R2,??DataTable23
   \   000001D2   8154               STRB     R1,[R0, R2]
   \   000001D4   19F10109           ADDS     R9,R9,#+1
   \   000001D8   A945               CMP      R9,R5
   \   000001DA   EFD3               BCC.N    ??FAT32_Add_Dat_15
   \   000001DC   B1E0               B.N      ??FAT32_Add_Dat_10
   1389             }
   1390            }
   1391            
   1392            temp_sub=len-counter;
   \                     ??FAT32_Add_Dat_11:
   \   000001DE   B5EB0900           SUBS     R0,R5,R9
   \   000001E2   0090               STR      R0,[SP, #+0]
   1393            for(iClu=0;iClu<temp_sub/(pArg->SectorsPerClust*pArg->BytesPerSector);iClu++)
   \   000001E4   5FF0000A           MOVS     R10,#+0
   \   000001E8   01E0               B.N      ??FAT32_Add_Dat_16
   \                     ??FAT32_Add_Dat_17:
   \   000001EA   1AF1010A           ADDS     R10,R10,#+1
   \                     ??FAT32_Add_Dat_16:
   \   000001EE   0098               LDR      R0,[SP, #+0]
   \   000001F0   ........           LDR.W    R1,??DataTable24
   \   000001F4   0968               LDR      R1,[R1, #+0]
   \   000001F6   4969               LDR      R1,[R1, #+20]
   \   000001F8   ........           LDR.W    R2,??DataTable24
   \   000001FC   1268               LDR      R2,[R2, #+0]
   \   000001FE   D268               LDR      R2,[R2, #+12]
   \   00000200   5143               MULS     R1,R2,R1
   \   00000202   B0FBF1F0           UDIV     R0,R0,R1
   \   00000206   8245               CMP      R10,R0
   \   00000208   3ED2               BCS.N    ??FAT32_Add_Dat_18
   1394            {
   1395             if(!(new_clu=FAT32_Find_Free_Clust(0))) return 0;
   \   0000020A   0020               MOVS     R0,#+0
   \   0000020C   ........           BL       FAT32_Find_Free_Clust
   \   00000210   0700               MOVS     R7,R0
   \   00000212   002F               CMP      R7,#+0
   \   00000214   01D1               BNE.N    ??FAT32_Add_Dat_19
   \   00000216   0020               MOVS     R0,#+0
   \   00000218   D3E0               B.N      ??FAT32_Add_Dat_3
   1396             FAT32_Modify_FAT(pfi->FileCurCluster,new_clu);
   \                     ??FAT32_Add_Dat_19:
   \   0000021A   3900               MOVS     R1,R7
   \   0000021C   2069               LDR      R0,[R4, #+16]
   \   0000021E   ........           BL       FAT32_Modify_FAT
   1397             FAT32_Modify_FAT(new_clu,0x0fffffff);
   \   00000222   7FF07041           MVNS     R1,#-268435456
   \   00000226   3800               MOVS     R0,R7
   \   00000228   ........           BL       FAT32_Modify_FAT
   1398             pfi->FileCurCluster=new_clu;
   \   0000022C   2761               STR      R7,[R4, #+16]
   1399          
   1400             temp_sec=SOC(new_clu);
   \   0000022E   ........           LDR.W    R0,??DataTable24
   \   00000232   0068               LDR      R0,[R0, #+0]
   \   00000234   8068               LDR      R0,[R0, #+8]
   \   00000236   381A               SUBS     R0,R7,R0
   \   00000238   ........           LDR.W    R1,??DataTable24
   \   0000023C   0968               LDR      R1,[R1, #+0]
   \   0000023E   4969               LDR      R1,[R1, #+20]
   \   00000240   ........           LDR.W    R2,??DataTable24
   \   00000244   1268               LDR      R2,[R2, #+0]
   \   00000246   D269               LDR      R2,[R2, #+28]
   \   00000248   01FB002B           MLA      R11,R1,R0,R2
   1401             for(iSec=temp_sec;iSec<temp_sec+pArg->SectorsPerClust;iSec++)
   \   0000024C   5F46               MOV      R7,R11
   \   0000024E   11E0               B.N      ??FAT32_Add_Dat_20
   1402             {
   1403              for(i=0;i<pArg->BytesPerSector;i++)
   1404          	{
   1405             	 FAT32_Buffer[i]=pbuf[counter];
   \                     ??FAT32_Add_Dat_21:
   \   00000250   19F80810           LDRB     R1,[R9, R8]
   \   00000254   ....               LDR.N    R2,??DataTable23
   \   00000256   8154               STRB     R1,[R0, R2]
   1406          	 counter++;
   \   00000258   19F10109           ADDS     R9,R9,#+1
   1407          	} 
   \   0000025C   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Add_Dat_22:
   \   0000025E   ........           LDR.W    R1,??DataTable24
   \   00000262   0968               LDR      R1,[R1, #+0]
   \   00000264   C968               LDR      R1,[R1, #+12]
   \   00000266   8842               CMP      R0,R1
   \   00000268   F2D3               BCC.N    ??FAT32_Add_Dat_21
   1408          	FAT32_WriteSector(iSec,FAT32_Buffer);
   \   0000026A   ....               LDR.N    R1,??DataTable23
   \   0000026C   3800               MOVS     R0,R7
   \   0000026E   ........           BL       FAT32_WriteSector
   \   00000272   7F1C               ADDS     R7,R7,#+1
   \                     ??FAT32_Add_Dat_20:
   \   00000274   ........           LDR.W    R0,??DataTable24
   \   00000278   0068               LDR      R0,[R0, #+0]
   \   0000027A   4069               LDR      R0,[R0, #+20]
   \   0000027C   10EB0B00           ADDS     R0,R0,R11
   \   00000280   8742               CMP      R7,R0
   \   00000282   B2D2               BCS.N    ??FAT32_Add_Dat_17
   \   00000284   0020               MOVS     R0,#+0
   \   00000286   EAE7               B.N      ??FAT32_Add_Dat_22
   1409             }
   1410            }
   1411          
   1412            temp_sub=len-counter;
   \                     ??FAT32_Add_Dat_18:
   \   00000288   B5EB0900           SUBS     R0,R5,R9
   \   0000028C   0090               STR      R0,[SP, #+0]
   1413            if(temp_sub)
   \   0000028E   0098               LDR      R0,[SP, #+0]
   \   00000290   0028               CMP      R0,#+0
   \   00000292   3ED0               BEQ.N    ??FAT32_Add_Dat_23
   1414            {
   1415             if(!(new_clu=FAT32_Find_Free_Clust(0))) return 0;
   \   00000294   0020               MOVS     R0,#+0
   \   00000296   ........           BL       FAT32_Find_Free_Clust
   \   0000029A   0700               MOVS     R7,R0
   \   0000029C   002F               CMP      R7,#+0
   \   0000029E   01D1               BNE.N    ??FAT32_Add_Dat_24
   \   000002A0   0020               MOVS     R0,#+0
   \   000002A2   8EE0               B.N      ??FAT32_Add_Dat_3
   1416             FAT32_Modify_FAT(pfi->FileCurCluster,new_clu);
   \                     ??FAT32_Add_Dat_24:
   \   000002A4   3900               MOVS     R1,R7
   \   000002A6   2069               LDR      R0,[R4, #+16]
   \   000002A8   ........           BL       FAT32_Modify_FAT
   1417             FAT32_Modify_FAT(new_clu,0x0fffffff);
   \   000002AC   7FF07041           MVNS     R1,#-268435456
   \   000002B0   3800               MOVS     R0,R7
   \   000002B2   ........           BL       FAT32_Modify_FAT
   1418             pfi->FileCurCluster=new_clu;
   \   000002B6   2761               STR      R7,[R4, #+16]
   1419             temp_sec=SOC(new_clu);
   \   000002B8   ........           LDR.W    R0,??DataTable24
   \   000002BC   0068               LDR      R0,[R0, #+0]
   \   000002BE   8068               LDR      R0,[R0, #+8]
   \   000002C0   381A               SUBS     R0,R7,R0
   \   000002C2   ........           LDR.W    R1,??DataTable24
   \   000002C6   0968               LDR      R1,[R1, #+0]
   \   000002C8   4969               LDR      R1,[R1, #+20]
   \   000002CA   ....               LDR.N    R2,??DataTable24
   \   000002CC   1268               LDR      R2,[R2, #+0]
   \   000002CE   D269               LDR      R2,[R2, #+28]
   \   000002D0   01FB002B           MLA      R11,R1,R0,R2
   1420             for(iSec=temp_sec;iSec<temp_sec+temp_sub/pArg->BytesPerSector;iSec++)
   \   000002D4   5F46               MOV      R7,R11
   \   000002D6   10E0               B.N      ??FAT32_Add_Dat_25
   1421             {
   1422              for(i=0;i<pArg->BytesPerSector;i++)
   1423          	{
   1424             	 FAT32_Buffer[i]=pbuf[counter];
   \                     ??FAT32_Add_Dat_26:
   \   000002D8   19F80810           LDRB     R1,[R9, R8]
   \   000002DC   ....               LDR.N    R2,??DataTable23
   \   000002DE   8154               STRB     R1,[R0, R2]
   1425          	 counter++;
   \   000002E0   19F10109           ADDS     R9,R9,#+1
   1426          	} 
   \   000002E4   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Add_Dat_27:
   \   000002E6   ....               LDR.N    R1,??DataTable24
   \   000002E8   0968               LDR      R1,[R1, #+0]
   \   000002EA   C968               LDR      R1,[R1, #+12]
   \   000002EC   8842               CMP      R0,R1
   \   000002EE   F3D3               BCC.N    ??FAT32_Add_Dat_26
   1427          	FAT32_WriteSector(iSec,FAT32_Buffer);    
   \   000002F0   ....               LDR.N    R1,??DataTable23
   \   000002F2   3800               MOVS     R0,R7
   \   000002F4   ........           BL       FAT32_WriteSector
   \   000002F8   7F1C               ADDS     R7,R7,#+1
   \                     ??FAT32_Add_Dat_25:
   \   000002FA   0098               LDR      R0,[SP, #+0]
   \   000002FC   ....               LDR.N    R1,??DataTable24
   \   000002FE   0968               LDR      R1,[R1, #+0]
   \   00000300   C968               LDR      R1,[R1, #+12]
   \   00000302   B0FBF1F0           UDIV     R0,R0,R1
   \   00000306   10EB0B00           ADDS     R0,R0,R11
   \   0000030A   8742               CMP      R7,R0
   \   0000030C   01D2               BCS.N    ??FAT32_Add_Dat_23
   \   0000030E   0020               MOVS     R0,#+0
   \   00000310   E9E7               B.N      ??FAT32_Add_Dat_27
   1428             }   
   1429            }
   1430          
   1431            temp_sub=len-counter;
   \                     ??FAT32_Add_Dat_23:
   \   00000312   B5EB0900           SUBS     R0,R5,R9
   \   00000316   0090               STR      R0,[SP, #+0]
   1432            if(temp_sub)
   \   00000318   0098               LDR      R0,[SP, #+0]
   \   0000031A   0028               CMP      R0,#+0
   \   0000031C   11D0               BEQ.N    ??FAT32_Add_Dat_10
   1433            {
   1434             for(i=0;i<pArg->BytesPerSector;i++)
   \   0000031E   0020               MOVS     R0,#+0
   \   00000320   06E0               B.N      ??FAT32_Add_Dat_28
   1435             {
   1436             	FAT32_Buffer[i]=pbuf[counter];
   \                     ??FAT32_Add_Dat_29:
   \   00000322   19F80810           LDRB     R1,[R9, R8]
   \   00000326   ....               LDR.N    R2,??DataTable23
   \   00000328   8154               STRB     R1,[R0, R2]
   1437          	counter++;
   \   0000032A   19F10109           ADDS     R9,R9,#+1
   1438             } 
   \   0000032E   401C               ADDS     R0,R0,#+1
   \                     ??FAT32_Add_Dat_28:
   \   00000330   ....               LDR.N    R1,??DataTable24
   \   00000332   0968               LDR      R1,[R1, #+0]
   \   00000334   C968               LDR      R1,[R1, #+12]
   \   00000336   8842               CMP      R0,R1
   \   00000338   F3D3               BCC.N    ??FAT32_Add_Dat_29
   1439             FAT32_WriteSector(iSec,FAT32_Buffer);   
   \   0000033A   ....               LDR.N    R1,??DataTable23
   \   0000033C   3800               MOVS     R0,R7
   \   0000033E   ........           BL       FAT32_WriteSector
   1440            }
   1441          end:
   1442            FAT32_WriteSector(iSec,FAT32_Buffer);
   \                     ??FAT32_Add_Dat_10:
   \   00000342   ....               LDR.N    R1,??DataTable23
   \   00000344   3800               MOVS     R0,R7
   \   00000346   ........           BL       FAT32_WriteSector
   1443            FAT32_ReadSector(pfi->Rec_Sec,FAT32_Buffer);
   \   0000034A   ....               LDR.N    R1,??DataTable23
   \   0000034C   606A               LDR      R0,[R4, #+36]
   \   0000034E   ........           BL       FAT32_ReadSector
   1444            (((struct direntry *)(FAT32_Buffer+pfi->nRec))->deFileSize)[0]=((temp_file_size+len)&0x000000ff);
   \   00000352   208D               LDRH     R0,[R4, #+40]
   \   00000354   ....               LDR.N    R1,??DataTable23
   \   00000356   4018               ADDS     R0,R0,R1
   \   00000358   A919               ADDS     R1,R5,R6
   \   0000035A   0177               STRB     R1,[R0, #+28]
   1445            (((struct direntry *)(FAT32_Buffer+pfi->nRec))->deFileSize)[1]=((temp_file_size+len)&0x0000ff00)>>8;
   \   0000035C   208D               LDRH     R0,[R4, #+40]
   \   0000035E   ....               LDR.N    R1,??DataTable23
   \   00000360   4018               ADDS     R0,R0,R1
   \   00000362   A919               ADDS     R1,R5,R6
   \   00000364   090A               LSRS     R1,R1,#+8
   \   00000366   4177               STRB     R1,[R0, #+29]
   1446            (((struct direntry *)(FAT32_Buffer+pfi->nRec))->deFileSize)[2]=((temp_file_size+len)&0x00ff0000)>>16;
   \   00000368   208D               LDRH     R0,[R4, #+40]
   \   0000036A   ....               LDR.N    R1,??DataTable23
   \   0000036C   4018               ADDS     R0,R0,R1
   \   0000036E   A919               ADDS     R1,R5,R6
   \   00000370   090C               LSRS     R1,R1,#+16
   \   00000372   8177               STRB     R1,[R0, #+30]
   1447            (((struct direntry *)(FAT32_Buffer+pfi->nRec))->deFileSize)[3]=((temp_file_size+len)&0xff000000)>>24;
   \   00000374   208D               LDRH     R0,[R4, #+40]
   \   00000376   ....               LDR.N    R1,??DataTable23
   \   00000378   4018               ADDS     R0,R0,R1
   \   0000037A   A919               ADDS     R1,R5,R6
   \   0000037C   090E               LSRS     R1,R1,#+24
   \   0000037E   C177               STRB     R1,[R0, #+31]
   1448            FAT32_WriteSector(pfi->Rec_Sec,FAT32_Buffer);
   \   00000380   ....               LDR.N    R1,??DataTable23
   \   00000382   606A               LDR      R0,[R4, #+36]
   \   00000384   ........           BL       FAT32_WriteSector
   1449          
   1450            pfi->FileSize=(temp_file_size+len);
   \   00000388   A819               ADDS     R0,R5,R6
   \   0000038A   6061               STR      R0,[R4, #+20]
   1451            pfi->FileCurSector=(pfi->FileSize%pArg->BytesPerSector)?iSec:iSec+1;
   \   0000038C   6069               LDR      R0,[R4, #+20]
   \   0000038E   ....               LDR.N    R1,??DataTable24
   \   00000390   0968               LDR      R1,[R1, #+0]
   \   00000392   C968               LDR      R1,[R1, #+12]
   \   00000394   B0FBF1F2           UDIV     R2,R0,R1
   \   00000398   01FB1200           MLS      R0,R1,R2,R0
   \   0000039C   0028               CMP      R0,#+0
   \   0000039E   00D1               BNE.N    ??FAT32_Add_Dat_30
   \                     ??FAT32_Add_Dat_31:
   \   000003A0   7F1C               ADDS     R7,R7,#+1
   \                     ??FAT32_Add_Dat_30:
   \   000003A2   A761               STR      R7,[R4, #+24]
   1452            pfi->FileCurPos=pfi->FileSize%pArg->BytesPerSector;
   \   000003A4   6069               LDR      R0,[R4, #+20]
   \   000003A6   ....               LDR.N    R1,??DataTable24
   \   000003A8   0968               LDR      R1,[R1, #+0]
   \   000003AA   C968               LDR      R1,[R1, #+12]
   \   000003AC   B0FBF1F2           UDIV     R2,R0,R1
   \   000003B0   01FB1200           MLS      R0,R1,R2,R0
   \   000003B4   A083               STRH     R0,[R4, #+28]
   1453            pfi->FileCurOffset=pfi->FileSize;
   \   000003B6   6069               LDR      R0,[R4, #+20]
   \   000003B8   2062               STR      R0,[R4, #+32]
   1454           }
   1455           FAT32_Find_Free_Clust(1);
   \                     ??FAT32_Add_Dat_0:
   \   000003BA   0120               MOVS     R0,#+1
   \   000003BC   ........           BL       FAT32_Find_Free_Clust
   1456           return len;
   \   000003C0   2800               MOVS     R0,R5
   \                     ??FAT32_Add_Dat_3:
   \   000003C2   BDE8F28F           POP      {R1,R4-R11,PC}   ;; return
   1457          }
   1458          
   1459          /**************************************************************************
   1460           - 功能描述：创建目录(支持任意层目录创建)
   1461           - 隶属模块：znFAT文件系统模块
   1462           - 函数属性：外部，使用户使用
   1463           - 参数说明：pfi:无用
   1464                       dirpath:目录路径 比如 "\\dir1\\dir2\\dir3\\....\\dirn\\"
   1465                       最后必须是\\结束
   1466           - 返回说明：成功返回0，失败返回1
   1467           - 注：如果中间某一级目录不存在，比如上面的这个路径中dir3不存在，那么此函数会
   1468                 创建这个目录，然后再继续去创建更深层的目录
   1469                 创建目录失败有可能是因为存储设备空间不足
   1470           **************************************************************************/
   1471          

   \                                 In section .text, align 2, keep-with-next
   1472          uint8 FAT32_Create_Dir(struct FileInfoStruct *pfi,int8 *dirpath,uint8 *ptd)
   1473          {
   \                     FAT32_Create_Dir:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
   \   0000000A   07E0               B.N      ??FAT32_Create_Dir_0
   1474           while(!FAT32_Enter_Dir(dirpath))
   1475           {
   1476            if(FAT32_Create_Rec(pfi,temp_dir_cluster,temp_dir_name,1,ptd)==-1)
   \                     ??FAT32_Create_Dir_1:
   \   0000000C   0096               STR      R6,[SP, #+0]
   \   0000000E   0123               MOVS     R3,#+1
   \   00000010   ....               LDR.N    R2,??DataTable24_2
   \   00000012   ....               LDR.N    R0,??DataTable24_3
   \   00000014   0168               LDR      R1,[R0, #+0]
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       FAT32_Create_Rec
   1477            {
   1478             return 1;
   1479            }
   1480           }
   \                     ??FAT32_Create_Dir_0:
   \   0000001C   2800               MOVS     R0,R5
   \   0000001E   ........           BL       FAT32_Enter_Dir
   \   00000022   0028               CMP      R0,#+0
   \   00000024   F2D0               BEQ.N    ??FAT32_Create_Dir_1
   1481           return 0;
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   76BD               POP      {R1,R2,R4-R6,PC}  ;; return
   1482          }
   1483          
   1484          /**************************************************************************
   1485           - 功能描述：创建文件(支持任意层目录创建)
   1486           - 隶属模块：znFAT文件系统模块
   1487           - 函数属性：外部，使用户使用
   1488           - 参数说明：pfi:一个指向FileInfoStruct类型的结构体的指针，用来装载新创建的
   1489                       文件信息，因此新创建的文件不用再打开就可以直接来操作
   1490                       filepath:文件路径 比如 "\\dir1\\dir2\\dir3\\....\\dirn\\test.txt"
   1491           - 返回说明：0：成功 1：文件已存在 2：创建文件目录失败 3：创建文件失败
   1492           - 注：如果文件路径中某一个中间目录不存在，那么此函数会创建这个目录，再继续
   1493                 去创建更深层的目录，一直到最后把文件创建完成。
   1494                 创建文件失败有可能是因为存储设备空间不足，或是此文件已经存在
   1495           **************************************************************************/
   1496          

   \                                 In section .text, align 2, keep-with-next
   1497          uint8 FAT32_Create_File(struct FileInfoStruct *pfi,int8 *filepath,uint8 *ptd)
   1498          {
   \                     FAT32_Create_File:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
   1499           if(FAT32_Open_File(pfi,filepath,0))
   \   0000000A   0022               MOVS     R2,#+0
   \   0000000C   2900               MOVS     R1,R5
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       FAT32_Open_File
   \   00000014   0028               CMP      R0,#+0
   \   00000016   13D0               BEQ.N    ??FAT32_Create_File_0
   1500           {
   1501            if(!FAT32_Create_Dir(pfi,filepath,ptd))
   \   00000018   3200               MOVS     R2,R6
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   2000               MOVS     R0,R4
   \   0000001E   ........           BL       FAT32_Create_Dir
   \   00000022   0028               CMP      R0,#+0
   \   00000024   0AD1               BNE.N    ??FAT32_Create_File_1
   1502            {
   1503             if(FAT32_Create_Rec(pfi,temp_dir_cluster,temp_dir_name,0,ptd)==-1)
   \   00000026   0096               STR      R6,[SP, #+0]
   \   00000028   0023               MOVS     R3,#+0
   \   0000002A   ....               LDR.N    R2,??DataTable24_2
   \   0000002C   ....               LDR.N    R0,??DataTable24_3
   \   0000002E   0168               LDR      R1,[R0, #+0]
   \   00000030   2000               MOVS     R0,R4
   \   00000032   ........           BL       FAT32_Create_Rec
   \   00000036   0100               MOVS     R1,R0
   1504             {
   1505              return 3;
   1506             }    
   1507            }
   1508            else
   1509            {
   1510             return 2;   
   1511            }
   1512           }
   1513           else
   1514           {
   1515            return 1;
   1516           }
   1517           return 0;
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   02E0               B.N      ??FAT32_Create_File_2
   \                     ??FAT32_Create_File_1:
   \   0000003C   0220               MOVS     R0,#+2
   \   0000003E   00E0               B.N      ??FAT32_Create_File_2
   \                     ??FAT32_Create_File_0:
   \   00000040   0120               MOVS     R0,#+1
   \                     ??FAT32_Create_File_2:
   \   00000042   76BD               POP      {R1,R2,R4-R6,PC}  ;; return
   1518          }
   1519          
   1520          /**************************************************************************
   1521           - 功能描述：删除文件(支持任意层目录)
   1522           - 隶属模块：znFAT文件系统模块
   1523           - 函数属性：外部，使用户使用
   1524           - 参数说明：filepath:文件路径 比如 "\\dir1\\dir2\\dir3\\....\\dirn\\test.txt"
   1525           - 返回说明：1:文件或目录路径不存在 0:成功
   1526           - 注：删除后的文件的FAT表中的簇链关系完全被破坏
   1527           **************************************************************************/
   1528          

   \                                 In section .text, align 2, keep-with-next
   1529          uint8 FAT32_Del_File(int8 *filepath)
   1530          {
   \                     FAT32_Del_File:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   91B0               SUB      SP,SP,#+68
   1531           uint32 cur_clu,next_clu;
   1532           struct FileInfoStruct fi;
   1533           
   1534           if(FAT32_Open_File(&fi,filepath,0))
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   0100               MOVS     R1,R0
   \   00000008   00A8               ADD      R0,SP,#+0
   \   0000000A   ........           BL       FAT32_Open_File
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   01D0               BEQ.N    ??FAT32_Del_File_0
   1535           {
   1536            return 1;
   \   00000012   0120               MOVS     R0,#+1
   \   00000014   33E0               B.N      ??FAT32_Del_File_1
   1537           }
   1538           FAT32_ReadSector(fi.Rec_Sec,FAT32_Buffer);
   \                     ??FAT32_Del_File_0:
   \   00000016   ....               LDR.N    R1,??DataTable23
   \   00000018   0998               LDR      R0,[SP, #+36]
   \   0000001A   ........           BL       FAT32_ReadSector
   1539           *(FAT32_Buffer+fi.nRec)=0xe5;
   \   0000001E   BDF82800           LDRH     R0,[SP, #+40]
   \   00000022   ....               LDR.N    R1,??DataTable23
   \   00000024   E522               MOVS     R2,#+229
   \   00000026   4254               STRB     R2,[R0, R1]
   1540           FAT32_WriteSector(fi.Rec_Sec,FAT32_Buffer);
   \   00000028   ....               LDR.N    R1,??DataTable23
   \   0000002A   0998               LDR      R0,[SP, #+36]
   \   0000002C   ........           BL       FAT32_WriteSector
   1541           
   1542           if(cur_clu=fi.FileStartCluster)
   \   00000030   039C               LDR      R4,[SP, #+12]
   \   00000032   002C               CMP      R4,#+0
   \   00000034   22D0               BEQ.N    ??FAT32_Del_File_2
   1543           {
   1544            if(cur_clu<Search_Last_Usable_Cluster()) 
   \   00000036   ........           BL       Search_Last_Usable_Cluster
   \   0000003A   8442               CMP      R4,R0
   \   0000003C   02D2               BCS.N    ??FAT32_Del_File_3
   1545             FAT32_Update_FSInfo_Last_Clu(cur_clu);
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       FAT32_Update_FSInfo_Last_Clu
   1546            FAT32_Update_FSInfo_Free_Clu(1);
   \                     ??FAT32_Del_File_3:
   \   00000044   0120               MOVS     R0,#+1
   \   00000046   ........           BL       FAT32_Update_FSInfo_Free_Clu
   1547            next_clu=FAT32_GetNextCluster(cur_clu);
   \   0000004A   2000               MOVS     R0,R4
   \   0000004C   ........           BL       FAT32_GetNextCluster
   \   00000050   0500               MOVS     R5,R0
   \   00000052   0BE0               B.N      ??FAT32_Del_File_4
   1548            while(next_clu!=0x0fffffff)
   1549            {
   1550             FAT32_Update_FSInfo_Free_Clu(1);
   \                     ??FAT32_Del_File_5:
   \   00000054   0120               MOVS     R0,#+1
   \   00000056   ........           BL       FAT32_Update_FSInfo_Free_Clu
   1551             FAT32_Modify_FAT(cur_clu,0x00000000);
   \   0000005A   0021               MOVS     R1,#+0
   \   0000005C   2000               MOVS     R0,R4
   \   0000005E   ........           BL       FAT32_Modify_FAT
   1552             cur_clu=next_clu;
   \   00000062   2C00               MOVS     R4,R5
   1553             next_clu=FAT32_GetNextCluster(cur_clu);
   \   00000064   2000               MOVS     R0,R4
   \   00000066   ........           BL       FAT32_GetNextCluster
   \   0000006A   0500               MOVS     R5,R0
   1554            }
   \                     ??FAT32_Del_File_4:
   \   0000006C   7FF07040           MVNS     R0,#-268435456
   \   00000070   8542               CMP      R5,R0
   \   00000072   EFD1               BNE.N    ??FAT32_Del_File_5
   1555            FAT32_Modify_FAT(cur_clu,0x00000000);
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   2000               MOVS     R0,R4
   \   00000078   ........           BL       FAT32_Modify_FAT
   1556           }
   1557           return 0;
   \                     ??FAT32_Del_File_2:
   \   0000007C   0020               MOVS     R0,#+0
   \                     ??FAT32_Del_File_1:
   \   0000007E   11B0               ADD      SP,SP,#+68
   \   00000080   30BD               POP      {R4,R5,PC}       ;; return
   1558          }
   1559          
   1560          /**************************************************************************
   1561           - 功能描述：文件拷贝(源文件路径与目标文件路径均支持任意深层目录，并且支持
   1562                       文件名通配)
   1563           - 隶属模块：znFAT文件系统模块
   1564           - 函数属性：外部，使用户使用
   1565           - 参数说明：pArg1:是源文件所在的存储设备的初始参数结构体的指针
   1566                       pArg2:是目标文件所在的存储设备的初始参数结构体的指针
   1567                       sfilename:源文件路径，也就是拷贝操作的数据源
   1568                       tfilename:目标文件路径，也就是数据最终到写入的文件
   1569                                 比如 "\\dir1\\dir2\\dir3\\....\\dirn\\test.txt" 
   1570                       file_buf:拷贝过程中要用到的数据缓冲区，此缓冲区容量越大，
   1571                                拷贝速度越快
   1572                       buf_size:数据缓冲区的大小 
   1573           - 返回说明：1:目录文件创建失败 2:源文件打开打败 0:成功
   1574           - 注：此函数支持多设备之间的文件拷贝，pArg1与pArg2引入了源存储设备与目的
   1575                 存储设备的初始参数信息，从而可以同时对两个存储设备进行操作。
   1576          	   znFAT 5.01版开始支持多设备，多设备间的相互数据拷贝是最典型的应用
   1577           **************************************************************************/
   1578          

   \                                 In section .text, align 2, keep-with-next
   1579          unsigned char FAT32_XCopy_File(struct FAT32_Init_Arg *pArg1,struct FAT32_Init_Arg *pArg2,int8 *sfilename,int8 *tfilename,uint8 *file_buf,uint32 buf_size,unsigned char *pt)
   1580          {
   \                     FAT32_XCopy_File:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   A0B0               SUB      SP,SP,#+128
   \   00000006   0700               MOVS     R7,R0
   \   00000008   0E00               MOVS     R6,R1
   \   0000000A   9046               MOV      R8,R2
   \   0000000C   1900               MOVS     R1,R3
   \   0000000E   269C               LDR      R4,[SP, #+152]
   \   00000010   279D               LDR      R5,[SP, #+156]
   \   00000012   289A               LDR      R2,[SP, #+160]
   1581           struct FileInfoStruct FileInfo2,FileInfo1;
   1582           uint32 i;
   1583          
   1584           Dev_No=pArg2->DEV_No;
   \   00000014   ....               LDR.N    R0,??DataTable24_4
   \   00000016   3378               LDRB     R3,[R6, #+0]
   \   00000018   0370               STRB     R3,[R0, #+0]
   1585           pArg=pArg2;
   \   0000001A   ....               LDR.N    R0,??DataTable24
   \   0000001C   0660               STR      R6,[R0, #+0]
   1586           if(FAT32_Create_File(&FileInfo1,tfilename,pt)) return 1;
   \   0000001E   00A8               ADD      R0,SP,#+0
   \   00000020   ........           BL       FAT32_Create_File
   \   00000024   0028               CMP      R0,#+0
   \   00000026   01D0               BEQ.N    ??FAT32_XCopy_File_0
   \   00000028   0120               MOVS     R0,#+1
   \   0000002A   4CE0               B.N      ??FAT32_XCopy_File_1
   1587           Dev_No=pArg1->DEV_No;
   \                     ??FAT32_XCopy_File_0:
   \   0000002C   ....               LDR.N    R0,??DataTable24_4
   \   0000002E   3978               LDRB     R1,[R7, #+0]
   \   00000030   0170               STRB     R1,[R0, #+0]
   1588           pArg=pArg1;
   \   00000032   ....               LDR.N    R0,??DataTable24
   \   00000034   0760               STR      R7,[R0, #+0]
   1589           if(FAT32_Open_File(&FileInfo2,sfilename,0)) return 2;
   \   00000036   0022               MOVS     R2,#+0
   \   00000038   4146               MOV      R1,R8
   \   0000003A   10A8               ADD      R0,SP,#+64
   \   0000003C   ........           BL       FAT32_Open_File
   \   00000040   0028               CMP      R0,#+0
   \   00000042   01D0               BEQ.N    ??FAT32_XCopy_File_2
   \   00000044   0220               MOVS     R0,#+2
   \   00000046   3EE0               B.N      ??FAT32_XCopy_File_1
   1590          
   1591           for(i=0;i<FileInfo2.FileSize/buf_size;i++)
   \                     ??FAT32_XCopy_File_2:
   \   00000048   5FF00008           MOVS     R8,#+0
   \   0000004C   17E0               B.N      ??FAT32_XCopy_File_3
   1592           {
   1593            Dev_No=pArg1->DEV_No;
   \                     ??FAT32_XCopy_File_4:
   \   0000004E   ....               LDR.N    R0,??DataTable24_4
   \   00000050   3978               LDRB     R1,[R7, #+0]
   \   00000052   0170               STRB     R1,[R0, #+0]
   1594            pArg=pArg1;
   \   00000054   ....               LDR.N    R0,??DataTable24
   \   00000056   0760               STR      R7,[R0, #+0]
   1595            FAT32_Read_File(&FileInfo2,i*buf_size,buf_size,file_buf);
   \   00000058   2300               MOVS     R3,R4
   \   0000005A   2A00               MOVS     R2,R5
   \   0000005C   05FB08F1           MUL      R1,R5,R8
   \   00000060   10A8               ADD      R0,SP,#+64
   \   00000062   ........           BL       FAT32_Read_File
   1596            Dev_No=pArg2->DEV_No;
   \   00000066   ....               LDR.N    R0,??DataTable24_4
   \   00000068   3178               LDRB     R1,[R6, #+0]
   \   0000006A   0170               STRB     R1,[R0, #+0]
   1597            pArg=pArg2;
   \   0000006C   ....               LDR.N    R0,??DataTable24
   \   0000006E   0660               STR      R6,[R0, #+0]
   1598            FAT32_Add_Dat(&FileInfo1,buf_size,file_buf);
   \   00000070   2200               MOVS     R2,R4
   \   00000072   2900               MOVS     R1,R5
   \   00000074   00A8               ADD      R0,SP,#+0
   \   00000076   ........           BL       FAT32_Add_Dat
   1599           }
   \   0000007A   18F10108           ADDS     R8,R8,#+1
   \                     ??FAT32_XCopy_File_3:
   \   0000007E   1598               LDR      R0,[SP, #+84]
   \   00000080   B0FBF5F0           UDIV     R0,R0,R5
   \   00000084   8045               CMP      R8,R0
   \   00000086   E2D3               BCC.N    ??FAT32_XCopy_File_4
   1600          
   1601           Dev_No=pArg1->DEV_No;
   \   00000088   ....               LDR.N    R0,??DataTable24_4
   \   0000008A   3978               LDRB     R1,[R7, #+0]
   \   0000008C   0170               STRB     R1,[R0, #+0]
   1602           pArg=pArg1; 
   \   0000008E   ....               LDR.N    R0,??DataTable24
   \   00000090   0760               STR      R7,[R0, #+0]
   1603           FAT32_Read_File(&FileInfo2,i*buf_size,FileInfo2.FileSize%buf_size,file_buf);
   \   00000092   1598               LDR      R0,[SP, #+84]
   \   00000094   2300               MOVS     R3,R4
   \   00000096   B0FBF5F1           UDIV     R1,R0,R5
   \   0000009A   05FB1102           MLS      R2,R5,R1,R0
   \   0000009E   05FB08F1           MUL      R1,R5,R8
   \   000000A2   10A8               ADD      R0,SP,#+64
   \   000000A4   ........           BL       FAT32_Read_File
   1604           Dev_No=pArg2->DEV_No;
   \   000000A8   ....               LDR.N    R0,??DataTable24_4
   \   000000AA   3178               LDRB     R1,[R6, #+0]
   \   000000AC   0170               STRB     R1,[R0, #+0]
   1605           pArg=pArg2;
   \   000000AE   ....               LDR.N    R0,??DataTable24
   \   000000B0   0660               STR      R6,[R0, #+0]
   1606           FAT32_Add_Dat(&FileInfo1,FileInfo2.FileSize%buf_size,file_buf);
   \   000000B2   1598               LDR      R0,[SP, #+84]
   \   000000B4   2200               MOVS     R2,R4
   \   000000B6   B0FBF5F1           UDIV     R1,R0,R5
   \   000000BA   05FB1101           MLS      R1,R5,R1,R0
   \   000000BE   00A8               ADD      R0,SP,#+0
   \   000000C0   ........           BL       FAT32_Add_Dat
   1607          
   1608           return 0;
   \   000000C4   0020               MOVS     R0,#+0
   \                     ??FAT32_XCopy_File_1:
   \   000000C6   20B0               ADD      SP,SP,#+128
   \   000000C8   BDE8F081           POP      {R4-R8,PC}       ;; return
   1609          }
   1610          
   1611          /**************************************************************************
   1612           - 功能描述：文件重命名
   1613           - 隶属模块：znFAT文件系统模块
   1614           - 函数属性：外部，使用户使用
   1615           - 参数说明：filename:将要重命名的源文件的路径 如\a.txt
   1616                       newfilename:目标文件名 如b.txt (注目标文件名是单纯的文件名，
   1617          			 不含路径)
   1618           - 返回说明：1:源文件打开打败 0:成功
   1619           - 注：无
   1620           **************************************************************************/
   1621          

   \                                 In section .text, align 2, keep-with-next
   1622          uint8 FAT32_Rename_File(int8 *filename,int8 *newfilename)
   1623          {
   \                     FAT32_Rename_File:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   90B0               SUB      SP,SP,#+64
   \   00000004   0C00               MOVS     R4,R1
   1624           struct FileInfoStruct fi;
   1625           uint8 i=0,j=0;
   \   00000006   0026               MOVS     R6,#+0
   \   00000008   0025               MOVS     R5,#+0
   1626           if(FAT32_Open_File(&fi,filename,0)) return 1; //文件打开失败
   \   0000000A   0022               MOVS     R2,#+0
   \   0000000C   0100               MOVS     R1,R0
   \   0000000E   00A8               ADD      R0,SP,#+0
   \   00000010   ........           BL       FAT32_Open_File
   \   00000014   0028               CMP      R0,#+0
   \   00000016   01D0               BEQ.N    ??FAT32_Rename_File_0
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   39E0               B.N      ??FAT32_Rename_File_1
   1627           FAT32_ReadSector(fi.Rec_Sec,FAT32_Buffer);
   \                     ??FAT32_Rename_File_0:
   \   0000001C   ....               LDR.N    R1,??DataTable24_5
   \   0000001E   0998               LDR      R0,[SP, #+36]
   \   00000020   ........           BL       FAT32_ReadSector
   1628           for(i=0;i<11;i++) (FAT32_Buffer+fi.nRec)[i]=0x20;
   \   00000024   0026               MOVS     R6,#+0
   \   00000026   07E0               B.N      ??FAT32_Rename_File_2
   \                     ??FAT32_Rename_File_3:
   \   00000028   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002A   BDF82800           LDRH     R0,[SP, #+40]
   \   0000002E   ....               LDR.N    R1,??DataTable24_5
   \   00000030   4018               ADDS     R0,R0,R1
   \   00000032   2021               MOVS     R1,#+32
   \   00000034   3154               STRB     R1,[R6, R0]
   \   00000036   761C               ADDS     R6,R6,#+1
   \                     ??FAT32_Rename_File_2:
   \   00000038   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003A   0B2E               CMP      R6,#+11
   \   0000003C   F4D3               BCC.N    ??FAT32_Rename_File_3
   1629           i=0;
   \   0000003E   0026               MOVS     R6,#+0
   \   00000040   0AE0               B.N      ??FAT32_Rename_File_4
   1630           while(newfilename[i]!='.')
   1631           {
   1632            (FAT32_Buffer+fi.nRec)[i]=L2U(newfilename[i]);
   \                     ??FAT32_Rename_File_5:
   \   00000042   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   305D               LDRB     R0,[R6, R4]
   \   00000046   ........           BL       L2U
   \   0000004A   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004C   BDF82810           LDRH     R1,[SP, #+40]
   \   00000050   ....               LDR.N    R2,??DataTable24_5
   \   00000052   8918               ADDS     R1,R1,R2
   \   00000054   7054               STRB     R0,[R6, R1]
   1633            i++;
   \   00000056   761C               ADDS     R6,R6,#+1
   1634           }
   \                     ??FAT32_Rename_File_4:
   \   00000058   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005A   305D               LDRB     R0,[R6, R4]
   \   0000005C   2E28               CMP      R0,#+46
   \   0000005E   F0D1               BNE.N    ??FAT32_Rename_File_5
   1635           i++;
   \   00000060   761C               ADDS     R6,R6,#+1
   \   00000062   0CE0               B.N      ??FAT32_Rename_File_6
   1636           while(newfilename[i])
   1637           {
   1638            (FAT32_Buffer+fi.nRec+8)[j]=L2U(newfilename[i]);
   \                     ??FAT32_Rename_File_7:
   \   00000064   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000066   305D               LDRB     R0,[R6, R4]
   \   00000068   ........           BL       L2U
   \   0000006C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006E   BDF82810           LDRH     R1,[SP, #+40]
   \   00000072   ....               LDR.N    R2,??DataTable24_5
   \   00000074   8918               ADDS     R1,R1,R2
   \   00000076   6918               ADDS     R1,R5,R1
   \   00000078   0872               STRB     R0,[R1, #+8]
   1639            i++;j++;
   \   0000007A   761C               ADDS     R6,R6,#+1
   \   0000007C   6D1C               ADDS     R5,R5,#+1
   1640           }
   \                     ??FAT32_Rename_File_6:
   \   0000007E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000080   305D               LDRB     R0,[R6, R4]
   \   00000082   0028               CMP      R0,#+0
   \   00000084   EED1               BNE.N    ??FAT32_Rename_File_7
   1641           FAT32_WriteSector(fi.Rec_Sec,FAT32_Buffer);
   \   00000086   ....               LDR.N    R1,??DataTable24_5
   \   00000088   0998               LDR      R0,[SP, #+36]
   \   0000008A   ........           BL       FAT32_WriteSector
   1642           return 0;
   \   0000008E   0020               MOVS     R0,#+0
   \                     ??FAT32_Rename_File_1:
   \   00000090   10B0               ADD      SP,SP,#+64
   \   00000092   70BD               POP      {R4-R6,PC}       ;; return
   1643          }
   1644          
   1645          /**************************************************************************
   1646           - 功能描述：文件关闭
   1647           - 隶属模块：znFAT文件系统模块
   1648           - 函数属性：外部，使用户使用
   1649           - 参数说明：pfi:指向当前打开的文件的文件信息结构
   1650           - 返回说明：0:成功
   1651           - 注：无
   1652           **************************************************************************/
   1653          

   \                                 In section .text, align 2, keep-with-next
   1654          uint8 FAT32_File_Close(struct FileInfoStruct *pfi)
   1655          {
   1656           uint16 i=0;							
   \                     FAT32_File_Close:
   \   00000000   0021               MOVS     R1,#+0
   1657           for(i=0;i<sizeof(struct FileInfoStruct);i++)
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   1100               MOVS     R1,R2
   \   00000006   03E0               B.N      ??FAT32_File_Close_0
   1658           {
   1659            ((uint8 *)pfi)[i]=0;
   \                     ??FAT32_File_Close_1:
   \   00000008   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0022               MOVS     R2,#+0
   \   0000000C   0A54               STRB     R2,[R1, R0]
   1660           }
   \   0000000E   491C               ADDS     R1,R1,#+1
   \                     ??FAT32_File_Close_0:
   \   00000010   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   4029               CMP      R1,#+64
   \   00000014   F8D3               BCC.N    ??FAT32_File_Close_1
   1661           return 0;
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   7047               BX       LR               ;; return
   1662          }
   1663          /**************************************************************************
   1664           - 功能描述：文件新建
   1665           - 隶属模块：FAT文件系统模块
   1666           - 函数属性：外部，使用户使用
   1667           - 参数说明：pfi:一个指向FileInfoStruct类型的结构体的指针，用来装载新创建的
   1668                       文件信息，因此新创建的文件不用再打开就可以直接来操作
   1669                       filepath:文件路径 比如 "\\dir1\\dir2\\dir3\\....\\dirn\\test.txt"
   1670           - 返回说明：0：成功 1：文件已存在,重新创建 2：创建文件目录失败 3：创建文件失败
   1671           - 注：无
   1672           **************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1673           uint8 FAT32_New_File(struct FileInfoStruct *pfi,int8 *filepath,uint8 *ptd){
   \                     FAT32_New_File:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   1674            uint8 result;
   1675            result=FAT32_Create_File(pfi,filepath,ptd);
   \   00000008   3200               MOVS     R2,R6
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   ........           BL       FAT32_Create_File
   1676            if(result!=0){
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0028               CMP      R0,#+0
   \   00000016   0ED0               BEQ.N    ??FAT32_New_File_0
   1677              
   1678              if(result==1){
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0128               CMP      R0,#+1
   \   0000001C   09D1               BNE.N    ??FAT32_New_File_1
   1679                
   1680                FAT32_Del_File(filepath);
   \   0000001E   2800               MOVS     R0,R5
   \   00000020   ........           BL       FAT32_Del_File
   1681                FAT32_Create_File(pfi,filepath,ptd);
   \   00000024   3200               MOVS     R2,R6
   \   00000026   2900               MOVS     R1,R5
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   ........           BL       FAT32_Create_File
   1682                return 1;
   \   0000002E   0120               MOVS     R0,#+1
   \   00000030   02E0               B.N      ??FAT32_New_File_2
   1683              }
   1684              else
   1685                return result;
   \                     ??FAT32_New_File_1:
   \   00000032   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   00E0               B.N      ??FAT32_New_File_2
   1686            }else
   1687              return 0;
   \                     ??FAT32_New_File_0:
   \   00000036   0020               MOVS     R0,#+0
   \                     ??FAT32_New_File_2:
   \   00000038   70BD               POP      {R4-R6,PC}       ;; return
   1688           }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     FAT32_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   ........           DC32     FAT32_Buffer+0x1C6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   ........           DC32     pArg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   ........           DC32     FAT32_Buffer+0x20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     FAT32_Buffer+0x1EC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     Dev_No

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   ........           DC32     temp_last_cluster

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   ........           DC32     FAT32_Buffer+0x1E8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     temp_dir_cluster

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   ........           DC32     temp_dir_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   2E000000           DC8      ".",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   2E2E0000           DC8      0x2E, 0x2E, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     FAT32_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     pArg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   ........           DC32     temp_rec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   ........           DC32     temp_dir_name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   ........           DC32     temp_dir_cluster

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   ........           DC32     Dev_No

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   ........           DC32     FAT32_Buffer

   \                                 In section .text, align 2, keep-with-next
   \                     `?<Constant ".">`:
   \   00000000                      ; Initializer data, 2 bytes
   \   00000000   2E00               DC8 46, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "..">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   2E2E0000           DC8 46, 46, 0, 0

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     Compare_Dir_Name                  4
     FAT32_Add_Dat                    40
     FAT32_Create_Dir                 24
     FAT32_Create_File                24
     FAT32_Create_Rec                 56
     FAT32_Del_File                   80
     FAT32_Empty_Cluster              16
     FAT32_Enter_Dir                  64
     FAT32_File_Close                  0
     FAT32_Find_DBR                    8
     FAT32_Find_Free_Clust            24
     FAT32_GetNextCluster              8
     FAT32_Get_Remain_Cap              8
     FAT32_Get_Total_Size              8
     FAT32_Init                        8
     FAT32_Modify_FAT                 16
     FAT32_New_File                   16
     FAT32_Open_File                  56
     FAT32_ReadSector                  8
     FAT32_Read_File                  32
     FAT32_Rename_File                80
     FAT32_Seek_File                  24
     FAT32_Update_FSInfo_Free_Clu     16
     FAT32_Update_FSInfo_Last_Clu      8
     FAT32_WriteSector                 8
     FAT32_XCopy_File                152
     FAT32_is_MBR                      8
     FAT32_toFileName                 24
     FilenameMatch                    24
     Fill_Rec_Inf                     32
     L2U                               0
     LE2BE                             8
     Search_Last_Usable_Cluster        8
     Str2Up                           16
     strchr                            8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     strchr                          8
     idata                          32
     temp_rec                       32
     temp_dir_name                  16
     temp_dir_cluster                4
     temp_last_cluster               4
     FAT32_Buffer                  512
     pRS                             4
     pWS                             4
     FAT32_ReadSector               16
     FAT32_WriteSector              16
     LE2BE                          44
     L2U                            20
     FAT32_is_MBR                   32
     FAT32_Find_DBR                 40
     FAT32_Get_Total_Size           56
     Search_Last_Usable_Cluster     32
     FAT32_Init                    212
     FAT32_Get_Remain_Cap          110
     FAT32_Update_FSInfo_Free_Clu  142
     FAT32_Update_FSInfo_Last_Clu   88
     FAT32_GetNextCluster           50
     Compare_Dir_Name               36
     FilenameMatch                 104
     FAT32_toFileName              112
     Str2Up                         40
     FAT32_Enter_Dir               362
     FAT32_Open_File               640
     FAT32_Seek_File               642
     FAT32_Read_File               716
     FAT32_Find_Free_Clust         174
     Fill_Rec_Inf                  468
     FAT32_Modify_FAT              372
     FAT32_Empty_Cluster           124
     FAT32_Create_Rec              832
     FAT32_Add_Dat                 966
     FAT32_Create_Dir               42
     FAT32_Create_File              68
     FAT32_Del_File                130
     FAT32_XCopy_File              204
     FAT32_Rename_File             148
     FAT32_File_Close               26
     FAT32_New_File                 58
     ??DataTable14                   4
     ??DataTable14_1                 4
     ??DataTable14_2                 4
     ??DataTable14_3                 4
     ??DataTable15                   4
     ??DataTable15_1                 4
     ??DataTable15_2                 4
     ??DataTable15_3                 4
     ??DataTable17                   4
     ??DataTable17_1                 4
     ??DataTable18                   4
     ??DataTable18_1                 4
     ??DataTable23                   4
     ??DataTable24                   4
     ??DataTable24_1                 4
     ??DataTable24_2                 4
     ??DataTable24_3                 4
     ??DataTable24_4                 4
     ??DataTable24_5                 4
     ?<Constant ".">                 2
     ?<Constant "..">                4

 
   608 bytes in section .bss
 7 212 bytes in section .text
 
 7 204 bytes of CODE memory (+ 8 bytes shared)
   608 bytes of DATA memory

Errors: none
Warnings: 12
