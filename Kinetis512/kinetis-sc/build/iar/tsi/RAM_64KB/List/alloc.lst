###############################################################################
#                                                                             #
#                                                       04/Mar/2012  17:42:00 #
# IAR ANSI C/C++ Compiler V6.10.1.22143/W32 EVALUATION for ARM                #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\My Works\K60\Kinetis512\kinetis-sc\src\common\alloc.c #
#    Command line =  "F:\My Works\K60\Kinetis512\kinetis-sc\src\common\alloc. #
#                    c" -D IAR -D TWR_K60N512 -lCN "F:\My                     #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_64KB\L #
#                    ist\" -lB "F:\My Works\K60\Kinetis512\kinetis-sc\build\i #
#                    ar\tsi\RAM_64KB\List\" -o "F:\My                         #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_64KB\O #
#                    bj\" --no_cse --no_unroll --no_inline --no_code_motion   #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h" #
#                     -I "F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\tsi #
#                    \..\..\..\src\projects\tsi\" -I "F:\My                   #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\common\" -I "F:\My Works\K60\Kinetis512\kinetis-sc\bu #
#                    ild\iar\tsi\..\..\..\src\cpu\" -I "F:\My                 #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\cpu\headers\" -I "F:\My Works\K60\Kinetis512\kinetis- #
#                    sc\build\iar\tsi\..\..\..\src\drivers\uart\" -I "F:\My   #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\drivers\mcg\" -I "F:\My Works\K60\Kinetis512\kinetis- #
#                    sc\build\iar\tsi\..\..\..\src\drivers\wdog\" -I "F:\My   #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\platforms\" -I "F:\My Works\K60\Kinetis512\kinetis-sc #
#                    \build\iar\tsi\..\" -Ol --use_c++_inline                 #
#    List file    =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_ #
#                    64KB\List\alloc.lst                                      #
#    Object file  =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_ #
#                    64KB\Obj\alloc.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\My Works\K60\Kinetis512\kinetis-sc\src\common\alloc.c
      1          /*
      2           * File:        alloc.c
      3           * Purpose:     generic malloc() and free() engine
      4           *
      5           * Notes:       99% of this code stolen/borrowed from the K&R C
      6           *              examples.
      7           *
      8           */
      9          
     10          #include "common.h"
     11          #include "stdlib.h"
     12          
     13          #pragma section = "HEAP"
     14          
     15          /********************************************************************/
     16          
     17          /*
     18           * This struct forms the minimum block size which is allocated, and
     19           * also forms the linked list for the memory space used with alloc()
     20           * and free().  It is padded so that on a 32-bit machine, all malloc'ed
     21           * pointers are 16-byte aligned.
     22           */
     23          typedef struct ALLOC_HDR
     24          {
     25              struct
     26              {
     27                  struct ALLOC_HDR     *ptr;
     28                  unsigned int size;
     29              } s;
     30              unsigned int align;
     31              unsigned int pad;
     32          } ALLOC_HDR;
     33          

   \                                 In section .bss, align 4
     34          static ALLOC_HDR base;
   \                     base:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     35          static ALLOC_HDR *freep = NULL;
   \                     freep:
   \   00000000                      DS8 4
     36          
     37          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     38          void
     39          free (void *ap)
     40          {
     41              ALLOC_HDR *bp, *p;
     42          
     43              bp = (ALLOC_HDR *)ap - 1;   /* point to block header */
   \                     free:
   \   00000000   1038               SUBS     R0,R0,#+16
     44              for (p = freep; !((bp > p) && (bp < p->s.ptr)) ; p = p->s.ptr)
   \   00000002   ....               LDR.N    R1,??DataTable1
   \   00000004   0968               LDR      R1,[R1, #+0]
   \   00000006   00E0               B.N      ??free_0
   \                     ??free_1:
   \   00000008   0968               LDR      R1,[R1, #+0]
   \                     ??free_0:
   \   0000000A   8142               CMP      R1,R0
   \   0000000C   02D2               BCS.N    ??free_2
   \   0000000E   0A68               LDR      R2,[R1, #+0]
   \   00000010   9042               CMP      R0,R2
   \   00000012   07D3               BCC.N    ??free_3
     45              {
     46                  if ((p >= p->s.ptr) && ((bp > p) || (bp < p->s.ptr)))
   \                     ??free_2:
   \   00000014   0A68               LDR      R2,[R1, #+0]
   \   00000016   9142               CMP      R1,R2
   \   00000018   F6D3               BCC.N    ??free_1
   \   0000001A   8142               CMP      R1,R0
   \   0000001C   02D3               BCC.N    ??free_4
   \   0000001E   0A68               LDR      R2,[R1, #+0]
   \   00000020   9042               CMP      R0,R2
   \   00000022   F1D2               BCS.N    ??free_1
     47                  {
     48                      break; /* freed block at start or end of arena */
     49                  }
     50              }
     51          
     52              if ((bp + bp->s.size) == p->s.ptr)
   \                     ??free_4:
   \                     ??free_3:
   \   00000024   4268               LDR      R2,[R0, #+4]
   \   00000026   10EB0212           ADDS     R2,R0,R2, LSL #+4
   \   0000002A   0B68               LDR      R3,[R1, #+0]
   \   0000002C   9A42               CMP      R2,R3
   \   0000002E   08D1               BNE.N    ??free_5
     53              {
     54                  bp->s.size += p->s.ptr->s.size;
   \   00000030   4268               LDR      R2,[R0, #+4]
   \   00000032   0B68               LDR      R3,[R1, #+0]
   \   00000034   5B68               LDR      R3,[R3, #+4]
   \   00000036   9A18               ADDS     R2,R3,R2
   \   00000038   4260               STR      R2,[R0, #+4]
     55                  bp->s.ptr = p->s.ptr->s.ptr;
   \   0000003A   0A68               LDR      R2,[R1, #+0]
   \   0000003C   1268               LDR      R2,[R2, #+0]
   \   0000003E   0260               STR      R2,[R0, #+0]
   \   00000040   01E0               B.N      ??free_6
     56              }
     57              else
     58              {
     59                  bp->s.ptr = p->s.ptr;
   \                     ??free_5:
   \   00000042   0A68               LDR      R2,[R1, #+0]
   \   00000044   0260               STR      R2,[R0, #+0]
     60              }
     61          
     62              if ((p + p->s.size) == bp)
   \                     ??free_6:
   \   00000046   4A68               LDR      R2,[R1, #+4]
   \   00000048   11EB0212           ADDS     R2,R1,R2, LSL #+4
   \   0000004C   8242               CMP      R2,R0
   \   0000004E   06D1               BNE.N    ??free_7
     63              {
     64                  p->s.size += bp->s.size;
   \   00000050   4A68               LDR      R2,[R1, #+4]
   \   00000052   4368               LDR      R3,[R0, #+4]
   \   00000054   9A18               ADDS     R2,R3,R2
   \   00000056   4A60               STR      R2,[R1, #+4]
     65                  p->s.ptr = bp->s.ptr;
   \   00000058   0068               LDR      R0,[R0, #+0]
   \   0000005A   0860               STR      R0,[R1, #+0]
   \   0000005C   00E0               B.N      ??free_8
     66              }
     67              else
     68              {
     69                  p->s.ptr = bp;
   \                     ??free_7:
   \   0000005E   0860               STR      R0,[R1, #+0]
     70              }
     71          
     72              freep = p;
   \                     ??free_8:
   \   00000060   ....               LDR.N    R0,??DataTable1
   \   00000062   0160               STR      R1,[R0, #+0]
     73          }
   \   00000064   7047               BX       LR               ;; return
     74          
     75          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     76          void *
     77          malloc (unsigned nbytes)
     78          {
     79              /* Get addresses for the HEAP start and end */
     80          	#if (defined(CW))	
     81                extern char __HEAP_START;
     82                extern char __HEAP_END[];
     83              #elif (defined(IAR))
     84                char* __HEAP_START = __section_begin("HEAP");
   \                     malloc:
   \   00000000   ....               LDR.N    R1,??DataTable1_1
     85                char* __HEAP_END = __section_end("HEAP");
   \   00000002   ....               LDR.N    R2,??DataTable1_2
     86              #endif
     87             
     88              ALLOC_HDR *p, *prevp;
     89              unsigned nunits;
     90          
     91              nunits = ((nbytes+sizeof(ALLOC_HDR)-1) / sizeof(ALLOC_HDR)) + 1;
   \   00000004   0F30               ADDS     R0,R0,#+15
   \   00000006   0009               LSRS     R0,R0,#+4
   \   00000008   401C               ADDS     R0,R0,#+1
     92          
     93              if ((prevp = freep) == NULL)
   \   0000000A   ....               LDR.N    R3,??DataTable1
   \   0000000C   1B68               LDR      R3,[R3, #+0]
   \   0000000E   002B               CMP      R3,#+0
   \   00000010   0CD1               BNE.N    ??malloc_0
     94              {
     95                  p = (ALLOC_HDR *)__HEAP_START;
     96                  p->s.size = ( ((uint32)__HEAP_END - (uint32)__HEAP_START)
     97                      / sizeof(ALLOC_HDR) );
   \   00000012   521A               SUBS     R2,R2,R1
   \   00000014   1209               LSRS     R2,R2,#+4
   \   00000016   4A60               STR      R2,[R1, #+4]
     98                  p->s.ptr = &base;
   \   00000018   ....               LDR.N    R2,??DataTable1_3
   \   0000001A   0A60               STR      R2,[R1, #+0]
     99                  base.s.ptr = p;
   \   0000001C   ....               LDR.N    R2,??DataTable1_3
   \   0000001E   1160               STR      R1,[R2, #+0]
    100                  base.s.size = 0;
   \   00000020   ....               LDR.N    R1,??DataTable1_3
   \   00000022   0022               MOVS     R2,#+0
   \   00000024   4A60               STR      R2,[R1, #+4]
    101                  prevp = freep = &base;
   \   00000026   ....               LDR.N    R3,??DataTable1_3
   \   00000028   ....               LDR.N    R1,??DataTable1
   \   0000002A   0B60               STR      R3,[R1, #+0]
    102              }
    103          
    104              for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr)
   \                     ??malloc_0:
   \   0000002C   1968               LDR      R1,[R3, #+0]
   \   0000002E   01E0               B.N      ??malloc_1
   \                     ??malloc_2:
   \   00000030   0B00               MOVS     R3,R1
   \   00000032   0968               LDR      R1,[R1, #+0]
    105              {
    106                  if (p->s.size >= nunits)
   \                     ??malloc_1:
   \   00000034   4A68               LDR      R2,[R1, #+4]
   \   00000036   8242               CMP      R2,R0
   \   00000038   11D3               BCC.N    ??malloc_3
    107                  {
    108                      if (p->s.size == nunits)
   \   0000003A   4A68               LDR      R2,[R1, #+4]
   \   0000003C   8242               CMP      R2,R0
   \   0000003E   02D1               BNE.N    ??malloc_4
    109                      {
    110                          prevp->s.ptr = p->s.ptr;
   \   00000040   0868               LDR      R0,[R1, #+0]
   \   00000042   1860               STR      R0,[R3, #+0]
   \   00000044   06E0               B.N      ??malloc_5
    111                      }
    112                      else
    113                      {
    114                          p->s.size -= nunits;
   \                     ??malloc_4:
   \   00000046   4A68               LDR      R2,[R1, #+4]
   \   00000048   121A               SUBS     R2,R2,R0
   \   0000004A   4A60               STR      R2,[R1, #+4]
    115                          p += p->s.size;
   \   0000004C   4A68               LDR      R2,[R1, #+4]
   \   0000004E   11EB0211           ADDS     R1,R1,R2, LSL #+4
    116                          p->s.size = nunits;
   \   00000052   4860               STR      R0,[R1, #+4]
    117                      }
    118                      freep = prevp;
   \                     ??malloc_5:
   \   00000054   ....               LDR.N    R0,??DataTable1
   \   00000056   0360               STR      R3,[R0, #+0]
    119                      return (void *)(p + 1);
   \   00000058   11F11000           ADDS     R0,R1,#+16
   \   0000005C   04E0               B.N      ??malloc_6
    120                  }
    121          
    122                  if (p == freep)
   \                     ??malloc_3:
   \   0000005E   ....               LDR.N    R2,??DataTable1
   \   00000060   1268               LDR      R2,[R2, #+0]
   \   00000062   9142               CMP      R1,R2
   \   00000064   E4D1               BNE.N    ??malloc_2
    123                      return NULL;
   \   00000066   0020               MOVS     R0,#+0
   \                     ??malloc_6:
   \   00000068   7047               BX       LR               ;; return
    124              }
    125          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     freep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     SFB(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     SFE(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   ........           DC32     base
    126          
    127          /********************************************************************/

   Maximum stack usage in bytes:

     Function .cstack
     -------- -------
     free          0
     malloc        0


   Section sizes:

     Function/Label Bytes
     -------------- -----
     base             16
     freep             4
     free            102
     malloc          106
     ??DataTable1      4
     ??DataTable1_1    4
     ??DataTable1_2    4
     ??DataTable1_3    4

 
  20 bytes in section .bss
 224 bytes in section .text
 
 224 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
