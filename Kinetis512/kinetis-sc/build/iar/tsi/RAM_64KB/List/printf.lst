###############################################################################
#                                                                             #
#                                                       04/Mar/2012  17:41:57 #
# IAR ANSI C/C++ Compiler V6.10.1.22143/W32 EVALUATION for ARM                #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\My Works\K60\Kinetis512\kinetis-sc\src\common\printf. #
#                    c                                                        #
#    Command line =  "F:\My Works\K60\Kinetis512\kinetis-sc\src\common\printf #
#                    .c" -D IAR -D TWR_K60N512 -lCN "F:\My                    #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_64KB\L #
#                    ist\" -lB "F:\My Works\K60\Kinetis512\kinetis-sc\build\i #
#                    ar\tsi\RAM_64KB\List\" -o "F:\My                         #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_64KB\O #
#                    bj\" --no_cse --no_unroll --no_inline --no_code_motion   #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h" #
#                     -I "F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\tsi #
#                    \..\..\..\src\projects\tsi\" -I "F:\My                   #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\common\" -I "F:\My Works\K60\Kinetis512\kinetis-sc\bu #
#                    ild\iar\tsi\..\..\..\src\cpu\" -I "F:\My                 #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\cpu\headers\" -I "F:\My Works\K60\Kinetis512\kinetis- #
#                    sc\build\iar\tsi\..\..\..\src\drivers\uart\" -I "F:\My   #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\drivers\mcg\" -I "F:\My Works\K60\Kinetis512\kinetis- #
#                    sc\build\iar\tsi\..\..\..\src\drivers\wdog\" -I "F:\My   #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\..\..\..\s #
#                    rc\platforms\" -I "F:\My Works\K60\Kinetis512\kinetis-sc #
#                    \build\iar\tsi\..\" -Ol --use_c++_inline                 #
#    List file    =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_ #
#                    64KB\List\printf.lst                                     #
#    Object file  =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\tsi\RAM_ #
#                    64KB\Obj\printf.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\My Works\K60\Kinetis512\kinetis-sc\src\common\printf.c
      1          /*
      2           * File:        printk.c
      3           * Purpose:     The standard C library routine printf(), but without
      4           *              all the baggage.
      5           */
      6          
      7          #include "common.h"
      8          #include <stdarg.h>
      9          
     10          /********************************************************************/
     11          
     12          typedef struct
     13          {
     14              int dest;
     15              void (*func)(char);
     16              char *loc;
     17          } PRINTK_INFO;
     18          
     19          int 
     20          printk (PRINTK_INFO *, const char *, va_list);
     21          
     22          /********************************************************************/
     23          
     24          #define DEST_CONSOLE    (1)
     25          #define DEST_STRING     (2)
     26          
     27          #define FLAGS_MINUS     (0x01)
     28          #define FLAGS_PLUS      (0x02)
     29          #define FLAGS_SPACE     (0x04)
     30          #define FLAGS_ZERO      (0x08)
     31          #define FLAGS_POUND     (0x10)
     32          
     33          #define IS_FLAG_MINUS(a)    (a & FLAGS_MINUS)
     34          #define IS_FLAG_PLUS(a)     (a & FLAGS_PLUS)
     35          #define IS_FLAG_SPACE(a)    (a & FLAGS_SPACE)
     36          #define IS_FLAG_ZERO(a)     (a & FLAGS_ZERO)
     37          #define IS_FLAG_POUND(a)    (a & FLAGS_POUND)
     38          
     39          #define LENMOD_h        (0x01)
     40          #define LENMOD_l        (0x02)
     41          #define LENMOD_L        (0x04)
     42          
     43          #define IS_LENMOD_h(a)  (a & LENMOD_h)
     44          #define IS_LENMOD_l(a)  (a & LENMOD_l)
     45          #define IS_LENMOD_L(a)  (a & LENMOD_L)
     46          
     47          #define FMT_d   (0x0001)
     48          #define FMT_o   (0x0002)
     49          #define FMT_x   (0x0004)
     50          #define FMT_X   (0x0008)
     51          #define FMT_u   (0x0010)
     52          #define FMT_c   (0x0020)
     53          #define FMT_s   (0x0040)
     54          #define FMT_p   (0x0080)
     55          #define FMT_n   (0x0100)
     56          
     57          #define IS_FMT_d(a)     (a & FMT_d)
     58          #define IS_FMT_o(a)     (a & FMT_o)
     59          #define IS_FMT_x(a)     (a & FMT_x)
     60          #define IS_FMT_X(a)     (a & FMT_X)
     61          #define IS_FMT_u(a)     (a & FMT_u)
     62          #define IS_FMT_c(a)     (a & FMT_c)
     63          #define IS_FMT_s(a)     (a & FMT_s)
     64          #define IS_FMT_p(a)     (a & FMT_p)
     65          #define IS_FMT_n(a)     (a & FMT_n)
     66          
     67          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     68          static void
     69          printk_putc (int c, int *count, PRINTK_INFO *info)
     70          {
   \                     printk_putc:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C00               MOVS     R4,R1
     71              switch (info->dest)
   \   00000004   1168               LDR      R1,[R2, #+0]
   \   00000006   0129               CMP      R1,#+1
   \   00000008   02D0               BEQ.N    ??printk_putc_0
   \   0000000A   0229               CMP      R1,#+2
   \   0000000C   04D0               BEQ.N    ??printk_putc_1
   \   0000000E   09E0               B.N      ??printk_putc_2
     72              {
     73                  case DEST_CONSOLE:
     74                      info->func((char)c);
   \                     ??printk_putc_0:
   \   00000010   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   5168               LDR      R1,[R2, #+4]
   \   00000014   8847               BLX      R1
     75                      break;
   \   00000016   05E0               B.N      ??printk_putc_3
     76                  case DEST_STRING:
     77                      *(info->loc) = (unsigned char)c;
   \                     ??printk_putc_1:
   \   00000018   9168               LDR      R1,[R2, #+8]
   \   0000001A   0870               STRB     R0,[R1, #+0]
     78                      ++(info->loc);
   \   0000001C   9068               LDR      R0,[R2, #+8]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   9060               STR      R0,[R2, #+8]
     79                      break;
   \   00000022   FFE7               B.N      ??printk_putc_3
     80                  default:
     81                      break;
     82              }
     83              *count += 1;
   \                     ??printk_putc_2:
   \                     ??printk_putc_3:
   \   00000024   2068               LDR      R0,[R4, #+0]
   \   00000026   401C               ADDS     R0,R0,#+1
   \   00000028   2060               STR      R0,[R4, #+0]
     84          }
   \   0000002A   10BD               POP      {R4,PC}          ;; return
     85          
     86          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          static int
     88          printk_mknumstr (char *numstr, void *nump, int neg, int radix)
     89          {
   \                     printk_mknumstr:
   \   00000000   30B4               PUSH     {R4,R5}
   \   00000002   1C00               MOVS     R4,R3
     90              int a,b,c;
     91              unsigned int ua,ub,uc;
     92          
     93              int nlen;
     94              char *nstrp;
     95          
     96              nlen = 0;
   \   00000004   0023               MOVS     R3,#+0
     97              nstrp = numstr;
     98              *nstrp++ = '\0';
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   0570               STRB     R5,[R0, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
     99          
    100              if (neg)
   \   0000000C   002A               CMP      R2,#+0
   \   0000000E   19D0               BEQ.N    ??printk_mknumstr_0
    101              {
    102                  a = *(int *)nump;
   \   00000010   0968               LDR      R1,[R1, #+0]
    103                  if (a == 0)
   \   00000012   0029               CMP      R1,#+0
   \   00000014   0AD1               BNE.N    ??printk_mknumstr_1
    104                  {
    105                      *nstrp = '0';
   \   00000016   3021               MOVS     R1,#+48
   \   00000018   0170               STRB     R1,[R0, #+0]
    106                      ++nlen;
   \   0000001A   5B1C               ADDS     R3,R3,#+1
    107                      goto done;
    108                  }
    109                  while (a != 0)
    110                  {
    111                      b = (int)a / (int)radix;
    112                      c = (int)a - ((int)b * (int)radix);
    113                      if (c < 0)
    114                      {
    115                          c = ~c + 1 + '0';
    116                      }
    117                      else
    118                      {
    119                          c = c + '0';
    120                      }
    121                      a = b;
    122                      *nstrp++ = (char)c;
    123                      ++nlen;
    124                  }
    125              }
    126              else
    127              {
    128                  ua = *(unsigned int *)nump;
    129                  if (ua == 0)
    130                  {
    131                      *nstrp = '0';
    132                      ++nlen;
    133                      goto done;
    134                  }
    135                  while (ua != 0)
    136                  {
    137                      ub = (unsigned int)ua / (unsigned int)radix;
    138                      uc = (unsigned int)ua - ((unsigned int)ub * (unsigned int)radix);
    139                      if (uc < 10)
    140                      {
    141                          uc = uc + '0';
    142                      }
    143                      else
    144                      {
    145                          uc = uc - 10 + 'A';
    146                      }
    147                      ua = ub;
    148                      *nstrp++ = (char)uc;
    149                      ++nlen;
    150                  }
    151              }
    152              done:
    153              return nlen;
   \                     ??printk_mknumstr_2:
   \   0000001C   1800               MOVS     R0,R3
   \   0000001E   30BC               POP      {R4,R5}
   \   00000020   7047               BX       LR               ;; return
   \                     ??printk_mknumstr_3:
   \   00000022   3035               ADDS     R5,R5,#+48
   \                     ??printk_mknumstr_4:
   \   00000024   1100               MOVS     R1,R2
   \   00000026   0570               STRB     R5,[R0, #+0]
   \   00000028   401C               ADDS     R0,R0,#+1
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \                     ??printk_mknumstr_1:
   \   0000002C   0029               CMP      R1,#+0
   \   0000002E   F5D0               BEQ.N    ??printk_mknumstr_2
   \   00000030   91FBF4F2           SDIV     R2,R1,R4
   \   00000034   04FB1215           MLS      R5,R4,R2,R1
   \   00000038   002D               CMP      R5,#+0
   \   0000003A   F2D5               BPL.N    ??printk_mknumstr_3
   \   0000003C   E943               MVNS     R1,R5
   \   0000003E   11F13105           ADDS     R5,R1,#+49
   \   00000042   EFE7               B.N      ??printk_mknumstr_4
   \                     ??printk_mknumstr_0:
   \   00000044   0968               LDR      R1,[R1, #+0]
   \   00000046   0029               CMP      R1,#+0
   \   00000048   08D1               BNE.N    ??printk_mknumstr_5
   \   0000004A   3021               MOVS     R1,#+48
   \   0000004C   0170               STRB     R1,[R0, #+0]
   \   0000004E   5B1C               ADDS     R3,R3,#+1
   \   00000050   E4E7               B.N      ??printk_mknumstr_2
   \                     ??printk_mknumstr_6:
   \   00000052   3735               ADDS     R5,R5,#+55
   \                     ??printk_mknumstr_7:
   \   00000054   1100               MOVS     R1,R2
   \   00000056   0570               STRB     R5,[R0, #+0]
   \   00000058   401C               ADDS     R0,R0,#+1
   \   0000005A   5B1C               ADDS     R3,R3,#+1
   \                     ??printk_mknumstr_5:
   \   0000005C   0029               CMP      R1,#+0
   \   0000005E   DDD0               BEQ.N    ??printk_mknumstr_2
   \   00000060   B1FBF4F2           UDIV     R2,R1,R4
   \   00000064   04FB1215           MLS      R5,R4,R2,R1
   \   00000068   0A2D               CMP      R5,#+10
   \   0000006A   F2D2               BCS.N    ??printk_mknumstr_6
   \   0000006C   3035               ADDS     R5,R5,#+48
   \   0000006E   F1E7               B.N      ??printk_mknumstr_7
    154          }
    155          
    156          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    157          static void
    158          printk_pad_zero (int curlen, int field_width, int *count, PRINTK_INFO *info)
    159          {
   \                     printk_pad_zero:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   1F00               MOVS     R7,R3
    160              int i;
    161          
    162              for (i = curlen; i < field_width; i++)
   \   0000000A   05E0               B.N      ??printk_pad_zero_0
    163              {
    164                  printk_putc('0',count, info);
   \                     ??printk_pad_zero_1:
   \   0000000C   3A00               MOVS     R2,R7
   \   0000000E   3100               MOVS     R1,R6
   \   00000010   3020               MOVS     R0,#+48
   \   00000012   ........           BL       printk_putc
    165              }
   \   00000016   641C               ADDS     R4,R4,#+1
   \                     ??printk_pad_zero_0:
   \   00000018   AC42               CMP      R4,R5
   \   0000001A   F7DB               BLT.N    ??printk_pad_zero_1
    166          }
   \   0000001C   F1BD               POP      {R0,R4-R7,PC}    ;; return
    167          
    168          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    169          static void
    170          printk_pad_space (int curlen, int field_width, int *count, PRINTK_INFO *info)
    171          {
   \                     printk_pad_space:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   1F00               MOVS     R7,R3
    172              int i;
    173          
    174              for (i = curlen; i < field_width; i++)
   \   0000000A   05E0               B.N      ??printk_pad_space_0
    175              {
    176                  printk_putc(' ',count, info);
   \                     ??printk_pad_space_1:
   \   0000000C   3A00               MOVS     R2,R7
   \   0000000E   3100               MOVS     R1,R6
   \   00000010   2020               MOVS     R0,#+32
   \   00000012   ........           BL       printk_putc
    177              }
   \   00000016   641C               ADDS     R4,R4,#+1
   \                     ??printk_pad_space_0:
   \   00000018   AC42               CMP      R4,R5
   \   0000001A   F7DB               BLT.N    ??printk_pad_space_1
    178          }
   \   0000001C   F1BD               POP      {R0,R4-R7,PC}    ;; return
    179          
    180          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          int
    182          printk (PRINTK_INFO *info, const char *fmt, va_list ap)
    183          {
   \                     printk:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   8DB0               SUB      SP,SP,#+52
   \   00000006   0500               MOVS     R5,R0
   \   00000008   1600               MOVS     R6,R2
    184              /* va_list ap; */
    185              char *p;
    186              int c;
    187          
    188              char vstr[33];
    189              char *vstrp;
    190              int vlen;
    191          
    192              int done;
    193              int count = 0;
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0090               STR      R0,[SP, #+0]
    194          
    195              int flags_used;
    196              int field_width;
    197          #if 0
    198              int precision_used;
    199              int precision_width;
    200              int length_modifier;
    201          #endif
    202          
    203              int ival;
    204              int schar, dschar;
    205              int *ivalp;
    206              char *sval;
    207              int cval;
    208              unsigned int uval;
    209          
    210              /*
    211               * Start parsing apart the format string and display appropriate
    212               * formats and data.
    213               */
    214              for (p = (char *)fmt; (c = *p) != 0; p++)
   \   0000000E   0C00               MOVS     R4,R1
   \   00000010   05E0               B.N      ??printk_0
    215              {
    216                  /*
    217                   * All formats begin with a '%' marker.  Special chars like
    218                   * '\n' or '\t' are normally converted to the appropriate
    219                   * character by the __compiler__.  Thus, no need for this
    220                   * routine to account for the '\' character.
    221                   */
    222                  if (c != '%')
    223                  {
    224                      /*
    225                       * This needs to be replaced with something like
    226                       * 'out_char()' or call an OS routine.
    227                       */
    228          #ifndef UNIX_DEBUG
    229                      if (c != '\n')
    230                      {
    231                          printk_putc(c, &count, info);
    232                      }
    233                      else
    234                      {
    235                          printk_putc(0x0D /* CR */, &count, info);
    236                          printk_putc(0x0A /* LF */, &count, info);
    237                      }
    238          #else
    239                      printk_putc(c, &count, info);
    240          #endif
    241          
    242                      /*
    243                       * By using 'continue', the next iteration of the loop
    244                       * is used, skipping the code that follows.
    245                       */
    246                      continue;
    247                  }
    248          
    249                  /*
    250                   * First check for specification modifier flags.
    251                   */
    252                  flags_used = 0;
    253                  done = FALSE;
    254                  while (!done)
    255                  {
    256                      switch (/* c = */ *++p)
    257                      {
    258                          case '-':
    259                              flags_used |= FLAGS_MINUS;
    260                              break;
    261                          case '+':
    262                              flags_used |= FLAGS_PLUS;
    263                              break;
    264                          case ' ':
    265                              flags_used |= FLAGS_SPACE;
    266                              break;
    267                          case '0':
    268                              flags_used |= FLAGS_ZERO;
    269                              break;
    270                          case '#':
    271                              flags_used |= FLAGS_POUND;
    272                              break;
    273                          default:
    274                              /* we've gone one char too far */
    275                              --p;
    276                              done = TRUE;
    277                              break;
    278                      }
    279                  }
    280          
    281                  /*
    282                   * Next check for minimum field width.
    283                   */
    284                  field_width = 0;
    285                  done = FALSE;
    286                  while (!done)
    287                  {
    288                      switch (c = *++p)
    289                      {
    290                          case '0':
    291                          case '1':
    292                          case '2':
    293                          case '3':
    294                          case '4':
    295                          case '5':
    296                          case '6':
    297                          case '7':
    298                          case '8':
    299                          case '9':
    300                              field_width = (field_width * 10) + (c - '0');
    301                              break;
    302                          default:
    303                              /* we've gone one char too far */
    304                              --p;
    305                              done = TRUE;
    306                              break;
    307                      }
    308                  }
    309          
    310                  /*
    311                   * Next check for the width and precision field separator.
    312                   */
    313                  if (/* (c = *++p) */ *++p == '.')
    314                  {
    315                      /* precision_used = TRUE; */
    316          
    317                      /*
    318                       * Must get precision field width, if present.
    319                       */
    320                      /* precision_width = 0; */
    321                      done = FALSE;
    322                      while (!done)
    323                      {
    324                          switch (/* c = uncomment if used below */ *++p)
    325                          {
    326                              case '0':
    327                              case '1':
    328                              case '2':
    329                              case '3':
    330                              case '4':
    331                              case '5':
    332                              case '6':
    333                              case '7':
    334                              case '8':
    335                              case '9':
    336          #if 0
    337                                  precision_width = (precision_width * 10) +
    338                                      (c - '0');
    339          #endif
    340                                  break;
    341                              default:
    342                                  /* we've gone one char too far */
    343                                  --p;
    344                                  done = TRUE;
    345                                  break;
    346                          }
    347                      }
    348                  }
    349                  else
    350                  {
    351                      /* we've gone one char too far */
    352                      --p;
    353          #if 0
    354                      precision_used = FALSE;
    355                      precision_width = 0;
    356          #endif
    357                  }
    358          
    359                  /*
    360                   * Check for the length modifier.
    361                   */
    362                  /* length_modifier = 0; */
    363                  switch (/* c = */ *++p)
    364                  {
    365                      case 'h':
    366                          /* length_modifier |= LENMOD_h; */
    367                          break;
    368                      case 'l':
    369                          /* length_modifier |= LENMOD_l; */
    370                          break;
    371                      case 'L':
    372                          /* length_modifier |= LENMOD_L; */
    373                          break;
    374                      default:
    375                          /* we've gone one char too far */
    376                          --p;
    377                          break;
    378                  }
    379          
    380                  /*
    381                   * Now we're ready to examine the format.
    382                   */
    383                  switch (c = *++p)
    384                  {
    385                      case 'd':
    386                      case 'i':
    387                          ival = (int)va_arg(ap, int);
    388                          vlen = printk_mknumstr(vstr,&ival,TRUE,10);
    389                          vstrp = &vstr[vlen];
    390          
    391                          if (ival < 0)
    392                          {
    393                              schar = '-';
    394                              ++vlen;
    395                          }
    396                          else
    397                          {
    398                              if (IS_FLAG_PLUS(flags_used))
    399                              {
    400                                  schar = '+';
    401                                  ++vlen;
    402                              }
    403                              else
    404                              {
    405                                  if (IS_FLAG_SPACE(flags_used))
    406                                  {
    407                                      schar = ' ';
    408                                      ++vlen;
    409                                  }
    410                                  else
    411                                  {
    412                                      schar = 0;
    413                                  }
    414                              }
    415                          }
    416                          dschar = FALSE;
    417                      
    418                          /*
    419                           * do the ZERO pad.
    420                           */
    421                          if (IS_FLAG_ZERO(flags_used))
    422                          {
    423                              if (schar)
    424                                  printk_putc(schar, &count, info);
    425                              dschar = TRUE;
    426                      
    427                              printk_pad_zero (vlen, field_width, &count, info);
    428                              vlen = field_width;
    429                          }
    430                          else
    431                          {
    432                              if (!IS_FLAG_MINUS(flags_used))
    433                              {
    434                                  printk_pad_space (vlen, field_width, &count, info);
    435                      
    436                                  if (schar)
    437                                      printk_putc(schar, &count, info);
    438                                  dschar = TRUE;
    439                              }
    440                          }
    441                      
    442                          /* the string was built in reverse order, now display in */
    443                          /* correct order */
    444                          if (!dschar && schar)
    445                          {
    446                              printk_putc(schar, &count, info);
    447                          }
    448                          goto cont_xd;
    449          
    450                      case 'x':
    451                      case 'X':
    452                          uval = (unsigned int)va_arg(ap, unsigned int);
    453                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
    454                          vstrp = &vstr[vlen];
    455          
    456                          dschar = FALSE;
    457                          if (IS_FLAG_ZERO(flags_used))
    458                          {
    459                              if (IS_FLAG_POUND(flags_used))
    460                              {
    461                                  printk_putc('0', &count, info);
    462                                  printk_putc('x', &count, info);
    463                                  /*vlen += 2;*/
    464                                  dschar = TRUE;
    465                              }
    466                              printk_pad_zero (vlen, field_width, &count, info);
    467                              vlen = field_width;
    468                          }
    469                          else
    470                          {
    471                              if (!IS_FLAG_MINUS(flags_used))
    472                              {
    473                                  if (IS_FLAG_POUND(flags_used))
    474                                  {
    475                                      vlen += 2;
    476                                  }
    477                                  printk_pad_space (vlen, field_width, &count, info);
    478                                  if (IS_FLAG_POUND(flags_used))
    479                                  {
    480                                      printk_putc('0', &count, info);
    481                                      printk_putc('x', &count, info);
    482                                      dschar = TRUE;
    483                                  }
    484                              }
    485                          }
    486          
    487                          if ((IS_FLAG_POUND(flags_used)) && !dschar)
    488                          {
    489                              printk_putc('0', &count, info);
    490                              printk_putc('x', &count, info);
    491                              vlen += 2;
    492                          }
    493                          goto cont_xd;
    494          
    495                      case 'o':
    496                          uval = (unsigned int)va_arg(ap, unsigned int);
    497                          vlen = printk_mknumstr(vstr,&uval,FALSE,8);
    498                          goto cont_u;
    499                      case 'b':
    500                          uval = (unsigned int)va_arg(ap, unsigned int);
    501                          vlen = printk_mknumstr(vstr,&uval,FALSE,2);
    502                          goto cont_u;
    503                      case 'p':
    504                          uval = (unsigned int)va_arg(ap, void *);
    505                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
    506                          goto cont_u;
    507                      case 'u':
    508                          uval = (unsigned int)va_arg(ap, unsigned int);
    509                          vlen = printk_mknumstr(vstr,&uval,FALSE,10);
    510          
    511                          cont_u:
    512                              vstrp = &vstr[vlen];
    513          
    514                              if (IS_FLAG_ZERO(flags_used))
    515                              {
    516                                  printk_pad_zero (vlen, field_width, &count, info);
    517                                  vlen = field_width;
    518                              }
    519                              else
    520                              {
    521                                  if (!IS_FLAG_MINUS(flags_used))
    522                                  {
    523                                      printk_pad_space (vlen, field_width, &count, info);
    524                                  }
    525                              }
    526          
    527                          cont_xd:
    528                              while (*vstrp)
    529                                  printk_putc(*vstrp--, &count, info);
    530          
    531                              if (IS_FLAG_MINUS(flags_used))
    532                              {
    533                                  printk_pad_space (vlen, field_width, &count, info);
    534                              }
    535                          break;
    536          
    537                      case 'c':
    538                          cval = (char)va_arg(ap, unsigned int);
    539                          printk_putc(cval,&count, info);
    540                          break;
    541                      case 's':
    542                          sval = (char *)va_arg(ap, char *);
    543                          if (sval)
    544                          {
    545                              vlen = strlen(sval);
    546                              if (!IS_FLAG_MINUS(flags_used))
    547                              {
    548                                  printk_pad_space (vlen, field_width, &count, info);
    549                              }
    550                              while (*sval)
    551                                  printk_putc(*sval++,&count, info);
    552                              if (IS_FLAG_MINUS(flags_used))
    553                              {
    554                                  printk_pad_space (vlen, field_width, &count, info);
    555                              }
    556                          }
    557                          break;
    558                      case 'n':
    559                          ivalp = (int *)va_arg(ap, int *);
    560                          *ivalp = count;
    561                          break;
    562                      default:
    563                          printk_putc(c,&count, info);
   \                     ??printk_1:
   \   00000012   2A00               MOVS     R2,R5
   \   00000014   00A9               ADD      R1,SP,#+0
   \   00000016   1800               MOVS     R0,R3
   \   00000018   ........           BL       printk_putc
    564                          break;
   \                     ??printk_2:
   \   0000001C   641C               ADDS     R4,R4,#+1
   \                     ??printk_0:
   \   0000001E   2378               LDRB     R3,[R4, #+0]
   \   00000020   002B               CMP      R3,#+0
   \   00000022   00F0CE81           BEQ.W    ??printk_3
   \   00000026   252B               CMP      R3,#+37
   \   00000028   12D0               BEQ.N    ??printk_4
   \   0000002A   0A2B               CMP      R3,#+10
   \   0000002C   05D0               BEQ.N    ??printk_5
   \   0000002E   2A00               MOVS     R2,R5
   \   00000030   00A9               ADD      R1,SP,#+0
   \   00000032   1800               MOVS     R0,R3
   \   00000034   ........           BL       printk_putc
   \   00000038   09E0               B.N      ??printk_6
   \                     ??printk_5:
   \   0000003A   2A00               MOVS     R2,R5
   \   0000003C   00A9               ADD      R1,SP,#+0
   \   0000003E   0D20               MOVS     R0,#+13
   \   00000040   ........           BL       printk_putc
   \   00000044   2A00               MOVS     R2,R5
   \   00000046   00A9               ADD      R1,SP,#+0
   \   00000048   0A20               MOVS     R0,#+10
   \   0000004A   ........           BL       printk_putc
   \                     ??printk_6:
   \   0000004E   E5E7               B.N      ??printk_2
   \                     ??printk_4:
   \   00000050   0027               MOVS     R7,#+0
   \   00000052   0021               MOVS     R1,#+0
   \   00000054   01E0               B.N      ??printk_7
   \                     ??printk_8:
   \   00000056   57F00107           ORRS     R7,R7,#0x1
   \                     ??printk_7:
   \   0000005A   0029               CMP      R1,#+0
   \   0000005C   1BD1               BNE.N    ??printk_9
   \   0000005E   641C               ADDS     R4,R4,#+1
   \   00000060   2078               LDRB     R0,[R4, #+0]
   \   00000062   2028               CMP      R0,#+32
   \   00000064   0BD0               BEQ.N    ??printk_10
   \   00000066   2328               CMP      R0,#+35
   \   00000068   0FD0               BEQ.N    ??printk_11
   \   0000006A   2B28               CMP      R0,#+43
   \   0000006C   04D0               BEQ.N    ??printk_12
   \   0000006E   2D28               CMP      R0,#+45
   \   00000070   F1D0               BEQ.N    ??printk_8
   \   00000072   3028               CMP      R0,#+48
   \   00000074   06D0               BEQ.N    ??printk_13
   \   00000076   0BE0               B.N      ??printk_14
   \                     ??printk_12:
   \   00000078   57F00207           ORRS     R7,R7,#0x2
   \   0000007C   EDE7               B.N      ??printk_7
   \                     ??printk_10:
   \   0000007E   57F00407           ORRS     R7,R7,#0x4
   \   00000082   EAE7               B.N      ??printk_7
   \                     ??printk_13:
   \   00000084   57F00807           ORRS     R7,R7,#0x8
   \   00000088   E7E7               B.N      ??printk_7
   \                     ??printk_11:
   \   0000008A   57F01007           ORRS     R7,R7,#0x10
   \   0000008E   E4E7               B.N      ??printk_7
   \                     ??printk_14:
   \   00000090   641E               SUBS     R4,R4,#+1
   \   00000092   0121               MOVS     R1,#+1
   \   00000094   E1E7               B.N      ??printk_7
   \                     ??printk_9:
   \   00000096   5FF00008           MOVS     R8,#+0
   \   0000009A   0021               MOVS     R1,#+0
   \   0000009C   04E0               B.N      ??printk_15
   \                     ??printk_16:
   \   0000009E   0A20               MOVS     R0,#+10
   \   000000A0   00FB0830           MLA      R0,R0,R8,R3
   \   000000A4   B0F13008           SUBS     R8,R0,#+48
   \                     ??printk_15:
   \   000000A8   0029               CMP      R1,#+0
   \   000000AA   08D1               BNE.N    ??printk_17
   \   000000AC   641C               ADDS     R4,R4,#+1
   \   000000AE   2378               LDRB     R3,[R4, #+0]
   \   000000B0   1800               MOVS     R0,R3
   \   000000B2   3038               SUBS     R0,R0,#+48
   \   000000B4   0928               CMP      R0,#+9
   \   000000B6   F2D9               BLS.N    ??printk_16
   \                     ??printk_18:
   \   000000B8   641E               SUBS     R4,R4,#+1
   \   000000BA   0121               MOVS     R1,#+1
   \   000000BC   F4E7               B.N      ??printk_15
   \                     ??printk_17:
   \   000000BE   641C               ADDS     R4,R4,#+1
   \   000000C0   2078               LDRB     R0,[R4, #+0]
   \   000000C2   2E28               CMP      R0,#+46
   \   000000C4   0BD1               BNE.N    ??printk_19
   \   000000C6   0021               MOVS     R1,#+0
   \   000000C8   FFE7               B.N      ??printk_20
   \                     ??printk_21:
   \                     ??printk_20:
   \   000000CA   0029               CMP      R1,#+0
   \   000000CC   08D1               BNE.N    ??printk_22
   \   000000CE   641C               ADDS     R4,R4,#+1
   \   000000D0   2078               LDRB     R0,[R4, #+0]
   \   000000D2   3038               SUBS     R0,R0,#+48
   \   000000D4   0928               CMP      R0,#+9
   \   000000D6   F8D9               BLS.N    ??printk_21
   \                     ??printk_23:
   \   000000D8   641E               SUBS     R4,R4,#+1
   \   000000DA   0121               MOVS     R1,#+1
   \   000000DC   F5E7               B.N      ??printk_20
   \                     ??printk_19:
   \   000000DE   641E               SUBS     R4,R4,#+1
   \                     ??printk_22:
   \   000000E0   641C               ADDS     R4,R4,#+1
   \   000000E2   2078               LDRB     R0,[R4, #+0]
   \   000000E4   4C28               CMP      R0,#+76
   \   000000E6   06D0               BEQ.N    ??printk_24
   \   000000E8   6828               CMP      R0,#+104
   \   000000EA   02D0               BEQ.N    ??printk_25
   \   000000EC   6C28               CMP      R0,#+108
   \   000000EE   01D0               BEQ.N    ??printk_26
   \   000000F0   02E0               B.N      ??printk_27
   \                     ??printk_25:
   \   000000F2   02E0               B.N      ??printk_28
   \                     ??printk_26:
   \   000000F4   01E0               B.N      ??printk_28
   \                     ??printk_24:
   \   000000F6   00E0               B.N      ??printk_28
   \                     ??printk_27:
   \   000000F8   641E               SUBS     R4,R4,#+1
   \                     ??printk_28:
   \   000000FA   641C               ADDS     R4,R4,#+1
   \   000000FC   2378               LDRB     R3,[R4, #+0]
   \   000000FE   1800               MOVS     R0,R3
   \   00000100   5828               CMP      R0,#+88
   \   00000102   78D0               BEQ.N    ??printk_29
   \   00000104   6228               CMP      R0,#+98
   \   00000106   00F0DA80           BEQ.W    ??printk_30
   \   0000010A   6328               CMP      R0,#+99
   \   0000010C   00F02481           BEQ.W    ??printk_31
   \   00000110   6428               CMP      R0,#+100
   \   00000112   13D0               BEQ.N    ??printk_32
   \   00000114   6928               CMP      R0,#+105
   \   00000116   11D0               BEQ.N    ??printk_32
   \   00000118   6E28               CMP      R0,#+110
   \   0000011A   00F04D81           BEQ.W    ??printk_33
   \   0000011E   6F28               CMP      R0,#+111
   \   00000120   00F0C280           BEQ.W    ??printk_34
   \   00000124   7028               CMP      R0,#+112
   \   00000126   00F0D580           BEQ.W    ??printk_35
   \   0000012A   7328               CMP      R0,#+115
   \   0000012C   00F01B81           BEQ.W    ??printk_36
   \   00000130   7528               CMP      R0,#+117
   \   00000132   00F0DA80           BEQ.W    ??printk_37
   \   00000136   7828               CMP      R0,#+120
   \   00000138   5DD0               BEQ.N    ??printk_29
   \   0000013A   6AE7               B.N      ??printk_1
   \                     ??printk_32:
   \   0000013C   3068               LDR      R0,[R6, #+0]
   \   0000013E   0390               STR      R0,[SP, #+12]
   \   00000140   361D               ADDS     R6,R6,#+4
   \   00000142   0A23               MOVS     R3,#+10
   \   00000144   0122               MOVS     R2,#+1
   \   00000146   03A9               ADD      R1,SP,#+12
   \   00000148   04A8               ADD      R0,SP,#+16
   \   0000014A   ........           BL       printk_mknumstr
   \   0000014E   8246               MOV      R10,R0
   \   00000150   04A8               ADD      R0,SP,#+16
   \   00000152   1AEB0009           ADDS     R9,R10,R0
   \   00000156   0398               LDR      R0,[SP, #+12]
   \   00000158   0028               CMP      R0,#+0
   \   0000015A   04D5               BPL.N    ??printk_38
   \   0000015C   2D20               MOVS     R0,#+45
   \   0000015E   0290               STR      R0,[SP, #+8]
   \   00000160   1AF1010A           ADDS     R10,R10,#+1
   \   00000164   11E0               B.N      ??printk_39
   \                     ??printk_38:
   \   00000166   3800               MOVS     R0,R7
   \   00000168   8007               LSLS     R0,R0,#+30
   \   0000016A   04D5               BPL.N    ??printk_40
   \   0000016C   2B20               MOVS     R0,#+43
   \   0000016E   0290               STR      R0,[SP, #+8]
   \   00000170   1AF1010A           ADDS     R10,R10,#+1
   \   00000174   09E0               B.N      ??printk_39
   \                     ??printk_40:
   \   00000176   3800               MOVS     R0,R7
   \   00000178   4007               LSLS     R0,R0,#+29
   \   0000017A   04D5               BPL.N    ??printk_41
   \   0000017C   2020               MOVS     R0,#+32
   \   0000017E   0290               STR      R0,[SP, #+8]
   \   00000180   1AF1010A           ADDS     R10,R10,#+1
   \   00000184   01E0               B.N      ??printk_39
   \                     ??printk_41:
   \   00000186   0020               MOVS     R0,#+0
   \   00000188   0290               STR      R0,[SP, #+8]
   \                     ??printk_39:
   \   0000018A   5FF0000B           MOVS     R11,#+0
   \   0000018E   3800               MOVS     R0,R7
   \   00000190   0007               LSLS     R0,R0,#+28
   \   00000192   11D5               BPL.N    ??printk_42
   \   00000194   0298               LDR      R0,[SP, #+8]
   \   00000196   0028               CMP      R0,#+0
   \   00000198   04D0               BEQ.N    ??printk_43
   \   0000019A   2A00               MOVS     R2,R5
   \   0000019C   00A9               ADD      R1,SP,#+0
   \   0000019E   0298               LDR      R0,[SP, #+8]
   \   000001A0   ........           BL       printk_putc
   \                     ??printk_43:
   \   000001A4   5FF0010B           MOVS     R11,#+1
   \   000001A8   2B00               MOVS     R3,R5
   \   000001AA   00AA               ADD      R2,SP,#+0
   \   000001AC   4146               MOV      R1,R8
   \   000001AE   5046               MOV      R0,R10
   \   000001B0   ........           BL       printk_pad_zero
   \   000001B4   C246               MOV      R10,R8
   \   000001B6   12E0               B.N      ??printk_44
   \                     ??printk_42:
   \   000001B8   3800               MOVS     R0,R7
   \   000001BA   C007               LSLS     R0,R0,#+31
   \   000001BC   0FD4               BMI.N    ??printk_44
   \   000001BE   2B00               MOVS     R3,R5
   \   000001C0   00AA               ADD      R2,SP,#+0
   \   000001C2   4146               MOV      R1,R8
   \   000001C4   5046               MOV      R0,R10
   \   000001C6   ........           BL       printk_pad_space
   \   000001CA   0298               LDR      R0,[SP, #+8]
   \   000001CC   0028               CMP      R0,#+0
   \   000001CE   04D0               BEQ.N    ??printk_45
   \   000001D0   2A00               MOVS     R2,R5
   \   000001D2   00A9               ADD      R1,SP,#+0
   \   000001D4   0298               LDR      R0,[SP, #+8]
   \   000001D6   ........           BL       printk_putc
   \                     ??printk_45:
   \   000001DA   5FF0010B           MOVS     R11,#+1
   \                     ??printk_44:
   \   000001DE   BBF1000F           CMP      R11,#+0
   \   000001E2   07D1               BNE.N    ??printk_46
   \   000001E4   0298               LDR      R0,[SP, #+8]
   \   000001E6   0028               CMP      R0,#+0
   \   000001E8   04D0               BEQ.N    ??printk_46
   \   000001EA   2A00               MOVS     R2,R5
   \   000001EC   00A9               ADD      R1,SP,#+0
   \   000001EE   0298               LDR      R0,[SP, #+8]
   \   000001F0   ........           BL       printk_putc
   \                     ??printk_46:
   \   000001F4   A3E0               B.N      ??printk_47
   \                     ??printk_29:
   \   000001F6   3068               LDR      R0,[R6, #+0]
   \   000001F8   0190               STR      R0,[SP, #+4]
   \   000001FA   361D               ADDS     R6,R6,#+4
   \   000001FC   1023               MOVS     R3,#+16
   \   000001FE   0022               MOVS     R2,#+0
   \   00000200   01A9               ADD      R1,SP,#+4
   \   00000202   04A8               ADD      R0,SP,#+16
   \   00000204   ........           BL       printk_mknumstr
   \   00000208   8246               MOV      R10,R0
   \   0000020A   04A8               ADD      R0,SP,#+16
   \   0000020C   1AEB0009           ADDS     R9,R10,R0
   \   00000210   5FF0000B           MOVS     R11,#+0
   \   00000214   3800               MOVS     R0,R7
   \   00000216   0007               LSLS     R0,R0,#+28
   \   00000218   16D5               BPL.N    ??printk_48
   \   0000021A   3800               MOVS     R0,R7
   \   0000021C   C006               LSLS     R0,R0,#+27
   \   0000021E   0BD5               BPL.N    ??printk_49
   \   00000220   2A00               MOVS     R2,R5
   \   00000222   00A9               ADD      R1,SP,#+0
   \   00000224   3020               MOVS     R0,#+48
   \   00000226   ........           BL       printk_putc
   \   0000022A   2A00               MOVS     R2,R5
   \   0000022C   00A9               ADD      R1,SP,#+0
   \   0000022E   7820               MOVS     R0,#+120
   \   00000230   ........           BL       printk_putc
   \   00000234   5FF0010B           MOVS     R11,#+1
   \                     ??printk_49:
   \   00000238   2B00               MOVS     R3,R5
   \   0000023A   00AA               ADD      R2,SP,#+0
   \   0000023C   4146               MOV      R1,R8
   \   0000023E   5046               MOV      R0,R10
   \   00000240   ........           BL       printk_pad_zero
   \   00000244   C246               MOV      R10,R8
   \   00000246   1CE0               B.N      ??printk_50
   \                     ??printk_48:
   \   00000248   3800               MOVS     R0,R7
   \   0000024A   C007               LSLS     R0,R0,#+31
   \   0000024C   19D4               BMI.N    ??printk_50
   \   0000024E   3800               MOVS     R0,R7
   \   00000250   C006               LSLS     R0,R0,#+27
   \   00000252   01D5               BPL.N    ??printk_51
   \   00000254   1AF1020A           ADDS     R10,R10,#+2
   \                     ??printk_51:
   \   00000258   2B00               MOVS     R3,R5
   \   0000025A   00AA               ADD      R2,SP,#+0
   \   0000025C   4146               MOV      R1,R8
   \   0000025E   5046               MOV      R0,R10
   \   00000260   ........           BL       printk_pad_space
   \   00000264   3800               MOVS     R0,R7
   \   00000266   C006               LSLS     R0,R0,#+27
   \   00000268   0BD5               BPL.N    ??printk_50
   \   0000026A   2A00               MOVS     R2,R5
   \   0000026C   00A9               ADD      R1,SP,#+0
   \   0000026E   3020               MOVS     R0,#+48
   \   00000270   ........           BL       printk_putc
   \   00000274   2A00               MOVS     R2,R5
   \   00000276   00A9               ADD      R1,SP,#+0
   \   00000278   7820               MOVS     R0,#+120
   \   0000027A   ........           BL       printk_putc
   \   0000027E   5FF0010B           MOVS     R11,#+1
   \                     ??printk_50:
   \   00000282   3800               MOVS     R0,R7
   \   00000284   C006               LSLS     R0,R0,#+27
   \   00000286   0ED5               BPL.N    ??printk_52
   \   00000288   BBF1000F           CMP      R11,#+0
   \   0000028C   0BD1               BNE.N    ??printk_52
   \   0000028E   2A00               MOVS     R2,R5
   \   00000290   00A9               ADD      R1,SP,#+0
   \   00000292   3020               MOVS     R0,#+48
   \   00000294   ........           BL       printk_putc
   \   00000298   2A00               MOVS     R2,R5
   \   0000029A   00A9               ADD      R1,SP,#+0
   \   0000029C   7820               MOVS     R0,#+120
   \   0000029E   ........           BL       printk_putc
   \   000002A2   1AF1020A           ADDS     R10,R10,#+2
   \                     ??printk_52:
   \   000002A6   4AE0               B.N      ??printk_47
   \                     ??printk_34:
   \   000002A8   3068               LDR      R0,[R6, #+0]
   \   000002AA   0190               STR      R0,[SP, #+4]
   \   000002AC   361D               ADDS     R6,R6,#+4
   \   000002AE   0823               MOVS     R3,#+8
   \   000002B0   0022               MOVS     R2,#+0
   \   000002B2   01A9               ADD      R1,SP,#+4
   \   000002B4   04A8               ADD      R0,SP,#+16
   \   000002B6   ........           BL       printk_mknumstr
   \   000002BA   8246               MOV      R10,R0
   \   000002BC   1FE0               B.N      ??printk_53
   \                     ??printk_30:
   \   000002BE   3068               LDR      R0,[R6, #+0]
   \   000002C0   0190               STR      R0,[SP, #+4]
   \   000002C2   361D               ADDS     R6,R6,#+4
   \   000002C4   0223               MOVS     R3,#+2
   \   000002C6   0022               MOVS     R2,#+0
   \   000002C8   01A9               ADD      R1,SP,#+4
   \   000002CA   04A8               ADD      R0,SP,#+16
   \   000002CC   ........           BL       printk_mknumstr
   \   000002D0   8246               MOV      R10,R0
   \   000002D2   14E0               B.N      ??printk_53
   \                     ??printk_35:
   \   000002D4   3068               LDR      R0,[R6, #+0]
   \   000002D6   0190               STR      R0,[SP, #+4]
   \   000002D8   361D               ADDS     R6,R6,#+4
   \   000002DA   1023               MOVS     R3,#+16
   \   000002DC   0022               MOVS     R2,#+0
   \   000002DE   01A9               ADD      R1,SP,#+4
   \   000002E0   04A8               ADD      R0,SP,#+16
   \   000002E2   ........           BL       printk_mknumstr
   \   000002E6   8246               MOV      R10,R0
   \   000002E8   09E0               B.N      ??printk_53
   \                     ??printk_37:
   \   000002EA   3068               LDR      R0,[R6, #+0]
   \   000002EC   0190               STR      R0,[SP, #+4]
   \   000002EE   361D               ADDS     R6,R6,#+4
   \   000002F0   0A23               MOVS     R3,#+10
   \   000002F2   0022               MOVS     R2,#+0
   \   000002F4   01A9               ADD      R1,SP,#+4
   \   000002F6   04A8               ADD      R0,SP,#+16
   \   000002F8   ........           BL       printk_mknumstr
   \   000002FC   8246               MOV      R10,R0
   \                     ??printk_53:
   \   000002FE   04A8               ADD      R0,SP,#+16
   \   00000300   1AEB0009           ADDS     R9,R10,R0
   \   00000304   3800               MOVS     R0,R7
   \   00000306   0007               LSLS     R0,R0,#+28
   \   00000308   07D5               BPL.N    ??printk_54
   \   0000030A   2B00               MOVS     R3,R5
   \   0000030C   00AA               ADD      R2,SP,#+0
   \   0000030E   4146               MOV      R1,R8
   \   00000310   5046               MOV      R0,R10
   \   00000312   ........           BL       printk_pad_zero
   \   00000316   C246               MOV      R10,R8
   \   00000318   11E0               B.N      ??printk_47
   \                     ??printk_54:
   \   0000031A   3800               MOVS     R0,R7
   \   0000031C   C007               LSLS     R0,R0,#+31
   \   0000031E   0ED4               BMI.N    ??printk_47
   \   00000320   2B00               MOVS     R3,R5
   \   00000322   00AA               ADD      R2,SP,#+0
   \   00000324   4146               MOV      R1,R8
   \   00000326   5046               MOV      R0,R10
   \   00000328   ........           BL       printk_pad_space
   \   0000032C   07E0               B.N      ??printk_47
   \                     ??printk_55:
   \   0000032E   2A00               MOVS     R2,R5
   \   00000330   00A9               ADD      R1,SP,#+0
   \   00000332   99F80000           LDRB     R0,[R9, #+0]
   \   00000336   ........           BL       printk_putc
   \   0000033A   B9F10109           SUBS     R9,R9,#+1
   \                     ??printk_47:
   \   0000033E   99F80000           LDRB     R0,[R9, #+0]
   \   00000342   0028               CMP      R0,#+0
   \   00000344   F3D1               BNE.N    ??printk_55
   \   00000346   F807               LSLS     R0,R7,#+31
   \   00000348   05D5               BPL.N    ??printk_56
   \   0000034A   2B00               MOVS     R3,R5
   \   0000034C   00AA               ADD      R2,SP,#+0
   \   0000034E   4146               MOV      R1,R8
   \   00000350   5046               MOV      R0,R10
   \   00000352   ........           BL       printk_pad_space
   \                     ??printk_56:
   \   00000356   61E6               B.N      ??printk_2
   \                     ??printk_31:
   \   00000358   3078               LDRB     R0,[R6, #+0]
   \   0000035A   361D               ADDS     R6,R6,#+4
   \   0000035C   2A00               MOVS     R2,R5
   \   0000035E   00A9               ADD      R1,SP,#+0
   \   00000360   ........           BL       printk_putc
   \   00000364   5AE6               B.N      ??printk_2
   \                     ??printk_36:
   \   00000366   D6F80090           LDR      R9,[R6, #+0]
   \   0000036A   361D               ADDS     R6,R6,#+4
   \   0000036C   B9F1000F           CMP      R9,#+0
   \   00000370   21D0               BEQ.N    ??printk_57
   \   00000372   4846               MOV      R0,R9
   \   00000374   ........           BL       strlen
   \   00000378   8246               MOV      R10,R0
   \   0000037A   3800               MOVS     R0,R7
   \   0000037C   C007               LSLS     R0,R0,#+31
   \   0000037E   0ED4               BMI.N    ??printk_58
   \   00000380   2B00               MOVS     R3,R5
   \   00000382   00AA               ADD      R2,SP,#+0
   \   00000384   4146               MOV      R1,R8
   \   00000386   5046               MOV      R0,R10
   \   00000388   ........           BL       printk_pad_space
   \   0000038C   07E0               B.N      ??printk_58
   \                     ??printk_59:
   \   0000038E   2A00               MOVS     R2,R5
   \   00000390   00A9               ADD      R1,SP,#+0
   \   00000392   99F80000           LDRB     R0,[R9, #+0]
   \   00000396   ........           BL       printk_putc
   \   0000039A   19F10109           ADDS     R9,R9,#+1
   \                     ??printk_58:
   \   0000039E   99F80000           LDRB     R0,[R9, #+0]
   \   000003A2   0028               CMP      R0,#+0
   \   000003A4   F3D1               BNE.N    ??printk_59
   \   000003A6   F807               LSLS     R0,R7,#+31
   \   000003A8   05D5               BPL.N    ??printk_57
   \   000003AA   2B00               MOVS     R3,R5
   \   000003AC   00AA               ADD      R2,SP,#+0
   \   000003AE   4146               MOV      R1,R8
   \   000003B0   5046               MOV      R0,R10
   \   000003B2   ........           BL       printk_pad_space
   \                     ??printk_57:
   \   000003B6   31E6               B.N      ??printk_2
   \                     ??printk_33:
   \   000003B8   3068               LDR      R0,[R6, #+0]
   \   000003BA   361D               ADDS     R6,R6,#+4
   \   000003BC   0099               LDR      R1,[SP, #+0]
   \   000003BE   0160               STR      R1,[R0, #+0]
   \   000003C0   2CE6               B.N      ??printk_2
    565                  }
    566              }
    567              return count;
   \                     ??printk_3:
   \   000003C2   0098               LDR      R0,[SP, #+0]
   \   000003C4   0DB0               ADD      SP,SP,#+52
   \   000003C6   BDE8F08F           POP      {R4-R11,PC}      ;; return
    568          }
    569          
    570          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    571          int
    572          printf (const char *fmt, ...)
    573          {
   \                     printf:
   \   00000000   0EB4               PUSH     {R1-R3}
   \   00000002   00B5               PUSH     {LR}
   \   00000004   84B0               SUB      SP,SP,#+16
    574              va_list ap;
    575              int rvalue;
    576              PRINTK_INFO info;
    577          
    578          
    579              info.dest = DEST_CONSOLE;
   \   00000006   0121               MOVS     R1,#+1
   \   00000008   0091               STR      R1,[SP, #+0]
    580              info.func = &out_char;
   \   0000000A   ....               LDR.N    R1,??DataTable0
   \   0000000C   0191               STR      R1,[SP, #+4]
    581              /*
    582               * Initialize the pointer to the variable length argument list.
    583               */
    584              va_start(ap, fmt);
   \   0000000E   05AA               ADD      R2,SP,#+20
    585              rvalue = printk(&info, fmt, ap);
   \   00000010   0100               MOVS     R1,R0
   \   00000012   00A8               ADD      R0,SP,#+0
   \   00000014   ........           BL       printk
    586              /*
    587               * Cleanup the variable length argument list.
    588               */
    589              va_end(ap);
    590              return rvalue;
   \   00000018   04B0               ADD      SP,SP,#+16
   \   0000001A   5DF810FB           LDR      PC,[SP], #+16    ;; return
    591          }
    592          
    593          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    594          int
    595          sprintf (char *s, const char *fmt, ...)
    596          {
   \                     sprintf:
   \   00000000   0CB4               PUSH     {R2,R3}
   \   00000002   E0B5               PUSH     {R5-R7,LR}
   \   00000004   0200               MOVS     R2,R0
    597              va_list ap;
    598              int rvalue = 0;
   \   00000006   0020               MOVS     R0,#+0
    599              PRINTK_INFO info;
    600          
    601              /*
    602               * Initialize the pointer to the variable length argument list.
    603               */
    604              if (s != 0)
   \   00000008   002A               CMP      R2,#+0
   \   0000000A   09D0               BEQ.N    ??sprintf_0
    605              {
    606                  info.dest = DEST_STRING;
   \   0000000C   0220               MOVS     R0,#+2
   \   0000000E   0090               STR      R0,[SP, #+0]
    607                  info.loc = s;
   \   00000010   0292               STR      R2,[SP, #+8]
    608                  va_start(ap, fmt);
   \   00000012   04AA               ADD      R2,SP,#+16
    609                  rvalue = printk(&info, fmt, ap);
   \   00000014   00A8               ADD      R0,SP,#+0
   \   00000016   ........           BL       printk
    610                  *info.loc = '\0';
   \   0000001A   0299               LDR      R1,[SP, #+8]
   \   0000001C   0022               MOVS     R2,#+0
   \   0000001E   0A70               STRB     R2,[R1, #+0]
    611                  va_end(ap);
    612              }
    613              return rvalue;
   \                     ??sprintf_0:
   \   00000020   0EBC               POP      {R1-R3}
   \   00000022   5DF80CFB           LDR      PC,[SP], #+12    ;; return
    614          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     out_char
    615          
    616          /********************************************************************/

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     printf               32
     printk               88
     printk_mknumstr       8
     printk_pad_space     24
     printk_pad_zero      24
     printk_putc           8
     sprintf              24


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     printk_putc        44
     printk_mknumstr   112
     printk_pad_zero    30
     printk_pad_space   30
     printk            970
     printf             30
     sprintf            38
     ??DataTable0        4

 
 1 258 bytes in section .text
 
 1 258 bytes of CODE memory

Errors: none
Warnings: none
