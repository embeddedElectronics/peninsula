###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     07/Jan/2012  15:09:51 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  G:\K60\Kinetis512\kinetis-sc\src\common\stdlib.c         #
#    Command line =  G:\K60\Kinetis512\kinetis-sc\src\common\stdlib.c -D IAR  #
#                    -D TWR_K60N512 -lCN G:\K60\Kinetis512\kinetis-sc\build\i #
#                    ar\demo\RAM_128KB\List\ -lB                              #
#                    G:\K60\Kinetis512\kinetis-sc\build\iar\demo\RAM_128KB\Li #
#                    st\ -o G:\K60\Kinetis512\kinetis-sc\build\iar\demo\RAM_1 #
#                    28KB\Obj\ --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I G:\K60\Kinetis512\kinetis-sc\build\iar\demo\.. #
#                    \..\..\src\projects\demo\ -I                             #
#                    G:\K60\Kinetis512\kinetis-sc\build\iar\demo\..\..\..\src #
#                    \common\ -I G:\K60\Kinetis512\kinetis-sc\build\iar\demo\ #
#                    ..\..\..\src\cpu\ -I G:\K60\Kinetis512\kinetis-sc\build\ #
#                    iar\demo\..\..\..\src\cpu\headers\ -I                    #
#                    G:\K60\Kinetis512\kinetis-sc\build\iar\demo\..\..\..\src #
#                    \drivers\uart\ -I G:\K60\Kinetis512\kinetis-sc\build\iar #
#                    \demo\..\..\..\src\drivers\mcg\ -I                       #
#                    G:\K60\Kinetis512\kinetis-sc\build\iar\demo\..\..\..\src #
#                    \drivers\wdog\ -I G:\K60\Kinetis512\kinetis-sc\build\iar #
#                    \demo\..\..\..\src\platforms\ -I                         #
#                    G:\K60\Kinetis512\kinetis-sc\build\iar\demo\..\ -Ol      #
#                    --use_c++_inline                                         #
#    List file    =  G:\K60\Kinetis512\kinetis-sc\build\iar\demo\RAM_128KB\Li #
#                    st\stdlib.lst                                            #
#    Object file  =  G:\K60\Kinetis512\kinetis-sc\build\iar\demo\RAM_128KB\Ob #
#                    j\stdlib.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

G:\K60\Kinetis512\kinetis-sc\src\common\stdlib.c
      1          /*
      2           * File:        stdlib.c
      3           * Purpose:     Functions normally found in a standard C lib.
      4           *
      5           * Notes:       This supports ASCII only!!!
      6           *
      7           */
      8          
      9          #include "common.h"
     10          #include "stdlib.h"
     11          
     12          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     13          int
     14          isspace (int ch)
     15          {
     16              if ((ch == ' ') || (ch == '\t'))    /* \n ??? */
   \                     isspace:
   \   00000000   2028               CMP      R0,#+32
   \   00000002   01D0               BEQ.N    ??isspace_0
   \   00000004   0928               CMP      R0,#+9
   \   00000006   01D1               BNE.N    ??isspace_1
     17                  return TRUE;
   \                     ??isspace_0:
   \   00000008   0120               MOVS     R0,#+1
   \   0000000A   00E0               B.N      ??isspace_2
     18              else
     19                  return FALSE;
   \                     ??isspace_1:
   \   0000000C   0020               MOVS     R0,#+0
   \                     ??isspace_2:
   \   0000000E   7047               BX       LR               ;; return
     20          }
     21          
     22          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     23          int
     24          isalnum (int ch)
     25          {
     26              /* ASCII only */
     27              if (((ch >= '0') && (ch <= '9')) ||
     28                  ((ch >= 'A') && (ch <= 'Z')) ||
     29                  ((ch >= 'a') && (ch <= 'z')))
   \                     isalnum:
   \   00000000   B0F13001           SUBS     R1,R0,#+48
   \   00000004   0A29               CMP      R1,#+10
   \   00000006   06D3               BCC.N    ??isalnum_0
   \   00000008   B0F14101           SUBS     R1,R0,#+65
   \   0000000C   1A29               CMP      R1,#+26
   \   0000000E   02D3               BCC.N    ??isalnum_0
   \   00000010   6138               SUBS     R0,R0,#+97
   \   00000012   1A28               CMP      R0,#+26
   \   00000014   01D2               BCS.N    ??isalnum_1
     30                  return TRUE;
   \                     ??isalnum_0:
   \   00000016   0120               MOVS     R0,#+1
   \   00000018   00E0               B.N      ??isalnum_2
     31              else
     32                  return FALSE;
   \                     ??isalnum_1:
   \   0000001A   0020               MOVS     R0,#+0
   \                     ??isalnum_2:
   \   0000001C   7047               BX       LR               ;; return
     33          }
     34          
     35          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     36          int
     37          isdigit (int ch)
     38          {
     39              /* ASCII only */
     40              if ((ch >= '0') && (ch <= '9'))
   \                     isdigit:
   \   00000000   3038               SUBS     R0,R0,#+48
   \   00000002   0A28               CMP      R0,#+10
   \   00000004   01D2               BCS.N    ??isdigit_0
     41                  return TRUE;
   \   00000006   0120               MOVS     R0,#+1
   \   00000008   00E0               B.N      ??isdigit_1
     42              else
     43                  return FALSE;
   \                     ??isdigit_0:
   \   0000000A   0020               MOVS     R0,#+0
   \                     ??isdigit_1:
   \   0000000C   7047               BX       LR               ;; return
     44          }
     45          
     46          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     47          int
     48          isupper (int ch)
     49          {
     50              /* ASCII only */
     51              if ((ch >= 'A') && (ch <= 'Z'))
   \                     isupper:
   \   00000000   4138               SUBS     R0,R0,#+65
   \   00000002   1A28               CMP      R0,#+26
   \   00000004   01D2               BCS.N    ??isupper_0
     52                  return TRUE;
   \   00000006   0120               MOVS     R0,#+1
   \   00000008   00E0               B.N      ??isupper_1
     53              else
     54                  return FALSE;
   \                     ??isupper_0:
   \   0000000A   0020               MOVS     R0,#+0
   \                     ??isupper_1:
   \   0000000C   7047               BX       LR               ;; return
     55          }
     56          
     57          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     58          int
     59          strcasecmp (const char *s1, const char *s2)
     60          {
   \                     strcasecmp:
   \   00000000   10B4               PUSH     {R4}
     61              char    c1, c2;
     62              int     result = 0;
   \   00000002   0022               MOVS     R2,#+0
     63          
     64              while (result == 0)
   \                     ??strcasecmp_0:
   \   00000004   002A               CMP      R2,#+0
   \   00000006   1AD1               BNE.N    ??strcasecmp_1
     65              {
     66                  c1 = *s1++;
   \   00000008   0378               LDRB     R3,[R0, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
     67                  c2 = *s2++;
   \   0000000C   0C78               LDRB     R4,[R1, #+0]
   \   0000000E   491C               ADDS     R1,R1,#+1
     68                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   00000010   B3F16102           SUBS     R2,R3,#+97
   \   00000014   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   1A2A               CMP      R2,#+26
   \   00000018   00D2               BCS.N    ??strcasecmp_2
     69                      c1 = (char)(c1 - ' ');
   \   0000001A   203B               SUBS     R3,R3,#+32
     70                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strcasecmp_2:
   \   0000001C   B4F16102           SUBS     R2,R4,#+97
   \   00000020   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000022   1A2A               CMP      R2,#+26
   \   00000024   00D2               BCS.N    ??strcasecmp_3
     71                      c2 = (char)(c2 - ' ');
   \   00000026   203C               SUBS     R4,R4,#+32
     72                  if ((result = (c1 - c2)) != 0)
   \                     ??strcasecmp_3:
   \   00000028   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   1A1B               SUBS     R2,R3,R4
   \   0000002E   002A               CMP      R2,#+0
   \   00000030   05D1               BNE.N    ??strcasecmp_1
     73                      break;
     74                  if ((c1 == 0) || (c2 == 0))
   \                     ??strcasecmp_4:
   \   00000032   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000034   002B               CMP      R3,#+0
   \   00000036   02D0               BEQ.N    ??strcasecmp_5
   \   00000038   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   002C               CMP      R4,#+0
   \   0000003C   E2D1               BNE.N    ??strcasecmp_0
     75                      break;
     76              }
     77              return result;
   \                     ??strcasecmp_5:
   \                     ??strcasecmp_1:
   \   0000003E   1000               MOVS     R0,R2
   \   00000040   10BC               POP      {R4}
   \   00000042   7047               BX       LR               ;; return
     78          }
     79          
     80          
     81          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          int
     83          strncasecmp (const char *s1, const char *s2, int n)
     84          {
   \                     strncasecmp:
   \   00000000   70B4               PUSH     {R4-R6}
     85              char    c1, c2;
     86              int     k = 0;
   \   00000002   0026               MOVS     R6,#+0
     87              int     result = 0;
   \   00000004   0023               MOVS     R3,#+0
     88          
     89              while ( k++ < n )
   \                     ??strncasecmp_0:
   \   00000006   3400               MOVS     R4,R6
   \   00000008   661C               ADDS     R6,R4,#+1
   \   0000000A   9442               CMP      R4,R2
   \   0000000C   1ADA               BGE.N    ??strncasecmp_1
     90              {
     91                  c1 = *s1++;
   \   0000000E   0478               LDRB     R4,[R0, #+0]
   \   00000010   401C               ADDS     R0,R0,#+1
     92                  c2 = *s2++;
   \   00000012   0D78               LDRB     R5,[R1, #+0]
   \   00000014   491C               ADDS     R1,R1,#+1
     93                  if ((c1 >= 'a') && (c1 <= 'z'))
   \   00000016   B4F16103           SUBS     R3,R4,#+97
   \   0000001A   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001C   1A2B               CMP      R3,#+26
   \   0000001E   00D2               BCS.N    ??strncasecmp_2
     94                      c1 = (char)(c1 - ' ');
   \   00000020   203C               SUBS     R4,R4,#+32
     95                  if ((c2 >= 'a') && (c2 <= 'z'))
   \                     ??strncasecmp_2:
   \   00000022   B5F16103           SUBS     R3,R5,#+97
   \   00000026   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000028   1A2B               CMP      R3,#+26
   \   0000002A   00D2               BCS.N    ??strncasecmp_3
     96                      c2 = (char)(c2 - ' ');
   \   0000002C   203D               SUBS     R5,R5,#+32
     97                  if ((result = (c1 - c2)) != 0)
   \                     ??strncasecmp_3:
   \   0000002E   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   631B               SUBS     R3,R4,R5
   \   00000034   002B               CMP      R3,#+0
   \   00000036   05D1               BNE.N    ??strncasecmp_1
     98                      break;
     99                  if ((c1 == 0) || (c2 == 0))
   \                     ??strncasecmp_4:
   \   00000038   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   002C               CMP      R4,#+0
   \   0000003C   02D0               BEQ.N    ??strncasecmp_5
   \   0000003E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   002D               CMP      R5,#+0
   \   00000042   E0D1               BNE.N    ??strncasecmp_0
    100                      break;
    101              }
    102              return result;
   \                     ??strncasecmp_5:
   \                     ??strncasecmp_1:
   \   00000044   1800               MOVS     R0,R3
   \   00000046   70BC               POP      {R4-R6}
   \   00000048   7047               BX       LR               ;; return
    103          }
    104          
    105          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          uint32
    107          strtoul (char *str, char **ptr, int base)
    108          {
   \                     strtoul:
   \   00000000   2DE9F84F           PUSH     {R3-R11,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
    109              unsigned long rvalue;
    110              int c, err, neg;
    111              char *endp;
    112              char *startp;
    113          
    114              rvalue = 0;  err = 0;  neg = 0;
   \   0000000A   0027               MOVS     R7,#+0
   \   0000000C   5FF00008           MOVS     R8,#+0
   \   00000010   5FF00009           MOVS     R9,#+0
    115          
    116              /* Check for invalid arguments */
    117              if ((str == NULL) || (base < 0) || (base == 1) || (base > 36))
   \   00000014   002C               CMP      R4,#+0
   \   00000016   05D0               BEQ.N    ??strtoul_0
   \   00000018   002E               CMP      R6,#+0
   \   0000001A   03D4               BMI.N    ??strtoul_0
   \   0000001C   012E               CMP      R6,#+1
   \   0000001E   01D0               BEQ.N    ??strtoul_0
   \   00000020   252E               CMP      R6,#+37
   \   00000022   04DB               BLT.N    ??strtoul_1
    118              {
    119                  if (ptr != NULL)
   \                     ??strtoul_0:
   \   00000024   002D               CMP      R5,#+0
   \   00000026   00D0               BEQ.N    ??strtoul_2
    120                  {
    121                      *ptr = str;
   \   00000028   2C60               STR      R4,[R5, #+0]
    122                  }
    123                  return 0;
   \                     ??strtoul_2:
   \   0000002A   0020               MOVS     R0,#+0
   \   0000002C   64E0               B.N      ??strtoul_3
    124              }
    125          
    126              /* Skip leading white spaces */
    127              for (startp = str; isspace(*startp); ++startp)
   \                     ??strtoul_1:
   \   0000002E   A246               MOV      R10,R4
   \   00000030   01E0               B.N      ??strtoul_4
   \                     ??strtoul_5:
   \   00000032   1AF1010A           ADDS     R10,R10,#+1
   \                     ??strtoul_4:
   \   00000036   9AF80000           LDRB     R0,[R10, #+0]
   \   0000003A   ........           BL       isspace
   \   0000003E   0028               CMP      R0,#+0
   \   00000040   F7D1               BNE.N    ??strtoul_5
    128                  ;
    129          
    130              /* Check for notations */
    131              switch (startp[0])
   \   00000042   9AF80000           LDRB     R0,[R10, #+0]
   \   00000046   2D28               CMP      R0,#+45
   \   00000048   11D0               BEQ.N    ??strtoul_6
   \   0000004A   3028               CMP      R0,#+48
   \   0000004C   14D1               BNE.N    ??strtoul_7
    132              {
    133                  case '0':
    134                      if ((startp[1] == 'x') || (startp[1] == 'X'))
   \                     ??strtoul_8:
   \   0000004E   9AF80100           LDRB     R0,[R10, #+1]
   \   00000052   7828               CMP      R0,#+120
   \   00000054   03D0               BEQ.N    ??strtoul_9
   \   00000056   9AF80100           LDRB     R0,[R10, #+1]
   \   0000005A   5828               CMP      R0,#+88
   \   0000005C   06D1               BNE.N    ??strtoul_10
    135                      {
    136                          if ((base == 0) || (base == 16))
   \                     ??strtoul_9:
   \   0000005E   002E               CMP      R6,#+0
   \   00000060   01D0               BEQ.N    ??strtoul_11
   \   00000062   102E               CMP      R6,#+16
   \   00000064   02D1               BNE.N    ??strtoul_10
    137                          {
    138                              base = 16;
   \                     ??strtoul_11:
   \   00000066   1026               MOVS     R6,#+16
    139                              startp = &startp[2];
   \   00000068   1AF1020A           ADDS     R10,R10,#+2
    140                          }
    141                      }
    142                      break;
   \                     ??strtoul_10:
   \   0000006C   04E0               B.N      ??strtoul_12
    143                  case '-':
    144                      neg = 1;
   \                     ??strtoul_6:
   \   0000006E   5FF00109           MOVS     R9,#+1
    145                      startp = &startp[1];
   \   00000072   1AF1010A           ADDS     R10,R10,#+1
    146                      break;
   \   00000076   FFE7               B.N      ??strtoul_12
    147                  default:
    148                      break;
    149              }
    150          
    151              if (base == 0)
   \                     ??strtoul_7:
   \                     ??strtoul_12:
   \   00000078   002E               CMP      R6,#+0
   \   0000007A   00D1               BNE.N    ??strtoul_13
    152                  base = 10;
   \   0000007C   0A26               MOVS     R6,#+10
    153          
    154              /* Check for invalid chars in str */
    155              for ( endp = startp; (c = *endp) != '\0'; ++endp)
   \                     ??strtoul_13:
   \   0000007E   03E0               B.N      ??strtoul_14
    156              {
    157                  /* Check for 0..9,Aa-Zz */
    158                  if (!isalnum(c))
    159                  {
    160                      err = 1;
    161                      break;
    162                  }
    163          
    164                  /* Convert char to num in 0..36 */
    165                  if (isdigit(c))
    166                  {
    167                      c = c - '0';
    168                  }
    169                  else
    170                  {
    171                      if (isupper(c))
    172                      {
    173                          c = c - 'A' + 10;
    174                      }
    175                      else
    176                      {
    177                          c = c - 'a' + 10;
    178                      }
    179                  }
    180          
    181                  /* check c against base */
    182                  if (c >= base)
    183                  {
    184                      err = 1;
    185                      break;
    186                  }
    187          
    188                  if (neg)
    189                  {
    190                      rvalue = (rvalue * base) - c;
    191                  }
    192                  else
    193                  {
    194                      rvalue = (rvalue * base) + c;
   \                     ??strtoul_15:
   \   00000080   06FB07B7           MLA      R7,R6,R7,R11
    195                  }
   \                     ??strtoul_16:
   \   00000084   1AF1010A           ADDS     R10,R10,#+1
   \                     ??strtoul_14:
   \   00000088   9AF800B0           LDRB     R11,[R10, #+0]
   \   0000008C   BBF1000F           CMP      R11,#+0
   \   00000090   06D0               BEQ.N    ??strtoul_17
   \   00000092   5846               MOV      R0,R11
   \   00000094   ........           BL       isalnum
   \   00000098   0028               CMP      R0,#+0
   \   0000009A   0DD1               BNE.N    ??strtoul_18
   \   0000009C   5FF00108           MOVS     R8,#+1
    196              }
    197          
    198              /* Upon exit, endp points to the character at which valid info */
    199              /* STOPS.  No chars including and beyond endp are used.        */
    200          
    201              if (ptr != NULL)
   \                     ??strtoul_17:
   \   000000A0   002D               CMP      R5,#+0
   \   000000A2   01D0               BEQ.N    ??strtoul_19
    202                  *ptr = endp;
   \   000000A4   C5F800A0           STR      R10,[R5, #+0]
    203          
    204              if (err)
   \                     ??strtoul_19:
   \   000000A8   B8F1000F           CMP      R8,#+0
   \   000000AC   23D0               BEQ.N    ??strtoul_20
    205              {
    206                  if (ptr != NULL)
   \   000000AE   002D               CMP      R5,#+0
   \   000000B0   00D0               BEQ.N    ??strtoul_21
    207                      *ptr = str;
   \   000000B2   2C60               STR      R4,[R5, #+0]
    208                  
    209                  return 0;
   \                     ??strtoul_21:
   \   000000B4   0020               MOVS     R0,#+0
   \   000000B6   1FE0               B.N      ??strtoul_3
    210              }
   \                     ??strtoul_18:
   \   000000B8   5846               MOV      R0,R11
   \   000000BA   ........           BL       isdigit
   \   000000BE   0028               CMP      R0,#+0
   \   000000C0   02D0               BEQ.N    ??strtoul_22
   \   000000C2   BBF1300B           SUBS     R11,R11,#+48
   \   000000C6   09E0               B.N      ??strtoul_23
   \                     ??strtoul_22:
   \   000000C8   5846               MOV      R0,R11
   \   000000CA   ........           BL       isupper
   \   000000CE   0028               CMP      R0,#+0
   \   000000D0   02D0               BEQ.N    ??strtoul_24
   \   000000D2   BBF1370B           SUBS     R11,R11,#+55
   \   000000D6   01E0               B.N      ??strtoul_23
   \                     ??strtoul_24:
   \   000000D8   BBF1570B           SUBS     R11,R11,#+87
   \                     ??strtoul_23:
   \   000000DC   B345               CMP      R11,R6
   \   000000DE   02DB               BLT.N    ??strtoul_25
   \   000000E0   5FF00108           MOVS     R8,#+1
   \   000000E4   DCE7               B.N      ??strtoul_17
   \                     ??strtoul_25:
   \   000000E6   B9F1000F           CMP      R9,#+0
   \   000000EA   C9D0               BEQ.N    ??strtoul_15
   \   000000EC   06FB07F0           MUL      R0,R6,R7
   \   000000F0   B0EB0B07           SUBS     R7,R0,R11
   \   000000F4   C6E7               B.N      ??strtoul_16
    211              else
    212              {
    213                  return rvalue;
   \                     ??strtoul_20:
   \   000000F6   3800               MOVS     R0,R7
   \                     ??strtoul_3:
   \   000000F8   BDE8F28F           POP      {R1,R4-R11,PC}   ;; return
    214              }
    215          }
    216          
    217          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    218          int
    219          strlen (const char *str)
    220          {
    221              char *s = (char *)str;
    222              int len = 0;
   \                     strlen:
   \   00000000   0021               MOVS     R1,#+0
    223          
    224              if (s == NULL)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   02D1               BNE.N    ??strlen_0
    225                  return 0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   06E0               B.N      ??strlen_1
    226          
    227              while (*s++ != '\0')
    228                  ++len;
   \                     ??strlen_2:
   \   0000000A   491C               ADDS     R1,R1,#+1
   \                     ??strlen_0:
   \   0000000C   0200               MOVS     R2,R0
   \   0000000E   501C               ADDS     R0,R2,#+1
   \   00000010   1278               LDRB     R2,[R2, #+0]
   \   00000012   002A               CMP      R2,#+0
   \   00000014   F9D1               BNE.N    ??strlen_2
    229          
    230              return len;
   \   00000016   0800               MOVS     R0,R1
   \                     ??strlen_1:
   \   00000018   7047               BX       LR               ;; return
    231          }
    232          
    233          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    234          char *
    235          strcat (char *dest, const char *src)
    236          {
   \                     strcat:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    237              char *dp;
    238              char *sp = (char *)src;
   \   00000004   0D00               MOVS     R5,R1
    239          
    240              if ((dest != NULL) && (src != NULL))
   \   00000006   002C               CMP      R4,#+0
   \   00000008   0FD0               BEQ.N    ??strcat_0
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   0DD0               BEQ.N    ??strcat_0
    241              {
    242                  dp = &dest[strlen(dest)];
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       strlen
   \   00000014   0019               ADDS     R0,R0,R4
   \   00000016   03E0               B.N      ??strcat_1
    243          
    244                  while (*sp != '\0')
    245                  {
    246                      *dp++ = *sp++;
   \                     ??strcat_2:
   \   00000018   2978               LDRB     R1,[R5, #+0]
   \   0000001A   0170               STRB     R1,[R0, #+0]
   \   0000001C   6D1C               ADDS     R5,R5,#+1
   \   0000001E   401C               ADDS     R0,R0,#+1
    247                  }
   \                     ??strcat_1:
   \   00000020   2978               LDRB     R1,[R5, #+0]
   \   00000022   0029               CMP      R1,#+0
   \   00000024   F8D1               BNE.N    ??strcat_2
    248                  *dp = '\0';
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   0170               STRB     R1,[R0, #+0]
    249              }
    250              return dest;
   \                     ??strcat_0:
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   32BD               POP      {R1,R4,R5,PC}    ;; return
    251          }
    252          
    253          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          char *
    255          strncat (char *dest, const char *src, int n)
    256          {
   \                     strncat:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   1500               MOVS     R5,R2
    257              char *dp;
    258              char *sp = (char *)src;
   \   00000006   0E00               MOVS     R6,R1
    259          
    260              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000008   002C               CMP      R4,#+0
   \   0000000A   15D0               BEQ.N    ??strncat_0
   \   0000000C   0029               CMP      R1,#+0
   \   0000000E   13D0               BEQ.N    ??strncat_0
   \   00000010   012D               CMP      R5,#+1
   \   00000012   11DB               BLT.N    ??strncat_0
    261              {
    262                  dp = &dest[strlen(dest)];
   \   00000014   2000               MOVS     R0,R4
   \   00000016   ........           BL       strlen
   \   0000001A   0019               ADDS     R0,R0,R4
   \   0000001C   03E0               B.N      ??strncat_1
    263          
    264                  while ((*sp != '\0') && (n-- > 0))
    265                  {
    266                      *dp++ = *sp++;
   \                     ??strncat_2:
   \   0000001E   3178               LDRB     R1,[R6, #+0]
   \   00000020   0170               STRB     R1,[R0, #+0]
   \   00000022   761C               ADDS     R6,R6,#+1
   \   00000024   401C               ADDS     R0,R0,#+1
    267                  }
   \                     ??strncat_1:
   \   00000026   3178               LDRB     R1,[R6, #+0]
   \   00000028   0029               CMP      R1,#+0
   \   0000002A   03D0               BEQ.N    ??strncat_3
   \   0000002C   2900               MOVS     R1,R5
   \   0000002E   4D1E               SUBS     R5,R1,#+1
   \   00000030   0129               CMP      R1,#+1
   \   00000032   F4DA               BGE.N    ??strncat_2
    268                  *dp = '\0';
   \                     ??strncat_3:
   \   00000034   0021               MOVS     R1,#+0
   \   00000036   0170               STRB     R1,[R0, #+0]
    269              }
    270              return dest;
   \                     ??strncat_0:
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   70BD               POP      {R4-R6,PC}       ;; return
    271          }
    272          
    273          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    274          char *
    275          strcpy (char *dest, const char *src)
    276          {
    277              char *dp = (char *)dest;
   \                     strcpy:
   \   00000000   0200               MOVS     R2,R0
    278              char *sp = (char *)src;
   \   00000002   0B00               MOVS     R3,R1
    279          
    280              if ((dest != NULL) && (src != NULL))
   \   00000004   0028               CMP      R0,#+0
   \   00000006   0BD0               BEQ.N    ??strcpy_0
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   09D0               BEQ.N    ??strcpy_0
   \   0000000C   03E0               B.N      ??strcpy_1
    281              {
    282                  while (*sp != '\0')
    283                  {
    284                      *dp++ = *sp++;
   \                     ??strcpy_2:
   \   0000000E   1978               LDRB     R1,[R3, #+0]
   \   00000010   1170               STRB     R1,[R2, #+0]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   521C               ADDS     R2,R2,#+1
    285                  }
   \                     ??strcpy_1:
   \   00000016   1978               LDRB     R1,[R3, #+0]
   \   00000018   0029               CMP      R1,#+0
   \   0000001A   F8D1               BNE.N    ??strcpy_2
    286                  *dp = '\0';
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   1170               STRB     R1,[R2, #+0]
    287              }
    288              return dest;
   \                     ??strcpy_0:
   \   00000020   7047               BX       LR               ;; return
    289          }
    290          
    291          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    292          char *
    293          strncpy (char *dest, const char *src, int n)
    294          {
   \                     strncpy:
   \   00000000   10B4               PUSH     {R4}
    295              char *dp = (char *)dest;
   \   00000002   0300               MOVS     R3,R0
    296              char *sp = (char *)src;
   \   00000004   0C00               MOVS     R4,R1
    297          
    298              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0028               CMP      R0,#+0
   \   00000008   11D0               BEQ.N    ??strncpy_0
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   0FD0               BEQ.N    ??strncpy_0
   \   0000000E   012A               CMP      R2,#+1
   \   00000010   0DDB               BLT.N    ??strncpy_0
   \   00000012   03E0               B.N      ??strncpy_1
    299              {
    300                  while ((*sp != '\0') && (n-- > 0))
    301                  {
    302                      *dp++ = *sp++;
   \                     ??strncpy_2:
   \   00000014   2178               LDRB     R1,[R4, #+0]
   \   00000016   1970               STRB     R1,[R3, #+0]
   \   00000018   641C               ADDS     R4,R4,#+1
   \   0000001A   5B1C               ADDS     R3,R3,#+1
    303                  }
   \                     ??strncpy_1:
   \   0000001C   2178               LDRB     R1,[R4, #+0]
   \   0000001E   0029               CMP      R1,#+0
   \   00000020   03D0               BEQ.N    ??strncpy_3
   \   00000022   1100               MOVS     R1,R2
   \   00000024   4A1E               SUBS     R2,R1,#+1
   \   00000026   0129               CMP      R1,#+1
   \   00000028   F4DA               BGE.N    ??strncpy_2
    304                  *dp = '\0';
   \                     ??strncpy_3:
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   1970               STRB     R1,[R3, #+0]
    305              }
    306              return dest;
   \                     ??strncpy_0:
   \   0000002E   10BC               POP      {R4}
   \   00000030   7047               BX       LR               ;; return
    307          }
    308          
    309          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    310          int
    311          strcmp (const char *s1, const char *s2)
    312          {
    313              /* No checks for NULL */
    314              char *s1p = (char *)s1;
    315              char *s2p = (char *)s2;
   \                     strcmp:
   \   00000000   01E0               B.N      ??strcmp_0
    316          
    317              while (*s2p != '\0')
    318              {
    319                  if (*s1p != *s2p)
    320                      break;
    321          
    322                  ++s1p;
   \                     ??strcmp_1:
   \   00000002   401C               ADDS     R0,R0,#+1
    323                  ++s2p;
   \   00000004   491C               ADDS     R1,R1,#+1
   \                     ??strcmp_0:
   \   00000006   0A78               LDRB     R2,[R1, #+0]
   \   00000008   002A               CMP      R2,#+0
   \   0000000A   03D0               BEQ.N    ??strcmp_2
   \   0000000C   0278               LDRB     R2,[R0, #+0]
   \   0000000E   0B78               LDRB     R3,[R1, #+0]
   \   00000010   9A42               CMP      R2,R3
   \   00000012   F6D0               BEQ.N    ??strcmp_1
    324              }
    325              return (*s1p - *s2p);
   \                     ??strcmp_2:
   \   00000014   0078               LDRB     R0,[R0, #+0]
   \   00000016   0978               LDRB     R1,[R1, #+0]
   \   00000018   401A               SUBS     R0,R0,R1
   \   0000001A   7047               BX       LR               ;; return
    326          }
    327          
    328          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    329          int
    330          strncmp (const char *s1, const char *s2, int n)
    331          {
   \                     strncmp:
   \   00000000   10B4               PUSH     {R4}
    332              /* No checks for NULL */
    333              char *s1p = (char *)s1;
    334              char *s2p = (char *)s2;
    335          
    336              if (n <= 0)
   \   00000002   012A               CMP      R2,#+1
   \   00000004   03DA               BGE.N    ??strncmp_0
    337                  return 0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0EE0               B.N      ??strncmp_1
    338          
    339              while (*s2p != '\0')
    340              {
    341                  if (*s1p != *s2p)
    342                      break;
    343          
    344                  if (--n == 0)
    345                      break;
    346          
    347                  ++s1p;
   \                     ??strncmp_2:
   \   0000000A   401C               ADDS     R0,R0,#+1
    348                  ++s2p;
   \   0000000C   491C               ADDS     R1,R1,#+1
   \                     ??strncmp_0:
   \   0000000E   0B78               LDRB     R3,[R1, #+0]
   \   00000010   002B               CMP      R3,#+0
   \   00000012   06D0               BEQ.N    ??strncmp_3
   \   00000014   0378               LDRB     R3,[R0, #+0]
   \   00000016   0C78               LDRB     R4,[R1, #+0]
   \   00000018   A342               CMP      R3,R4
   \   0000001A   02D1               BNE.N    ??strncmp_3
   \                     ??strncmp_4:
   \   0000001C   521E               SUBS     R2,R2,#+1
   \   0000001E   002A               CMP      R2,#+0
   \   00000020   F3D1               BNE.N    ??strncmp_2
    349              }
    350              return (*s1p - *s2p);
   \                     ??strncmp_3:
   \   00000022   0078               LDRB     R0,[R0, #+0]
   \   00000024   0978               LDRB     R1,[R1, #+0]
   \   00000026   401A               SUBS     R0,R0,R1
   \                     ??strncmp_1:
   \   00000028   10BC               POP      {R4}
   \   0000002A   7047               BX       LR               ;; return
    351          }
    352          
    353          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    354          void *
    355          memcpy (void *dest, const void *src, unsigned n)
    356          {
   \                     memcpy:
   \   00000000   30B4               PUSH     {R4,R5}
    357              int longs, bytes;
    358              uint32 *dpl = (uint32 *)dest;
   \   00000002   0400               MOVS     R4,R0
    359              uint32 *spl = (uint32 *)src;
   \   00000004   0D00               MOVS     R5,R1
    360              uint8  *dpb, *spb;
    361          
    362              if ((dest != NULL) && (src != NULL) && (n > 0))
   \   00000006   0028               CMP      R0,#+0
   \   00000008   19D0               BEQ.N    ??memcpy_0
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   17D0               BEQ.N    ??memcpy_0
   \   0000000E   002A               CMP      R2,#+0
   \   00000010   15D0               BEQ.N    ??memcpy_0
    363              {
    364                  bytes = (n & 0x3);
   \   00000012   12F00303           ANDS     R3,R2,#0x3
    365                  longs = (n - bytes) >> 2;
   \   00000016   D11A               SUBS     R1,R2,R3
   \   00000018   8908               LSRS     R1,R1,#+2
   \   0000001A   03E0               B.N      ??memcpy_1
    366              
    367                  while (longs--)
    368                      *dpl++ = *spl++;
   \                     ??memcpy_2:
   \   0000001C   2A68               LDR      R2,[R5, #+0]
   \   0000001E   2260               STR      R2,[R4, #+0]
   \   00000020   2D1D               ADDS     R5,R5,#+4
   \   00000022   241D               ADDS     R4,R4,#+4
   \                     ??memcpy_1:
   \   00000024   0A00               MOVS     R2,R1
   \   00000026   511E               SUBS     R1,R2,#+1
   \   00000028   002A               CMP      R2,#+0
   \   0000002A   F7D1               BNE.N    ??memcpy_2
    369                  
    370                  dpb = (uint8 *)dpl;
    371                  spb = (uint8 *)spl;
   \   0000002C   03E0               B.N      ??memcpy_3
    372                  
    373                  while (bytes--)
    374                      *dpb++ = *spb++;
   \                     ??memcpy_4:
   \   0000002E   2978               LDRB     R1,[R5, #+0]
   \   00000030   2170               STRB     R1,[R4, #+0]
   \   00000032   6D1C               ADDS     R5,R5,#+1
   \   00000034   641C               ADDS     R4,R4,#+1
   \                     ??memcpy_3:
   \   00000036   1900               MOVS     R1,R3
   \   00000038   4B1E               SUBS     R3,R1,#+1
   \   0000003A   0029               CMP      R1,#+0
   \   0000003C   F7D1               BNE.N    ??memcpy_4
    375              }
    376              return dest;
   \                     ??memcpy_0:
   \   0000003E   30BC               POP      {R4,R5}
   \   00000040   7047               BX       LR               ;; return
    377          }
    378          
    379          /****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    380          void *
    381          memset (void *s, int c, unsigned n)
    382          {
   \                     memset:
   \   00000000   10B4               PUSH     {R4}
    383              /* Not optimized, but very portable */
    384              unsigned char *sp = (unsigned char *)s;
   \   00000002   0300               MOVS     R3,R0
    385          
    386              if ((s != NULL) && (n > 0))
   \   00000004   0028               CMP      R0,#+0
   \   00000006   08D0               BEQ.N    ??memset_0
   \   00000008   002A               CMP      R2,#+0
   \   0000000A   02D1               BNE.N    ??memset_1
   \   0000000C   05E0               B.N      ??memset_0
    387              {
    388                  while (n--)
    389                  {
    390                      *sp++ = (unsigned char)c;
   \                     ??memset_2:
   \   0000000E   1970               STRB     R1,[R3, #+0]
   \   00000010   5B1C               ADDS     R3,R3,#+1
    391                  }
   \                     ??memset_1:
   \   00000012   1400               MOVS     R4,R2
   \   00000014   621E               SUBS     R2,R4,#+1
   \   00000016   002C               CMP      R4,#+0
   \   00000018   F9D1               BNE.N    ??memset_2
    392              }
    393              return s;
   \                     ??memset_0:
   \   0000001A   10BC               POP      {R4}
   \   0000001C   7047               BX       LR               ;; return
    394          }
    395          
    396          /****************************************************************/

   Maximum stack usage in bytes:

     Function    .cstack
     --------    -------
     isalnum          0
     isdigit          0
     isspace          0
     isupper          0
     memcpy           8
     memset           4
     strcasecmp       4
     strcat          16
     strcmp           0
     strcpy           0
     strlen           0
     strncasecmp     12
     strncat         16
     strncmp          4
     strncpy          4
     strtoul         40


   Section sizes:

     Function/Label Bytes
     -------------- -----
     isspace          16
     isalnum          30
     isdigit          14
     isupper          14
     strcasecmp       68
     strncasecmp      74
     strtoul         252
     strlen           26
     strcat           46
     strncat          60
     strcpy           34
     strncpy          50
     strcmp           28
     strncmp          44
     memcpy           66
     memset           30

 
 852 bytes in section .text
 
 852 bytes of CODE memory

Errors: none
Warnings: none
