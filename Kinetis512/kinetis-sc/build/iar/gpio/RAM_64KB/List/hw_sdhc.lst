###############################################################################
#                                                                             #
#                                                       06/Mar/2012  12:46:33 #
# IAR ANSI C/C++ Compiler V6.10.1.22143/W32 EVALUATION for ARM                #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\My Works\K60\Kinetis512\kinetis-sc\src\projects\gpio\ #
#                    hw_sdhc.c                                                #
#    Command line =  "F:\My Works\K60\Kinetis512\kinetis-sc\src\projects\gpio #
#                    \hw_sdhc.c" -D IAR -D TWR_K60N512 -lCN "F:\My            #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_64KB\ #
#                    List\" -lB "F:\My Works\K60\Kinetis512\kinetis-sc\build\ #
#                    iar\gpio\RAM_64KB\List\" -o "F:\My                       #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_64KB\ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h" #
#                     -I "F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpi #
#                    o\..\..\..\src\projects\gpio\" -I "F:\My                 #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\common\" -I "F:\My Works\K60\Kinetis512\kinetis-sc\b #
#                    uild\iar\gpio\..\..\..\src\cpu\" -I "F:\My               #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\cpu\headers\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\uart\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\mcg\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\wdog\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\platforms\" -I "F:\My Works\K60\Kinetis512\kinetis-s #
#                    c\build\iar\gpio\..\" -Ol --use_c++_inline               #
#    List file    =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _64KB\List\hw_sdhc.lst                                   #
#    Object file  =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _64KB\Obj\hw_sdhc.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\My Works\K60\Kinetis512\kinetis-sc\src\projects\gpio\hw_sdhc.c
      1          //=========================================================================
      2          // 文件名称：hw_sdhc.c                                                          
      3          // 功能概要：sdhc构件源文件
      4          // 版权所有: 苏州大学飞思卡尔嵌入式中心(sumcu.suda.edu.cn)
      5          // 版本更新:     时间                     版本                                       修改
      6          //           2011-12-14     V1.0        SDHC构件初始版本
      7          //           2011-12-20     V1.1        SDHC构件优化修改
      8          //=========================================================================
      9          #include "hw_sdhc.h"
     10          

   \                                 In section .bss, align 4
     11          SDCARD_STRUCT 		SDHC_Card;
   \                     SDHC_Card:
   \   00000000                      DS8 24
     12          
     13          //SDHC命令，包括每条命令执行时的XFERTYP寄存器各个域的设置

   \                                 In section .text, align 4, keep-with-next
     14          static const unsigned long ESDHC_COMMAND_XFERTYP[] = 
   \                     ESDHC_COMMAND_XFERTYP:
   \   00000000                      ; Initializer data, 256 bytes
   \   00000000   000000000000       DC32 0, 16777216, 34144256, 52035584, 67108864, 84017152, 102367232, 119209984, 135921664, 151584768
   \              000100000902
   \              00001A030000
   \              000400000205
   \              00001A060000
   \              1B0700001A08
   \              00000909    
   \   00000028   0000090A0000       DC32 168361984, 186253312, 215678976, 219807744, 0, 251658240, 270139392, 286916608, 303693824, 0
   \              1A0B0000DB0C
   \              00001A0D0000
   \              00000000000F
   \              00001A100000
   \              1A1100001A12
   \              00000000    
   \   00000050   00001A140000       DC32 337248256, 0, 370802688, 387579904, 404357120, 421134336, 437911552, 454688768, 471531520, 488308736
   \              000000001A16
   \              00001A170000
   \              1A1800001A19
   \              00001A1A0000
   \              1A1B00001B1C
   \              00001B1D    
   \   00000078   00001A1E0000       DC32 505020416, 0, 538574848, 555352064, 572129280, 588906496, 605683712, 622460928, 639303680, 654442496
   \              000000001A20
   \              00001A210000
   \              1A2200001A23
   \              00001A240000
   \              1A2500001B26
   \              00000227    
   \   000000A0   00001A280000       DC32 672792576, 687996928, 706412544, 0, 0, 0, 0, 0, 0, 0
   \              022900001B2A
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   000000C8   000000000000       DC32 0, 857341952, 874119168, 890896384, 0, 924450816, 941293568, 0, 0, 0
   \              1A3300001A34
   \              00001A350000
   \              000000001A37
   \              00001B380000
   \              000000000000
   \              00000000    
   \   000000F0   00001B3C0000       DC32 1008402432, 1025179648, 0, 0
   \              1B3D00000000
   \              00000000    
     15          {
     16          	// CMD0
     17              SDHC_XFERTYP_CMDINX(ESDHC_CMD0) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     18              SDHC_XFERTYP_CMDINX(ESDHC_CMD1) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     19              SDHC_XFERTYP_CMDINX(ESDHC_CMD2) | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136),
     20              SDHC_XFERTYP_CMDINX(ESDHC_CMD3) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     21              SDHC_XFERTYP_CMDINX(ESDHC_CMD4) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     22              // CMD5 
     23              SDHC_XFERTYP_CMDINX(ESDHC_CMD5) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     24              SDHC_XFERTYP_CMDINX(ESDHC_CMD6) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     25              SDHC_XFERTYP_CMDINX(ESDHC_CMD7) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     26              SDHC_XFERTYP_CMDINX(ESDHC_CMD8) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     27              SDHC_XFERTYP_CMDINX(ESDHC_CMD9) | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136),
     28              // CMD10 
     29              SDHC_XFERTYP_CMDINX(ESDHC_CMD10) | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136),
     30              SDHC_XFERTYP_CMDINX(ESDHC_CMD11) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     31              SDHC_XFERTYP_CMDINX(ESDHC_CMD12) | SDHC_XFERTYP_CMDTYP(ESDHC_XFERTYP_CMDTYP_ABORT) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     32              SDHC_XFERTYP_CMDINX(ESDHC_CMD13) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     33              0,
     34              // CMD15 
     35              SDHC_XFERTYP_CMDINX(ESDHC_CMD15) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     36              SDHC_XFERTYP_CMDINX(ESDHC_CMD16) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     37              SDHC_XFERTYP_CMDINX(ESDHC_CMD17) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     38              SDHC_XFERTYP_CMDINX(ESDHC_CMD18) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     39              0,
     40              // CMD20 
     41              SDHC_XFERTYP_CMDINX(ESDHC_CMD20) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     42              0,
     43              SDHC_XFERTYP_CMDINX(ESDHC_ACMD22) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     44              SDHC_XFERTYP_CMDINX(ESDHC_ACMD23) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     45              SDHC_XFERTYP_CMDINX(ESDHC_CMD24) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     46              // CMD25 
     47              SDHC_XFERTYP_CMDINX(ESDHC_CMD25) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     48              SDHC_XFERTYP_CMDINX(ESDHC_CMD26) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     49              SDHC_XFERTYP_CMDINX(ESDHC_CMD27) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     50              SDHC_XFERTYP_CMDINX(ESDHC_CMD28) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     51              SDHC_XFERTYP_CMDINX(ESDHC_CMD29) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     52              // CMD30 
     53              SDHC_XFERTYP_CMDINX(ESDHC_CMD30) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     54              0,
     55              SDHC_XFERTYP_CMDINX(ESDHC_CMD32) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     56              SDHC_XFERTYP_CMDINX(ESDHC_CMD33) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     57              SDHC_XFERTYP_CMDINX(ESDHC_CMD34) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     58              // CMD35 
     59              SDHC_XFERTYP_CMDINX(ESDHC_CMD35) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     60              SDHC_XFERTYP_CMDINX(ESDHC_CMD36) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     61              SDHC_XFERTYP_CMDINX(ESDHC_CMD37) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     62              SDHC_XFERTYP_CMDINX(ESDHC_CMD38) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     63              SDHC_XFERTYP_CMDINX(ESDHC_CMD39) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     64              // CMD40 
     65              SDHC_XFERTYP_CMDINX(ESDHC_CMD40) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     66              SDHC_XFERTYP_CMDINX(ESDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     67              SDHC_XFERTYP_CMDINX(ESDHC_CMD42) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     68              0,
     69              0,
     70              // CMD45 
     71              0,
     72              0,
     73              0,
     74              0,
     75              0,
     76              // CMD50 
     77              0,
     78              SDHC_XFERTYP_CMDINX(ESDHC_ACMD51) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     79              SDHC_XFERTYP_CMDINX(ESDHC_CMD52) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     80              SDHC_XFERTYP_CMDINX(ESDHC_CMD53) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     81              0,
     82              // CMD55 
     83              SDHC_XFERTYP_CMDINX(ESDHC_CMD55) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     84              SDHC_XFERTYP_CMDINX(ESDHC_CMD56) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     85              0,
     86              0,
     87              0,
     88              // CMD60 
     89              SDHC_XFERTYP_CMDINX(ESDHC_CMD60) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     90              SDHC_XFERTYP_CMDINX(ESDHC_CMD61) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     91              0,
     92              0
     93          };
     94          static void SDHC_set_baudrate(uint32 clock, uint32 baudrate);
     95          static uint8 SDHC_is_running(void);
     96          static uint32 SDHC_status_wait(uint32 mask);
     97          static uint32 SDHC_send_command (ESDHC_COMMAND_STRUCT_PTR command);
     98          
     99          //=========================================================================
    100          //函数名称：hw_sdhc_init                                                        
    101          //功能概要：初始化SDHC模块。                                                
    102          //参数说明：coreClk：内核时钟                                                    
    103          //         baud：SDHC通信频率                                 
    104          //函数返回：成功时返回：ESDHC_OK;其他返回值为错误。                                                               
    105          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    106          uint32 hw_sdhc_init(uint32 coreClk, uint32 baud)					
    107          {
   \                     hw_sdhc_init:
   \   00000000   80B5               PUSH     {R7,LR}
    108          	SDHC_Card.CARD_TYPE = ESDHC_CARD_NONE;
   \   00000002   ........           LDR.W    R2,??DataTable8
   \   00000006   0023               MOVS     R3,#+0
   \   00000008   1370               STRB     R3,[R2, #+0]
    109          	
    110              //使能SDHC模块的时钟门
    111              SIM_SCGC3 |= SIM_SCGC3_SDHC_MASK;
   \   0000000A   ........           LDR.W    R2,??DataTable8_1  ;; 0x40048030
   \   0000000E   1268               LDR      R2,[R2, #+0]
   \   00000010   52F40032           ORRS     R2,R2,#0x20000
   \   00000014   ........           LDR.W    R3,??DataTable8_1  ;; 0x40048030
   \   00000018   1A60               STR      R2,[R3, #+0]
    112              
    113          	//复位SDHC
    114              SDHC_SYSCTL = SDHC_SYSCTL_RSTA_MASK | SDHC_SYSCTL_SDCLKFS(0x80);    
   \   0000001A   ........           LDR.W    R2,??DataTable8_2  ;; 0x400b102c
   \   0000001E   ........           LDR.W    R3,??DataTable8_3  ;; 0x1008000
   \   00000022   1360               STR      R3,[R2, #+0]
    115              while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA_MASK){};
   \                     ??hw_sdhc_init_0:
   \   00000024   ........           LDR.W    R2,??DataTable8_2  ;; 0x400b102c
   \   00000028   1268               LDR      R2,[R2, #+0]
   \   0000002A   D201               LSLS     R2,R2,#+7
   \   0000002C   FAD4               BMI.N    ??hw_sdhc_init_0
    116              
    117              //初始化SDHC相关寄存器
    118              SDHC_VENDOR = 0;
   \   0000002E   ........           LDR.W    R2,??DataTable8_4  ;; 0x400b10c0
   \   00000032   0023               MOVS     R3,#+0
   \   00000034   1360               STR      R3,[R2, #+0]
    119              SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
   \   00000036   ........           LDR.W    R2,??DataTable8_5  ;; 0x400b1004
   \   0000003A   5FF48133           MOVS     R3,#+66048
   \   0000003E   1360               STR      R3,[R2, #+0]
    120              SDHC_PROCTL = SDHC_PROCTL_EMODE(ESDHC_PROCTL_EMODE_INVARIANT) 
    121                          | SDHC_PROCTL_D3CD_MASK; 
   \   00000040   ........           LDR.W    R2,??DataTable8_6  ;; 0x400b1028
   \   00000044   2823               MOVS     R3,#+40
   \   00000046   1360               STR      R3,[R2, #+0]
    122              SDHC_WML = SDHC_WML_RDWML(1) | SDHC_WML_WRWML(1);
   \   00000048   ........           LDR.W    R2,??DataTable8_7  ;; 0x400b1044
   \   0000004C   5FF00113           MOVS     R3,#+65537
   \   00000050   1360               STR      R3,[R2, #+0]
    123              
    124              //设置SDHC模块的通信速率
    125              SDHC_set_baudrate (coreClk,baud);
   \   00000052   ........           BL       SDHC_set_baudrate
    126              
    127              //检查CMD通道和DAT通道是否准备就绪
    128              while (SDHC_PRSSTAT & (  SDHC_PRSSTAT_CIHB_MASK 
    129                                     | SDHC_PRSSTAT_CDIHB_MASK)){};
   \                     ??hw_sdhc_init_1:
   \   00000056   ........           LDR.W    R0,??DataTable8_8  ;; 0x400b1024
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   10F00300           ANDS     R0,R0,#0x3
   \   00000060   0028               CMP      R0,#+0
   \   00000062   F8D1               BNE.N    ??hw_sdhc_init_1
    130          
    131              //设置复用引脚功能为SDHC
    132              PORTE_PCR(0) = 0xFFFF & (   PORT_PCR_MUX(4) 
    133                                        | PORT_PCR_PS_MASK 
    134                                        | PORT_PCR_PE_MASK 
    135                                        | PORT_PCR_DSE_MASK); // ESDHC.D1  
   \   00000064   ........           LDR.W    R0,??DataTable8_9  ;; 0x4004d000
   \   00000068   40F24341           MOVW     R1,#+1091
   \   0000006C   0160               STR      R1,[R0, #+0]
    136              PORTE_PCR(1) = 0xFFFF & (   PORT_PCR_MUX(4) 
    137                                        | PORT_PCR_PS_MASK 
    138                                        | PORT_PCR_PE_MASK 
    139                                        | PORT_PCR_DSE_MASK); // ESDHC.D0  
   \   0000006E   ........           LDR.W    R0,??DataTable8_10  ;; 0x4004d004
   \   00000072   40F24341           MOVW     R1,#+1091
   \   00000076   0160               STR      R1,[R0, #+0]
    140              PORTE_PCR(2) = 0xFFFF & (   PORT_PCR_MUX(4) 
    141                                        | PORT_PCR_DSE_MASK); // ESDHC.CLK 
   \   00000078   ........           LDR.W    R0,??DataTable8_11  ;; 0x4004d008
   \   0000007C   4FF48861           MOV      R1,#+1088
   \   00000080   0160               STR      R1,[R0, #+0]
    142              PORTE_PCR(3) = 0xFFFF & (   PORT_PCR_MUX(4) 
    143                                        | PORT_PCR_PS_MASK 
    144                                        | PORT_PCR_PE_MASK 
    145                                        | PORT_PCR_DSE_MASK); // ESDHC.CMD 
   \   00000082   ........           LDR.W    R0,??DataTable8_12  ;; 0x4004d00c
   \   00000086   40F24341           MOVW     R1,#+1091
   \   0000008A   0160               STR      R1,[R0, #+0]
    146              PORTE_PCR(4) = 0xFFFF & (   PORT_PCR_MUX(4) 
    147                                        | PORT_PCR_PS_MASK 
    148                                        | PORT_PCR_PE_MASK 
    149                                        | PORT_PCR_DSE_MASK); // ESDHC.D3  
   \   0000008C   ........           LDR.W    R0,??DataTable8_13  ;; 0x4004d010
   \   00000090   40F24341           MOVW     R1,#+1091
   \   00000094   0160               STR      R1,[R0, #+0]
    150              PORTE_PCR(5) = 0xFFFF & (   PORT_PCR_MUX(4) 
    151                                        | PORT_PCR_PS_MASK 
    152                                        | PORT_PCR_PE_MASK 
    153                                        | PORT_PCR_DSE_MASK);  // ESDHC.D2  
   \   00000096   ........           LDR.W    R0,??DataTable8_14  ;; 0x4004d014
   \   0000009A   40F24341           MOVW     R1,#+1091
   \   0000009E   0160               STR      R1,[R0, #+0]
    154              
    155              //清除SDHC模块的中断标志
    156              SDHC_IRQSTAT = 0xFFFF;
   \   000000A0   ........           LDR.W    R0,??DataTable8_15  ;; 0x400b1030
   \   000000A4   4FF6FF71           MOVW     R1,#+65535
   \   000000A8   0160               STR      R1,[R0, #+0]
    157              //使能中断位
    158              SDHC_IRQSTATEN = SDHC_IRQSTATEN_DEBESEN_MASK 
    159                             | SDHC_IRQSTATEN_DCESEN_MASK 
    160                             | SDHC_IRQSTATEN_DTOESEN_MASK 
    161                             | SDHC_IRQSTATEN_CIESEN_MASK 
    162                             | SDHC_IRQSTATEN_CEBESEN_MASK 
    163                             | SDHC_IRQSTATEN_CCESEN_MASK 
    164                             | SDHC_IRQSTATEN_CTOESEN_MASK 
    165                             | SDHC_IRQSTATEN_BRRSEN_MASK 
    166                             | SDHC_IRQSTATEN_BWRSEN_MASK 
    167                             | SDHC_IRQSTATEN_CRMSEN_MASK
    168                             | SDHC_IRQSTATEN_TCSEN_MASK 
    169                             | SDHC_IRQSTATEN_CCSEN_MASK;
   \   000000AA   ........           LDR.W    R0,??DataTable8_16  ;; 0x400b1034
   \   000000AE   ........           LDR.W    R1,??DataTable8_17  ;; 0x7f00b3
   \   000000B2   0160               STR      R1,[R0, #+0]
    170              
    171              //80个时钟周期的初始化
    172              SDHC_SYSCTL |= SDHC_SYSCTL_INITA_MASK;
   \   000000B4   ........           LDR.W    R0,??DataTable8_2  ;; 0x400b102c
   \   000000B8   0068               LDR      R0,[R0, #+0]
   \   000000BA   50F00060           ORRS     R0,R0,#0x8000000
   \   000000BE   ........           LDR.W    R1,??DataTable8_2  ;; 0x400b102c
   \   000000C2   0860               STR      R0,[R1, #+0]
    173              while (SDHC_SYSCTL & SDHC_SYSCTL_INITA_MASK){};
   \                     ??hw_sdhc_init_2:
   \   000000C4   ........           LDR.W    R0,??DataTable8_2  ;; 0x400b102c
   \   000000C8   0068               LDR      R0,[R0, #+0]
   \   000000CA   0001               LSLS     R0,R0,#+4
   \   000000CC   FAD4               BMI.N    ??hw_sdhc_init_2
    174          
    175              //检查卡是否已经插入
    176              if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS_MASK)
   \   000000CE   ........           LDR.W    R0,??DataTable8_8  ;; 0x400b1024
   \   000000D2   0068               LDR      R0,[R0, #+0]
   \   000000D4   C003               LSLS     R0,R0,#+15
   \   000000D6   03D5               BPL.N    ??hw_sdhc_init_3
    177              {
    178              	SDHC_Card.CARD_TYPE = ESDHC_CARD_UNKNOWN;
   \   000000D8   ........           LDR.W    R0,??DataTable8
   \   000000DC   0121               MOVS     R1,#+1
   \   000000DE   0170               STRB     R1,[R0, #+0]
    179              }
    180              SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM_MASK;
   \                     ??hw_sdhc_init_3:
   \   000000E0   ........           LDR.W    R0,??DataTable8_15  ;; 0x400b1030
   \   000000E4   0068               LDR      R0,[R0, #+0]
   \   000000E6   50F08000           ORRS     R0,R0,#0x80
   \   000000EA   ........           LDR.W    R1,??DataTable8_15  ;; 0x400b1030
   \   000000EE   0860               STR      R0,[R1, #+0]
    181              
    182              return ESDHC_OK;
   \   000000F0   0020               MOVS     R0,#+0
   \   000000F2   02BD               POP      {R1,PC}          ;; return
    183          }
    184          
    185          //=========================================================================
    186          //函数名称：hw_sdhc_receive_block                                                         
    187          //功能概要：接收n个字节                                                 
    188          //参数说明：buff: 接收缓冲区                                                 
    189          //		   btr:接收长度                                                     
    190          //函数返回： 1:成功;0:失败                                                    
    191          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    192          uint32 hw_sdhc_receive_block (uint8 *buff,uint32 btr)
    193          {
   \                     hw_sdhc_receive_block:
   \   00000000   10B4               PUSH     {R4}
    194              uint32	bytes, i, j;
    195              uint32	*ptr = (uint32*)buff;
    196              
    197              //当可识别的卡插入后，接收数据前，检测DAT通道是否忙（正在使用中）
    198              if (    (SDHC_Card.CARD_TYPE == ESDHC_CARD_SD) 
    199                   || (SDHC_Card.CARD_TYPE == ESDHC_CARD_SDHC) 
    200                   || (SDHC_Card.CARD_TYPE == ESDHC_CARD_MMC) 
    201                   || (SDHC_Card.CARD_TYPE == ESDHC_CARD_CEATA))
   \   00000002   ........           LDR.W    R2,??DataTable8
   \   00000006   1278               LDRB     R2,[R2, #+0]
   \   00000008   022A               CMP      R2,#+2
   \   0000000A   0ED0               BEQ.N    ??hw_sdhc_receive_block_0
   \   0000000C   ........           LDR.W    R2,??DataTable8
   \   00000010   1278               LDRB     R2,[R2, #+0]
   \   00000012   032A               CMP      R2,#+3
   \   00000014   09D0               BEQ.N    ??hw_sdhc_receive_block_0
   \   00000016   ........           LDR.W    R2,??DataTable8
   \   0000001A   1278               LDRB     R2,[R2, #+0]
   \   0000001C   072A               CMP      R2,#+7
   \   0000001E   04D0               BEQ.N    ??hw_sdhc_receive_block_0
   \   00000020   ........           LDR.W    R2,??DataTable8
   \   00000024   1278               LDRB     R2,[R2, #+0]
   \   00000026   082A               CMP      R2,#+8
   \   00000028   04D1               BNE.N    ??hw_sdhc_receive_block_1
    202              {
    203                  while (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA_MASK){};
   \                     ??hw_sdhc_receive_block_0:
   \   0000002A   ........           LDR.W    R2,??DataTable8_8  ;; 0x400b1024
   \   0000002E   1268               LDR      R2,[R2, #+0]
   \   00000030   5207               LSLS     R2,R2,#+29
   \   00000032   FAD4               BMI.N    ??hw_sdhc_receive_block_0
    204              }    
    205              
    206              //读取数据时，每次读取4个字节
    207              bytes = btr;
   \                     ??hw_sdhc_receive_block_1:
   \   00000034   00E0               B.N      ??hw_sdhc_receive_block_2
    208              while (bytes)
    209              {
    210                  i = bytes > 512 ? 512 : bytes;
    211                  for (j = (i + 3) >> 2; j != 0; j--)
    212                  {
    213                      if (SDHC_IRQSTAT & (    SDHC_IRQSTAT_DEBE_MASK 
    214                                            | SDHC_IRQSTAT_DCE_MASK 
    215                                            | SDHC_IRQSTAT_DTOE_MASK))
    216                      {
    217                          SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE_MASK 
    218                                        | SDHC_IRQSTAT_DCE_MASK 
    219                                        | SDHC_IRQSTAT_DTOE_MASK 
    220                                        | SDHC_IRQSTAT_BRR_MASK;
    221                          return 0;
    222                      }
    223                      
    224                      while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN_MASK)){};
    225          
    226                      *ptr++ = SDHC_DATPORT;
    227                  }
    228                  bytes -= i;
   \                     ??hw_sdhc_receive_block_3:
   \   00000036   891A               SUBS     R1,R1,R2
   \                     ??hw_sdhc_receive_block_2:
   \   00000038   0029               CMP      R1,#+0
   \   0000003A   27D0               BEQ.N    ??hw_sdhc_receive_block_4
   \   0000003C   B1F5007F           CMP      R1,#+512
   \   00000040   02D9               BLS.N    ??hw_sdhc_receive_block_5
   \   00000042   4FF40072           MOV      R2,#+512
   \   00000046   00E0               B.N      ??hw_sdhc_receive_block_6
   \                     ??hw_sdhc_receive_block_5:
   \   00000048   0A00               MOVS     R2,R1
   \                     ??hw_sdhc_receive_block_6:
   \   0000004A   D31C               ADDS     R3,R2,#+3
   \   0000004C   9B08               LSRS     R3,R3,#+2
   \   0000004E   0AE0               B.N      ??hw_sdhc_receive_block_7
   \                     ??hw_sdhc_receive_block_8:
   \   00000050   ........           LDR.W    R4,??DataTable8_8  ;; 0x400b1024
   \   00000054   2468               LDR      R4,[R4, #+0]
   \   00000056   2405               LSLS     R4,R4,#+20
   \   00000058   FAD5               BPL.N    ??hw_sdhc_receive_block_8
   \   0000005A   ........           LDR.W    R4,??DataTable8_18  ;; 0x400b1020
   \   0000005E   2468               LDR      R4,[R4, #+0]
   \   00000060   0460               STR      R4,[R0, #+0]
   \   00000062   001D               ADDS     R0,R0,#+4
   \   00000064   5B1E               SUBS     R3,R3,#+1
   \                     ??hw_sdhc_receive_block_7:
   \   00000066   002B               CMP      R3,#+0
   \   00000068   E5D0               BEQ.N    ??hw_sdhc_receive_block_3
   \   0000006A   ........           LDR.W    R4,??DataTable8_15  ;; 0x400b1030
   \   0000006E   2468               LDR      R4,[R4, #+0]
   \   00000070   14F4E00F           TST      R4,#0x700000
   \   00000074   ECD0               BEQ.N    ??hw_sdhc_receive_block_8
   \   00000076   ........           LDR.W    R0,??DataTable8_15  ;; 0x400b1030
   \   0000007A   0068               LDR      R0,[R0, #+0]
   \   0000007C   ........           LDR.W    R1,??DataTable8_19  ;; 0x700020
   \   00000080   0843               ORRS     R0,R1,R0
   \   00000082   ........           LDR.W    R1,??DataTable8_15  ;; 0x400b1030
   \   00000086   0860               STR      R0,[R1, #+0]
   \   00000088   0020               MOVS     R0,#+0
   \   0000008A   00E0               B.N      ??hw_sdhc_receive_block_9
    229              }
    230              
    231          	return 1;						// Return with success     
   \                     ??hw_sdhc_receive_block_4:
   \   0000008C   0120               MOVS     R0,#+1
   \                     ??hw_sdhc_receive_block_9:
   \   0000008E   10BC               POP      {R4}
   \   00000090   7047               BX       LR               ;; return
    232          }
    233          
    234          //=========================================================================
    235          //函数名称：hw_sdhc_send_block                                                         
    236          //功能概要：发送n个字节                                                 
    237          //参数说明：buff: 发送缓冲区                                                 
    238          //		   btr:发送长度                                                     
    239          //函数返回： 1:成功;0:失败                                                    
    240          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    241          uint32 hw_sdhc_send_block (const uint8 *buff,uint32 btr)
    242          {
   \                     hw_sdhc_send_block:
   \   00000000   10B4               PUSH     {R4}
    243              uint32  bytes, i;
    244              uint32	*ptr = (uint32*)buff;
    245          
    246              //读取数据时，每次读取4个字节
    247              bytes = btr;
    248              while (bytes)
   \                     ??hw_sdhc_send_block_0:
   \   00000002   0029               CMP      R1,#+0
   \   00000004   28D0               BEQ.N    ??hw_sdhc_send_block_1
    249              {
    250                  i = bytes > 512 ? 512 : bytes;
   \   00000006   B1F5007F           CMP      R1,#+512
   \   0000000A   02D9               BLS.N    ??hw_sdhc_send_block_2
   \   0000000C   4FF40072           MOV      R2,#+512
   \   00000010   00E0               B.N      ??hw_sdhc_send_block_3
   \                     ??hw_sdhc_send_block_2:
   \   00000012   0A00               MOVS     R2,R1
    251                  bytes -= i;
   \                     ??hw_sdhc_send_block_3:
   \   00000014   891A               SUBS     R1,R1,R2
    252                  for (i = (i + 3) >> 2; i != 0; i--)
   \   00000016   D21C               ADDS     R2,R2,#+3
   \   00000018   9208               LSRS     R2,R2,#+2
   \   0000001A   0AE0               B.N      ??hw_sdhc_send_block_4
    253                  {
    254                      if (SDHC_IRQSTAT & (    SDHC_IRQSTAT_DEBE_MASK 
    255                                            | SDHC_IRQSTAT_DCE_MASK 
    256                                            | SDHC_IRQSTAT_DTOE_MASK))
    257                      {
    258                      	SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE_MASK 
    259                      	              | SDHC_IRQSTAT_DCE_MASK 
    260                      	              | SDHC_IRQSTAT_DTOE_MASK 
    261                      	              | SDHC_IRQSTAT_BWR_MASK;
    262                          return 0;
    263                      }
    264                      while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN_MASK)){};
   \                     ??hw_sdhc_send_block_5:
   \   0000001C   ........           LDR.W    R3,??DataTable8_8  ;; 0x400b1024
   \   00000020   1B68               LDR      R3,[R3, #+0]
   \   00000022   5B05               LSLS     R3,R3,#+21
   \   00000024   FAD5               BPL.N    ??hw_sdhc_send_block_5
    265          
    266                      SDHC_DATPORT = *ptr++;
   \   00000026   ........           LDR.W    R3,??DataTable8_18  ;; 0x400b1020
   \   0000002A   0468               LDR      R4,[R0, #+0]
   \   0000002C   1C60               STR      R4,[R3, #+0]
   \   0000002E   001D               ADDS     R0,R0,#+4
   \   00000030   521E               SUBS     R2,R2,#+1
   \                     ??hw_sdhc_send_block_4:
   \   00000032   002A               CMP      R2,#+0
   \   00000034   E5D0               BEQ.N    ??hw_sdhc_send_block_0
   \   00000036   ........           LDR.W    R3,??DataTable8_15  ;; 0x400b1030
   \   0000003A   1B68               LDR      R3,[R3, #+0]
   \   0000003C   13F4E00F           TST      R3,#0x700000
   \   00000040   ECD0               BEQ.N    ??hw_sdhc_send_block_5
   \   00000042   ........           LDR.W    R0,??DataTable8_15  ;; 0x400b1030
   \   00000046   0068               LDR      R0,[R0, #+0]
   \   00000048   ........           LDR.W    R1,??DataTable8_20  ;; 0x700010
   \   0000004C   0843               ORRS     R0,R1,R0
   \   0000004E   ........           LDR.W    R1,??DataTable8_15  ;; 0x400b1030
   \   00000052   0860               STR      R0,[R1, #+0]
   \   00000054   0020               MOVS     R0,#+0
   \   00000056   00E0               B.N      ??hw_sdhc_send_block_6
    267          
    268                  }
    269              }
    270          	return 1;
   \                     ??hw_sdhc_send_block_1:
   \   00000058   0120               MOVS     R0,#+1
   \                     ??hw_sdhc_send_block_6:
   \   0000005A   10BC               POP      {R4}
   \   0000005C   7047               BX       LR               ;; return
    271          }
    272          
    273          //=========================================================================
    274          //函数名称：hw_sdhc_ioctl
    275          //功能概要：配置SDHC模块
    276          //参数说明：cmd: 配置命令
    277          //		   param_ptr:数据指针
    278          //函数返回： 功时返回：ESDHC_OK;其他返回值为错误
    279          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    280          uint32 hw_sdhc_ioctl(uint32 cmd,void *param_ptr)
    281          {
   \                     hw_sdhc_ioctl:
   \   00000000   2DE9F047           PUSH     {R4-R10,LR}
   \   00000004   88B0               SUB      SP,SP,#+32
   \   00000006   0C00               MOVS     R4,R1
    282              ESDHC_COMMAND_STRUCT    command; 
    283              uint8   mem, io, mmc, ceata, mp, hc; //标志当前卡类型
    284              uint32  i, val;
    285              uint32  result = ESDHC_OK;
   \   00000008   5FF0000A           MOVS     R10,#+0
    286              uint32  *param32_ptr = param_ptr;
    287              
    288              switch (cmd) 
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   16D0               BEQ.N    ??hw_sdhc_ioctl_0
   \   00000010   C0F06482           BCC.W    ??hw_sdhc_ioctl_1
   \   00000014   0328               CMP      R0,#+3
   \   00000016   00F03282           BEQ.W    ??hw_sdhc_ioctl_2
   \   0000001A   C0F02A81           BCC.W    ??hw_sdhc_ioctl_3
   \   0000001E   0528               CMP      R0,#+5
   \   00000020   00F04B81           BEQ.W    ??hw_sdhc_ioctl_4
   \   00000024   C0F02F81           BCC.W    ??hw_sdhc_ioctl_5
   \   00000028   0728               CMP      R0,#+7
   \   0000002A   00F0ED81           BEQ.W    ??hw_sdhc_ioctl_6
   \   0000002E   C0F0CC81           BCC.W    ??hw_sdhc_ioctl_7
   \   00000032   0928               CMP      R0,#+9
   \   00000034   00F0A381           BEQ.W    ??hw_sdhc_ioctl_8
   \   00000038   C0F09581           BCC.W    ??hw_sdhc_ioctl_9
   \   0000003C   4EE2               B.N      ??hw_sdhc_ioctl_1
    289              {
    290                  //初始化SD卡读写系统
    291                  case IO_IOCTL_ESDHC_INIT:        	
    292                      result = hw_sdhc_init (CORE_CLOCK_HZ, BAUD_RATE_HZ);
   \                     ??hw_sdhc_ioctl_0:
   \   0000003E   ........           LDR.W    R1,??DataTable8_21  ;; 0x17d7840
   \   00000042   ........           LDR.W    R0,??DataTable8_22  ;; 0x5b8d800
   \   00000046   ........           BL       hw_sdhc_init
   \   0000004A   8246               MOV      R10,R0
    293                      if (ESDHC_OK != result)
   \   0000004C   BAF1000F           CMP      R10,#+0
   \   00000050   40F04682           BNE.W    ??hw_sdhc_ioctl_10
    294                      {
    295                          break;
    296                      }
    297                      
    298                      mem = FALSE;
   \                     ??hw_sdhc_ioctl_11:
   \   00000054   0024               MOVS     R4,#+0
    299                      io = FALSE;
   \   00000056   0025               MOVS     R5,#+0
    300                      mmc = FALSE;
   \   00000058   0026               MOVS     R6,#+0
    301                      ceata = FALSE;
   \   0000005A   0027               MOVS     R7,#+0
    302                      hc = FALSE;
   \   0000005C   5FF00008           MOVS     R8,#+0
    303                      mp = FALSE;
   \   00000060   5FF00009           MOVS     R9,#+0
    304          
    305                      //CMD0,使得SD卡进入空闲模式，复位SD卡
    306                      command.COMMAND = ESDHC_CMD0;
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   8DF80000           STRB     R0,[SP, #+0]
    307                      command.TYPE = ESDHC_TYPE_NORMAL;
   \   0000006A   0020               MOVS     R0,#+0
   \   0000006C   8DF80100           STRB     R0,[SP, #+1]
    308                      command.ARGUMENT = 0;
   \   00000070   0020               MOVS     R0,#+0
   \   00000072   0190               STR      R0,[SP, #+4]
    309                      command.READ = FALSE;
   \   00000074   0020               MOVS     R0,#+0
   \   00000076   8DF80800           STRB     R0,[SP, #+8]
    310                      command.BLOCKS = 0;
   \   0000007A   0020               MOVS     R0,#+0
   \   0000007C   0390               STR      R0,[SP, #+12]
    311                      if (SDHC_send_command (&command))
   \   0000007E   00A8               ADD      R0,SP,#+0
   \   00000080   ........           BL       SDHC_send_command
   \   00000084   0028               CMP      R0,#+0
   \   00000086   02D0               BEQ.N    ??hw_sdhc_ioctl_12
    312                      {
    313                          result = ESDHC_ERROR_INIT_FAILED;
   \   00000088   5FF0010A           MOVS     R10,#+1
    314                          break;
   \   0000008C   28E2               B.N      ??hw_sdhc_ioctl_10
    315                      }
    316                      
    317                      for(i = 0;i < 2000000;i++)
   \                     ??hw_sdhc_ioctl_12:
   \   0000008E   0020               MOVS     R0,#+0
   \   00000090   00E0               B.N      ??hw_sdhc_ioctl_13
   \                     ??hw_sdhc_ioctl_14:
   \   00000092   401C               ADDS     R0,R0,#+1
   \                     ??hw_sdhc_ioctl_13:
   \   00000094   ........           LDR.W    R1,??DataTable8_23  ;; 0x1e8480
   \   00000098   8842               CMP      R0,R1
   \   0000009A   FAD3               BCC.N    ??hw_sdhc_ioctl_14
    318                      {
    319                      }
    320          
    321                      //CMD8
    322                      command.COMMAND = ESDHC_CMD8;
   \   0000009C   0820               MOVS     R0,#+8
   \   0000009E   8DF80000           STRB     R0,[SP, #+0]
    323                      command.TYPE = ESDHC_TYPE_NORMAL;
   \   000000A2   0020               MOVS     R0,#+0
   \   000000A4   8DF80100           STRB     R0,[SP, #+1]
    324                      command.ARGUMENT = 0x000001AA;
   \   000000A8   4FF4D570           MOV      R0,#+426
   \   000000AC   0190               STR      R0,[SP, #+4]
    325                      command.READ = FALSE;
   \   000000AE   0020               MOVS     R0,#+0
   \   000000B0   8DF80800           STRB     R0,[SP, #+8]
    326                      command.BLOCKS = 0;
   \   000000B4   0020               MOVS     R0,#+0
   \   000000B6   0390               STR      R0,[SP, #+12]
    327                      val = SDHC_send_command (&command);
   \   000000B8   00A8               ADD      R0,SP,#+0
   \   000000BA   ........           BL       SDHC_send_command
   \   000000BE   8146               MOV      R9,R0
    328                      
    329                      if (val == 0)
   \   000000C0   B9F1000F           CMP      R9,#+0
   \   000000C4   08D1               BNE.N    ??hw_sdhc_ioctl_15
    330                      {
    331                          // SDHC卡
    332                      	if (command.RESPONSE[0] != command.ARGUMENT)
   \   000000C6   0498               LDR      R0,[SP, #+16]
   \   000000C8   0199               LDR      R1,[SP, #+4]
   \   000000CA   8842               CMP      R0,R1
   \   000000CC   02D0               BEQ.N    ??hw_sdhc_ioctl_16
    333                          {
    334                              result = ESDHC_ERROR_INIT_FAILED;
   \   000000CE   5FF0010A           MOVS     R10,#+1
    335                              break;
   \   000000D2   05E2               B.N      ??hw_sdhc_ioctl_10
    336                          }
    337                          hc = TRUE;
   \                     ??hw_sdhc_ioctl_16:
   \   000000D4   5FF00108           MOVS     R8,#+1
    338                      }
    339          
    340                      mp = TRUE;
   \                     ??hw_sdhc_ioctl_15:
   \   000000D8   5FF00109           MOVS     R9,#+1
    341                      
    342                      if (mp)
   \   000000DC   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000E0   B9F1000F           CMP      R9,#+0
   \   000000E4   00F08C80           BEQ.W    ??hw_sdhc_ioctl_17
    343                      {
    344                          //CMD55，检查是否为MMC卡
    345                          command.COMMAND = ESDHC_CMD55;
   \   000000E8   3720               MOVS     R0,#+55
   \   000000EA   8DF80000           STRB     R0,[SP, #+0]
    346                          command.TYPE = ESDHC_TYPE_NORMAL;
   \   000000EE   0020               MOVS     R0,#+0
   \   000000F0   8DF80100           STRB     R0,[SP, #+1]
    347                          command.ARGUMENT = 0;
   \   000000F4   0020               MOVS     R0,#+0
   \   000000F6   0190               STR      R0,[SP, #+4]
    348                          command.READ = FALSE;
   \   000000F8   0020               MOVS     R0,#+0
   \   000000FA   8DF80800           STRB     R0,[SP, #+8]
    349                          command.BLOCKS = 0;
   \   000000FE   0020               MOVS     R0,#+0
   \   00000100   0390               STR      R0,[SP, #+12]
    350                          val = SDHC_send_command (&command);
   \   00000102   00A8               ADD      R0,SP,#+0
   \   00000104   ........           BL       SDHC_send_command
   \   00000108   8146               MOV      R9,R0
    351                          if (val > 0)
   \   0000010A   B9F1000F           CMP      R9,#+0
   \   0000010E   02D0               BEQ.N    ??hw_sdhc_ioctl_18
    352                          {
    353                              result = ESDHC_ERROR_INIT_FAILED;
   \   00000110   5FF0010A           MOVS     R10,#+1
    354                              break;
   \   00000114   E4E1               B.N      ??hw_sdhc_ioctl_10
    355                          }
    356                          if (val < 0)
    357                          {
    358                              // MMC 或 CE-ATA
    359                              io = FALSE;
    360                              mem = FALSE;
    361                              hc = FALSE;
    362                              
    363                              //CMD1
    364                              command.COMMAND = ESDHC_CMD1;
    365                              command.TYPE = ESDHC_TYPE_NORMAL;
    366                              command.ARGUMENT = 0x40300000;
    367                              command.READ = FALSE;
    368                              command.BLOCKS = 0;
    369                              if (SDHC_send_command (&command))
    370                              {
    371                                  result = ESDHC_ERROR_INIT_FAILED;
    372                                  break;
    373                              }
    374                              if (0x20000000 == (command.RESPONSE[0] & 0x60000000))
    375                              {
    376                                  hc = TRUE;
    377                              }
    378                              mmc = TRUE;
    379          
    380                              //CMD39
    381                              command.COMMAND = ESDHC_CMD39;
    382                              command.TYPE = ESDHC_TYPE_NORMAL;
    383                              command.ARGUMENT = 0x0C00;
    384                              command.READ = FALSE;
    385                              command.BLOCKS = 0;
    386                              if (SDHC_send_command (&command))
    387                              {
    388                                  result = ESDHC_ERROR_INIT_FAILED;
    389                                  break;
    390                              }
    391                              if (0xCE == (command.RESPONSE[0] >> 8) & 0xFF)
    392                              {
    393                                  //CMD39
    394                                  command.COMMAND = ESDHC_CMD39;
    395                                  command.TYPE = ESDHC_TYPE_NORMAL;
    396                                  command.ARGUMENT = 0x0D00;
    397                                  command.READ = FALSE;
    398                                  command.BLOCKS = 0;
    399                                  if (SDHC_send_command (&command))
    400                                  {
    401                                      result = ESDHC_ERROR_INIT_FAILED;
    402                                      break;
    403                                  }
    404                                  if (0xAA == (command.RESPONSE[0] >> 8) & 0xFF)
    405                                  {
    406                                      mmc = FALSE;
    407                                      ceata = TRUE;
    408                                  }
    409                              }
    410                          }
    411                          else
    412                          {
    413                              //当为SD卡时
    414                              // ACMD41
    415                              command.COMMAND = ESDHC_ACMD41;
   \                     ??hw_sdhc_ioctl_18:
   \   00000116   6920               MOVS     R0,#+105
   \   00000118   8DF80000           STRB     R0,[SP, #+0]
    416                              command.TYPE = ESDHC_TYPE_NORMAL;
   \   0000011C   0020               MOVS     R0,#+0
   \   0000011E   8DF80100           STRB     R0,[SP, #+1]
    417                              command.ARGUMENT = 0;
   \   00000122   0020               MOVS     R0,#+0
   \   00000124   0190               STR      R0,[SP, #+4]
    418                              command.READ = FALSE;
   \   00000126   0020               MOVS     R0,#+0
   \   00000128   8DF80800           STRB     R0,[SP, #+8]
    419                              command.BLOCKS = 0;
   \   0000012C   0020               MOVS     R0,#+0
   \   0000012E   0390               STR      R0,[SP, #+12]
    420                              if (SDHC_send_command (&command))
   \   00000130   00A8               ADD      R0,SP,#+0
   \   00000132   ........           BL       SDHC_send_command
   \   00000136   0028               CMP      R0,#+0
   \   00000138   02D0               BEQ.N    ??hw_sdhc_ioctl_19
    421                              {
    422                                  result = ESDHC_ERROR_INIT_FAILED;
   \   0000013A   5FF0010A           MOVS     R10,#+1
    423                                  break;
   \   0000013E   CFE1               B.N      ??hw_sdhc_ioctl_10
    424                              }
    425                              if (command.RESPONSE[0] & 0x300000)
   \                     ??hw_sdhc_ioctl_19:
   \   00000140   0498               LDR      R0,[SP, #+16]
   \   00000142   10F4401F           TST      R0,#0x300000
   \   00000146   5BD0               BEQ.N    ??hw_sdhc_ioctl_17
    426                              {
    427                                  val = 0;
   \   00000148   5FF00009           MOVS     R9,#+0
    428                                  do 
    429                                  {
    430                                      for(i = 0;i < 500000;i++)
   \                     ??hw_sdhc_ioctl_20:
   \   0000014C   0020               MOVS     R0,#+0
   \   0000014E   00E0               B.N      ??hw_sdhc_ioctl_21
   \                     ??hw_sdhc_ioctl_22:
   \   00000150   401C               ADDS     R0,R0,#+1
   \                     ??hw_sdhc_ioctl_21:
   \   00000152   ........           LDR.W    R1,??DataTable8_24  ;; 0x7a120
   \   00000156   8842               CMP      R0,R1
   \   00000158   FAD3               BCC.N    ??hw_sdhc_ioctl_22
    431                                      {
    432                                      }
    433                                      val++;
   \   0000015A   19F10109           ADDS     R9,R9,#+1
    434                                      
    435                                      // CMD55 + ACMD41 - Send OCR 
    436                                      command.COMMAND = ESDHC_CMD55;
   \   0000015E   3720               MOVS     R0,#+55
   \   00000160   8DF80000           STRB     R0,[SP, #+0]
    437                                      command.TYPE = ESDHC_TYPE_NORMAL;
   \   00000164   0020               MOVS     R0,#+0
   \   00000166   8DF80100           STRB     R0,[SP, #+1]
    438                                      command.ARGUMENT = 0;
   \   0000016A   0020               MOVS     R0,#+0
   \   0000016C   0190               STR      R0,[SP, #+4]
    439                                      command.READ = FALSE;
   \   0000016E   0020               MOVS     R0,#+0
   \   00000170   8DF80800           STRB     R0,[SP, #+8]
    440                                      command.BLOCKS = 0;
   \   00000174   0020               MOVS     R0,#+0
   \   00000176   0390               STR      R0,[SP, #+12]
    441                                      if (SDHC_send_command (&command))
   \   00000178   00A8               ADD      R0,SP,#+0
   \   0000017A   ........           BL       SDHC_send_command
   \   0000017E   0028               CMP      R0,#+0
   \   00000180   02D0               BEQ.N    ??hw_sdhc_ioctl_23
    442                                      {
    443                                          result = ESDHC_ERROR_INIT_FAILED;
   \   00000182   5FF0010A           MOVS     R10,#+1
    444                                          break;
   \   00000186   24E0               B.N      ??hw_sdhc_ioctl_24
    445                                      }
    446          
    447                                      command.COMMAND = ESDHC_ACMD41;
   \                     ??hw_sdhc_ioctl_23:
   \   00000188   6920               MOVS     R0,#+105
   \   0000018A   8DF80000           STRB     R0,[SP, #+0]
    448                                      command.TYPE = ESDHC_TYPE_NORMAL;
   \   0000018E   0020               MOVS     R0,#+0
   \   00000190   8DF80100           STRB     R0,[SP, #+1]
    449                                      if (hc)
   \   00000194   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000198   B8F1000F           CMP      R8,#+0
   \   0000019C   03D0               BEQ.N    ??hw_sdhc_ioctl_25
    450                                      {
    451                                          command.ARGUMENT = 0x40300000;
   \   0000019E   ........           LDR.W    R0,??DataTable8_25  ;; 0x40300000
   \   000001A2   0190               STR      R0,[SP, #+4]
   \   000001A4   02E0               B.N      ??hw_sdhc_ioctl_26
    452                                      }
    453                                      else
    454                                      {
    455                                          command.ARGUMENT = 0x00300000;
   \                     ??hw_sdhc_ioctl_25:
   \   000001A6   5FF44010           MOVS     R0,#+3145728
   \   000001AA   0190               STR      R0,[SP, #+4]
    456                                      }
    457                                      command.READ = FALSE;
   \                     ??hw_sdhc_ioctl_26:
   \   000001AC   0020               MOVS     R0,#+0
   \   000001AE   8DF80800           STRB     R0,[SP, #+8]
    458                                      command.BLOCKS = 0;
   \   000001B2   0020               MOVS     R0,#+0
   \   000001B4   0390               STR      R0,[SP, #+12]
    459                                      if (SDHC_send_command (&command))
   \   000001B6   00A8               ADD      R0,SP,#+0
   \   000001B8   ........           BL       SDHC_send_command
   \   000001BC   0028               CMP      R0,#+0
   \   000001BE   02D0               BEQ.N    ??hw_sdhc_ioctl_27
    460                                      {
    461                                          result = ESDHC_ERROR_INIT_FAILED;
   \   000001C0   5FF0010A           MOVS     R10,#+1
    462                                          break;
   \   000001C4   05E0               B.N      ??hw_sdhc_ioctl_24
    463                                      }
    464                                  } while ((0 == (command.RESPONSE[0] & 0x80000000)) && (val < 10));
   \                     ??hw_sdhc_ioctl_27:
   \   000001C6   0498               LDR      R0,[SP, #+16]
   \   000001C8   0028               CMP      R0,#+0
   \   000001CA   02D4               BMI.N    ??hw_sdhc_ioctl_24
   \   000001CC   B9F10A0F           CMP      R9,#+10
   \   000001D0   BCD3               BCC.N    ??hw_sdhc_ioctl_20
    465                                  if (ESDHC_OK != result)
   \                     ??hw_sdhc_ioctl_24:
   \   000001D2   BAF1000F           CMP      R10,#+0
   \   000001D6   40F08381           BNE.W    ??hw_sdhc_ioctl_10
    466                                  {
    467                                      break;
    468                                  }
    469                                  if (val >= 10)
   \                     ??hw_sdhc_ioctl_28:
   \   000001DA   B9F10A0F           CMP      R9,#+10
   \   000001DE   02D3               BCC.N    ??hw_sdhc_ioctl_29
    470                                  {
    471                                      hc = FALSE;
   \   000001E0   5FF00008           MOVS     R8,#+0
   \   000001E4   0CE0               B.N      ??hw_sdhc_ioctl_17
    472                                  }
    473                                  else
    474                                  {
    475                                      mem = TRUE;
   \                     ??hw_sdhc_ioctl_29:
   \   000001E6   0124               MOVS     R4,#+1
    476                                      if (hc)
   \   000001E8   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001EC   B8F1000F           CMP      R8,#+0
   \   000001F0   06D0               BEQ.N    ??hw_sdhc_ioctl_17
    477                                      {
    478                                          hc = FALSE;
   \   000001F2   5FF00008           MOVS     R8,#+0
    479                                          if (command.RESPONSE[0] & 0x40000000)
   \   000001F6   0498               LDR      R0,[SP, #+16]
   \   000001F8   4000               LSLS     R0,R0,#+1
   \   000001FA   01D5               BPL.N    ??hw_sdhc_ioctl_17
    480                                          {
    481                                              hc = TRUE;
   \   000001FC   5FF00108           MOVS     R8,#+1
    482                                          }
    483                                      }
    484                                  }
    485                              }
    486                          }
    487                      }
    488                      
    489                      
    490                      if (mmc)
   \                     ??hw_sdhc_ioctl_17:
   \   00000200   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000202   002E               CMP      R6,#+0
   \   00000204   03D0               BEQ.N    ??hw_sdhc_ioctl_30
    491                      {
    492                      	SDHC_Card.CARD_TYPE = ESDHC_CARD_MMC;
   \   00000206   ........           LDR.W    R0,??DataTable8
   \   0000020A   0721               MOVS     R1,#+7
   \   0000020C   0170               STRB     R1,[R0, #+0]
    493                      }
    494                      if (ceata)
   \                     ??hw_sdhc_ioctl_30:
   \   0000020E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000210   002F               CMP      R7,#+0
   \   00000212   03D0               BEQ.N    ??hw_sdhc_ioctl_31
    495                      {
    496                      	SDHC_Card.CARD_TYPE = ESDHC_CARD_CEATA;
   \   00000214   ........           LDR.W    R0,??DataTable8
   \   00000218   0821               MOVS     R1,#+8
   \   0000021A   0170               STRB     R1,[R0, #+0]
    497                      }
    498                      if (io)
   \                     ??hw_sdhc_ioctl_31:
   \   0000021C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000021E   002D               CMP      R5,#+0
   \   00000220   03D0               BEQ.N    ??hw_sdhc_ioctl_32
    499                      {
    500                      	SDHC_Card.CARD_TYPE = ESDHC_CARD_SDIO;
   \   00000222   ........           LDR.W    R0,??DataTable8
   \   00000226   0421               MOVS     R1,#+4
   \   00000228   0170               STRB     R1,[R0, #+0]
    501                      }
    502                      if (mem)
   \                     ??hw_sdhc_ioctl_32:
   \   0000022A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000022C   002C               CMP      R4,#+0
   \   0000022E   0CD0               BEQ.N    ??hw_sdhc_ioctl_33
    503                      {
    504                      	SDHC_Card.CARD_TYPE = ESDHC_CARD_SD;
   \   00000230   ........           LDR.W    R0,??DataTable8
   \   00000234   0221               MOVS     R1,#+2
   \   00000236   0170               STRB     R1,[R0, #+0]
    505                          if (hc)
   \   00000238   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000023C   B8F1000F           CMP      R8,#+0
   \   00000240   03D0               BEQ.N    ??hw_sdhc_ioctl_33
    506                          {
    507                          	SDHC_Card.CARD_TYPE = ESDHC_CARD_SDHC;
   \   00000242   ........           LDR.W    R0,??DataTable8
   \   00000246   0321               MOVS     R1,#+3
   \   00000248   0170               STRB     R1,[R0, #+0]
    508                          }
    509                      }
    510                      if (io && mem)
   \                     ??hw_sdhc_ioctl_33:
   \   0000024A   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000024C   002D               CMP      R5,#+0
   \   0000024E   0FD0               BEQ.N    ??hw_sdhc_ioctl_34
   \   00000250   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000252   002C               CMP      R4,#+0
   \   00000254   0CD0               BEQ.N    ??hw_sdhc_ioctl_34
    511                      {
    512                      	SDHC_Card.CARD_TYPE = ESDHC_CARD_SDCOMBO;
   \   00000256   ........           LDR.W    R0,??DataTable8
   \   0000025A   0521               MOVS     R1,#+5
   \   0000025C   0170               STRB     R1,[R0, #+0]
    513                          if (hc)
   \   0000025E   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000262   B8F1000F           CMP      R8,#+0
   \   00000266   03D0               BEQ.N    ??hw_sdhc_ioctl_34
    514                          {
    515                          	SDHC_Card.CARD_TYPE = ESDHC_CARD_SDHCCOMBO;
   \   00000268   ........           LDR.W    R0,??DataTable8
   \   0000026C   0621               MOVS     R1,#+6
   \   0000026E   0170               STRB     R1,[R0, #+0]
    516                          }
    517                      }
    518          
    519                      /*
    520                      //清除引脚复用寄存器
    521                      PORTE_PCR(0) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D1  
    522                      PORTE_PCR(1) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D0  
    523                      PORTE_PCR(2) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_DSE_MASK);                                          // ESDHC.CLK 
    524                      PORTE_PCR(3) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.CMD 
    525                      PORTE_PCR(4) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D3  
    526                      PORTE_PCR(5) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D2  
    527          
    528                      //设置SDHC模块的波特率
    529                      SDHC_set_baudrate (CORE_CLOCK_HZ, BAUD_RATE_HZ);
    530          
    531                      //设置复用引脚功能为SDHC
    532                      PORTE_PCR(0) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D1  
    533                      PORTE_PCR(1) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D0  
    534                      PORTE_PCR(2) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_DSE_MASK);                                          // ESDHC.CLK 
    535                      PORTE_PCR(3) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.CMD 
    536                      PORTE_PCR(4) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D3  
    537                      PORTE_PCR(5) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D2  
    538          
    539                      //使能SDHC模块的时钟
    540                      SIM_SCGC3 |= SIM_SCGC3_SDHC_MASK;
    541                      */
    542                      break;
   \                     ??hw_sdhc_ioctl_34:
   \   00000270   36E1               B.N      ??hw_sdhc_ioctl_10
    543                  //向卡发送命令
    544                  case IO_IOCTL_ESDHC_SEND_COMMAND:
    545                      val = SDHC_send_command ((ESDHC_COMMAND_STRUCT_PTR)param32_ptr);
   \                     ??hw_sdhc_ioctl_3:
   \   00000272   2000               MOVS     R0,R4
   \   00000274   ........           BL       SDHC_send_command
   \   00000278   8146               MOV      R9,R0
    546                      if (val > 0)
   \   0000027A   B9F1000F           CMP      R9,#+0
   \   0000027E   01D0               BEQ.N    ??hw_sdhc_ioctl_35
    547                      {
    548                          result = ESDHC_ERROR_COMMAND_FAILED;
   \   00000280   5FF0020A           MOVS     R10,#+2
    549                      }
    550                      if (val < 0)
    551                      {
    552                          result = ESDHC_ERROR_COMMAND_TIMEOUT;
    553                      }
    554                      break;
   \                     ??hw_sdhc_ioctl_35:
   \   00000284   2CE1               B.N      ??hw_sdhc_ioctl_10
    555                  //获取当前通信波特率状态
    556                  case IO_IOCTL_ESDHC_GET_BAUDRATE:
    557                      if (NULL == param32_ptr) 
   \                     ??hw_sdhc_ioctl_5:
   \   00000286   002C               CMP      R4,#+0
   \   00000288   02D1               BNE.N    ??hw_sdhc_ioctl_36
    558                      {
    559                          result = IO_ERROR_INVALID_PARAMETER;
   \   0000028A   5FF00C0A           MOVS     R10,#+12
   \   0000028E   13E0               B.N      ??hw_sdhc_ioctl_37
    560                      } 
    561                      else 
    562                      {
    563                          //获取当前设置的波特率
    564                          val = ((SDHC_SYSCTL & SDHC_SYSCTL_SDCLKFS_MASK) >> SDHC_SYSCTL_SDCLKFS_SHIFT) << 1;
   \                     ??hw_sdhc_ioctl_36:
   \   00000290   ........           LDR.W    R0,??DataTable8_2  ;; 0x400b102c
   \   00000294   0068               LDR      R0,[R0, #+0]
   \   00000296   C0F30720           UBFX     R0,R0,#+8,#+8
   \   0000029A   5FEA4009           LSLS     R9,R0,#+1
    565                          val *= ((SDHC_SYSCTL & SDHC_SYSCTL_DVS_MASK) >> SDHC_SYSCTL_DVS_SHIFT) + 1;
   \   0000029E   ........           LDR.W    R0,??DataTable8_2  ;; 0x400b102c
   \   000002A2   0068               LDR      R0,[R0, #+0]
   \   000002A4   C0F30310           UBFX     R0,R0,#+4,#+4
   \   000002A8   401C               ADDS     R0,R0,#+1
   \   000002AA   00FB09F9           MUL      R9,R0,R9
    566                          *param32_ptr = (uint32)(CORE_CLOCK_HZ / val);
   \   000002AE   ........           LDR.W    R0,??DataTable8_22  ;; 0x5b8d800
   \   000002B2   B0FBF9F0           UDIV     R0,R0,R9
   \   000002B6   2060               STR      R0,[R4, #+0]
    567                      }
    568                      break;
   \                     ??hw_sdhc_ioctl_37:
   \   000002B8   12E1               B.N      ??hw_sdhc_ioctl_10
    569                  //设定当前通信波特率状态
    570                  case IO_IOCTL_ESDHC_SET_BAUDRATE:
    571                      if (NULL == param32_ptr) 
   \                     ??hw_sdhc_ioctl_4:
   \   000002BA   002C               CMP      R4,#+0
   \   000002BC   02D1               BNE.N    ??hw_sdhc_ioctl_38
    572                      {
    573                          result = IO_ERROR_INVALID_PARAMETER;
   \   000002BE   5FF00C0A           MOVS     R10,#+12
   \   000002C2   4FE0               B.N      ??hw_sdhc_ioctl_39
    574                      } 
    575                      else if (0 == (*param32_ptr)) 
   \                     ??hw_sdhc_ioctl_38:
   \   000002C4   2068               LDR      R0,[R4, #+0]
   \   000002C6   0028               CMP      R0,#+0
   \   000002C8   02D1               BNE.N    ??hw_sdhc_ioctl_40
    576                      {
    577                          result = IO_ERROR_INVALID_PARAMETER;
   \   000002CA   5FF00C0A           MOVS     R10,#+12
   \   000002CE   49E0               B.N      ??hw_sdhc_ioctl_39
    578                      } 
    579                      else 
    580                      {
    581                          if (! SDHC_is_running())
   \                     ??hw_sdhc_ioctl_40:
   \   000002D0   ........           BL       SDHC_is_running
   \   000002D4   0028               CMP      R0,#+0
   \   000002D6   43D1               BNE.N    ??hw_sdhc_ioctl_41
    582                          {
    583                          	//清除引脚复用寄存器
    584                              PORTE_PCR(0) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D1  
   \   000002D8   ........           LDR.W    R0,??DataTable8_9  ;; 0x4004d000
   \   000002DC   0021               MOVS     R1,#+0
   \   000002DE   0160               STR      R1,[R0, #+0]
    585                              PORTE_PCR(1) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D0  
   \   000002E0   ........           LDR.W    R0,??DataTable8_10  ;; 0x4004d004
   \   000002E4   0021               MOVS     R1,#+0
   \   000002E6   0160               STR      R1,[R0, #+0]
    586                              PORTE_PCR(2) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_DSE_MASK);                                          // ESDHC.CLK 
   \   000002E8   ........           LDR.W    R0,??DataTable8_11  ;; 0x4004d008
   \   000002EC   0021               MOVS     R1,#+0
   \   000002EE   0160               STR      R1,[R0, #+0]
    587                              PORTE_PCR(3) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.CMD 
   \   000002F0   ........           LDR.W    R0,??DataTable8_12  ;; 0x4004d00c
   \   000002F4   0021               MOVS     R1,#+0
   \   000002F6   0160               STR      R1,[R0, #+0]
    588                              PORTE_PCR(4) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D3  
   \   000002F8   ........           LDR.W    R0,??DataTable8_13  ;; 0x4004d010
   \   000002FC   0021               MOVS     R1,#+0
   \   000002FE   0160               STR      R1,[R0, #+0]
    589                              PORTE_PCR(5) = 0 & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D2  
   \   00000300   ........           LDR.W    R0,??DataTable8_14  ;; 0x4004d014
   \   00000304   0021               MOVS     R1,#+0
   \   00000306   0160               STR      R1,[R0, #+0]
    590          
    591                              //设置SDHC模块的波特率
    592                              SDHC_set_baudrate (CORE_CLOCK_HZ, *param32_ptr);
   \   00000308   2168               LDR      R1,[R4, #+0]
   \   0000030A   ........           LDR.W    R0,??DataTable8_22  ;; 0x5b8d800
   \   0000030E   ........           BL       SDHC_set_baudrate
    593          
    594                              //设置复用引脚功能为SDHC
    595                              PORTE_PCR(0) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D1  
   \   00000312   ........           LDR.W    R0,??DataTable8_9  ;; 0x4004d000
   \   00000316   40F24341           MOVW     R1,#+1091
   \   0000031A   0160               STR      R1,[R0, #+0]
    596                              PORTE_PCR(1) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D0  
   \   0000031C   ........           LDR.W    R0,??DataTable8_10  ;; 0x4004d004
   \   00000320   40F24341           MOVW     R1,#+1091
   \   00000324   0160               STR      R1,[R0, #+0]
    597                              PORTE_PCR(2) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_DSE_MASK);                                          // ESDHC.CLK 
   \   00000326   ........           LDR.W    R0,??DataTable8_11  ;; 0x4004d008
   \   0000032A   4FF48861           MOV      R1,#+1088
   \   0000032E   0160               STR      R1,[R0, #+0]
    598                              PORTE_PCR(3) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.CMD 
   \   00000330   ........           LDR.W    R0,??DataTable8_12  ;; 0x4004d00c
   \   00000334   40F24341           MOVW     R1,#+1091
   \   00000338   0160               STR      R1,[R0, #+0]
    599                              PORTE_PCR(4) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D3  
   \   0000033A   ........           LDR.W    R0,??DataTable8_13  ;; 0x4004d010
   \   0000033E   40F24341           MOVW     R1,#+1091
   \   00000342   0160               STR      R1,[R0, #+0]
    600                              PORTE_PCR(5) = 0xFFFF & (PORT_PCR_MUX(4) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK | PORT_PCR_DSE_MASK);    // ESDHC.D2  
   \   00000344   ........           LDR.W    R0,??DataTable8_14  ;; 0x4004d014
   \   00000348   40F24341           MOVW     R1,#+1091
   \   0000034C   0160               STR      R1,[R0, #+0]
    601          
    602                              //使能SDHC模块的时钟
    603                              SIM_SCGC3 |= SIM_SCGC3_SDHC_MASK;
   \   0000034E   ........           LDR.W    R0,??DataTable8_1  ;; 0x40048030
   \   00000352   0068               LDR      R0,[R0, #+0]
   \   00000354   50F40030           ORRS     R0,R0,#0x20000
   \   00000358   ........           LDR.W    R1,??DataTable8_1  ;; 0x40048030
   \   0000035C   0860               STR      R0,[R1, #+0]
   \   0000035E   01E0               B.N      ??hw_sdhc_ioctl_39
    604                          }
    605                          else
    606                          {
    607                              result = IO_ERROR_DEVICE_BUSY;
   \                     ??hw_sdhc_ioctl_41:
   \   00000360   5FF00A0A           MOVS     R10,#+10
    608                          }
    609                      }
    610                      break;
   \                     ??hw_sdhc_ioctl_39:
   \   00000364   BCE0               B.N      ??hw_sdhc_ioctl_10
    611                  //获取块长度
    612                  case IO_IOCTL_ESDHC_GET_BLOCK_SIZE:
    613                      if (NULL == param32_ptr) 
   \                     ??hw_sdhc_ioctl_9:
   \   00000366   002C               CMP      R4,#+0
   \   00000368   02D1               BNE.N    ??hw_sdhc_ioctl_42
    614                      {
    615                          result = IO_ERROR_INVALID_PARAMETER;
   \   0000036A   5FF00C0A           MOVS     R10,#+12
   \   0000036E   05E0               B.N      ??hw_sdhc_ioctl_43
    616                      } 
    617                      else 
    618                      {
    619                          //获取SDHC模块设置的块的大小
    620                          *param32_ptr = (SDHC_BLKATTR & SDHC_BLKATTR_BLKSIZE_MASK) >> SDHC_BLKATTR_BLKSIZE_SHIFT;
   \                     ??hw_sdhc_ioctl_42:
   \   00000370   ........           LDR.W    R0,??DataTable8_5  ;; 0x400b1004
   \   00000374   0068               LDR      R0,[R0, #+0]
   \   00000376   C004               LSLS     R0,R0,#+19
   \   00000378   C00C               LSRS     R0,R0,#+19
   \   0000037A   2060               STR      R0,[R4, #+0]
    621                      }       
    622                      break;
   \                     ??hw_sdhc_ioctl_43:
   \   0000037C   B0E0               B.N      ??hw_sdhc_ioctl_10
    623                  //设定块长度
    624                  case IO_IOCTL_ESDHC_SET_BLOCK_SIZE:
    625                      if (NULL == param32_ptr) 
   \                     ??hw_sdhc_ioctl_8:
   \   0000037E   002C               CMP      R4,#+0
   \   00000380   02D1               BNE.N    ??hw_sdhc_ioctl_44
    626                      {
    627                          result = IO_ERROR_INVALID_PARAMETER;
   \   00000382   5FF00C0A           MOVS     R10,#+12
   \   00000386   1FE0               B.N      ??hw_sdhc_ioctl_45
    628                      } 
    629                      else 
    630                      {
    631                          //设置SDHC模块处理的块的大小
    632                          if (! SDHC_is_running())
   \                     ??hw_sdhc_ioctl_44:
   \   00000388   ........           BL       SDHC_is_running
   \   0000038C   0028               CMP      R0,#+0
   \   0000038E   19D1               BNE.N    ??hw_sdhc_ioctl_46
    633                          {
    634                              if (*param32_ptr > 0x0FFF)
   \   00000390   2068               LDR      R0,[R4, #+0]
   \   00000392   B0F5805F           CMP      R0,#+4096
   \   00000396   02D3               BCC.N    ??hw_sdhc_ioctl_47
    635                              {
    636                                  result = IO_ERROR_INVALID_PARAMETER;
   \   00000398   5FF00C0A           MOVS     R10,#+12
   \   0000039C   14E0               B.N      ??hw_sdhc_ioctl_45
    637                              }
    638                              else
    639                              {
    640                                  SDHC_BLKATTR &= (~ SDHC_BLKATTR_BLKSIZE_MASK); 
   \                     ??hw_sdhc_ioctl_47:
   \   0000039E   ........           LDR.W    R0,??DataTable8_5  ;; 0x400b1004
   \   000003A2   0068               LDR      R0,[R0, #+0]
   \   000003A4   400B               LSRS     R0,R0,#+13
   \   000003A6   4003               LSLS     R0,R0,#+13
   \   000003A8   ........           LDR.W    R1,??DataTable8_5  ;; 0x400b1004
   \   000003AC   0860               STR      R0,[R1, #+0]
    641                                  SDHC_BLKATTR |= SDHC_BLKATTR_BLKSIZE(*param32_ptr);
   \   000003AE   ........           LDR.W    R0,??DataTable8_5  ;; 0x400b1004
   \   000003B2   0068               LDR      R0,[R0, #+0]
   \   000003B4   2168               LDR      R1,[R4, #+0]
   \   000003B6   C904               LSLS     R1,R1,#+19
   \   000003B8   C90C               LSRS     R1,R1,#+19
   \   000003BA   0843               ORRS     R0,R1,R0
   \   000003BC   ........           LDR.W    R1,??DataTable8_5  ;; 0x400b1004
   \   000003C0   0860               STR      R0,[R1, #+0]
   \   000003C2   01E0               B.N      ??hw_sdhc_ioctl_45
    642                              }
    643                          }
    644                          else
    645                          {
    646                              result = IO_ERROR_DEVICE_BUSY;
   \                     ??hw_sdhc_ioctl_46:
   \   000003C4   5FF00A0A           MOVS     R10,#+10
    647                          }
    648                      }       
    649                      break;
   \                     ??hw_sdhc_ioctl_45:
   \   000003C8   8AE0               B.N      ??hw_sdhc_ioctl_10
    650                  //获取卡通信总线位宽
    651                  case IO_IOCTL_ESDHC_GET_BUS_WIDTH:
    652                      if (NULL == param32_ptr) 
   \                     ??hw_sdhc_ioctl_7:
   \   000003CA   002C               CMP      R4,#+0
   \   000003CC   02D1               BNE.N    ??hw_sdhc_ioctl_48
    653                      {
    654                          result = IO_ERROR_INVALID_PARAMETER;
   \   000003CE   5FF00C0A           MOVS     R10,#+12
   \   000003D2   18E0               B.N      ??hw_sdhc_ioctl_49
    655                      } 
    656                      else 
    657                      {
    658                          //获取当前配置的SDHC模块的总线宽度
    659                          val = (SDHC_PROCTL & SDHC_PROCTL_DTW_MASK) >> SDHC_PROCTL_DTW_SHIFT;
   \                     ??hw_sdhc_ioctl_48:
   \   000003D4   ........           LDR.W    R0,??DataTable8_6  ;; 0x400b1028
   \   000003D8   0068               LDR      R0,[R0, #+0]
   \   000003DA   C0F34109           UBFX     R9,R0,#+1,#+2
    660                          if (ESDHC_PROCTL_DTW_1BIT == val)
   \   000003DE   B9F1000F           CMP      R9,#+0
   \   000003E2   02D1               BNE.N    ??hw_sdhc_ioctl_50
    661                          {
    662                              *param32_ptr = ESDHC_BUS_WIDTH_1BIT;
   \   000003E4   0020               MOVS     R0,#+0
   \   000003E6   2060               STR      R0,[R4, #+0]
   \   000003E8   0DE0               B.N      ??hw_sdhc_ioctl_49
    663                          }
    664                          else if (ESDHC_PROCTL_DTW_4BIT == val)
   \                     ??hw_sdhc_ioctl_50:
   \   000003EA   B9F1010F           CMP      R9,#+1
   \   000003EE   02D1               BNE.N    ??hw_sdhc_ioctl_51
    665                          {
    666                              *param32_ptr = ESDHC_BUS_WIDTH_4BIT;
   \   000003F0   0120               MOVS     R0,#+1
   \   000003F2   2060               STR      R0,[R4, #+0]
   \   000003F4   07E0               B.N      ??hw_sdhc_ioctl_49
    667                          }
    668                          else if (ESDHC_PROCTL_DTW_8BIT == val)
   \                     ??hw_sdhc_ioctl_51:
   \   000003F6   B9F1100F           CMP      R9,#+16
   \   000003FA   02D1               BNE.N    ??hw_sdhc_ioctl_52
    669                          {
    670                              *param32_ptr = ESDHC_BUS_WIDTH_8BIT;
   \   000003FC   0220               MOVS     R0,#+2
   \   000003FE   2060               STR      R0,[R4, #+0]
   \   00000400   01E0               B.N      ??hw_sdhc_ioctl_49
    671                          }
    672                          else
    673                          {
    674                              result = ESDHC_ERROR_INVALID_BUS_WIDTH; 
   \                     ??hw_sdhc_ioctl_52:
   \   00000402   5FF0050A           MOVS     R10,#+5
    675                          }
    676                      }       
    677                      break;
   \                     ??hw_sdhc_ioctl_49:
   \   00000406   6BE0               B.N      ??hw_sdhc_ioctl_10
    678                  //设定卡通信总线位宽
    679                  case IO_IOCTL_ESDHC_SET_BUS_WIDTH:
    680                      if (NULL == param32_ptr) 
   \                     ??hw_sdhc_ioctl_6:
   \   00000408   002C               CMP      R4,#+0
   \   0000040A   02D1               BNE.N    ??hw_sdhc_ioctl_53
    681                      {
    682                          result = IO_ERROR_INVALID_PARAMETER;
   \   0000040C   5FF00C0A           MOVS     R10,#+12
   \   00000410   34E0               B.N      ??hw_sdhc_ioctl_54
    683                      } 
    684                      else 
    685                      {
    686                      	//设置SDHC模块的总线宽度
    687                          if (! SDHC_is_running())
   \                     ??hw_sdhc_ioctl_53:
   \   00000412   ........           BL       SDHC_is_running
   \   00000416   0028               CMP      R0,#+0
   \   00000418   2ED1               BNE.N    ??hw_sdhc_ioctl_55
    688                          {
    689                              if (ESDHC_BUS_WIDTH_1BIT == *param32_ptr)
   \   0000041A   2068               LDR      R0,[R4, #+0]
   \   0000041C   0028               CMP      R0,#+0
   \   0000041E   0AD1               BNE.N    ??hw_sdhc_ioctl_56
    690                              {
    691                                  SDHC_PROCTL &= (~ SDHC_PROCTL_DTW_MASK);
   \   00000420   ....               LDR.N    R0,??DataTable8_6  ;; 0x400b1028
   \   00000422   0068               LDR      R0,[R0, #+0]
   \   00000424   30F00600           BICS     R0,R0,#0x6
   \   00000428   ....               LDR.N    R1,??DataTable8_6  ;; 0x400b1028
   \   0000042A   0860               STR      R0,[R1, #+0]
    692                                  SDHC_PROCTL |= SDHC_PROCTL_DTW(ESDHC_PROCTL_DTW_1BIT);
   \   0000042C   ....               LDR.N    R0,??DataTable8_6  ;; 0x400b1028
   \   0000042E   ....               LDR.N    R1,??DataTable8_6  ;; 0x400b1028
   \   00000430   0968               LDR      R1,[R1, #+0]
   \   00000432   0160               STR      R1,[R0, #+0]
   \   00000434   22E0               B.N      ??hw_sdhc_ioctl_54
    693                              }
    694                              else if (ESDHC_BUS_WIDTH_4BIT == *param32_ptr)
   \                     ??hw_sdhc_ioctl_56:
   \   00000436   2068               LDR      R0,[R4, #+0]
   \   00000438   0128               CMP      R0,#+1
   \   0000043A   0CD1               BNE.N    ??hw_sdhc_ioctl_57
    695                              {
    696                                  SDHC_PROCTL &= (~ SDHC_PROCTL_DTW_MASK);
   \   0000043C   ....               LDR.N    R0,??DataTable8_6  ;; 0x400b1028
   \   0000043E   0068               LDR      R0,[R0, #+0]
   \   00000440   30F00600           BICS     R0,R0,#0x6
   \   00000444   ....               LDR.N    R1,??DataTable8_6  ;; 0x400b1028
   \   00000446   0860               STR      R0,[R1, #+0]
    697                                  SDHC_PROCTL |= SDHC_PROCTL_DTW(ESDHC_PROCTL_DTW_4BIT);
   \   00000448   ....               LDR.N    R0,??DataTable8_6  ;; 0x400b1028
   \   0000044A   0068               LDR      R0,[R0, #+0]
   \   0000044C   50F00200           ORRS     R0,R0,#0x2
   \   00000450   ....               LDR.N    R1,??DataTable8_6  ;; 0x400b1028
   \   00000452   0860               STR      R0,[R1, #+0]
   \   00000454   12E0               B.N      ??hw_sdhc_ioctl_54
    698                              }
    699                              else if (ESDHC_BUS_WIDTH_8BIT == *param32_ptr)
   \                     ??hw_sdhc_ioctl_57:
   \   00000456   2068               LDR      R0,[R4, #+0]
   \   00000458   0228               CMP      R0,#+2
   \   0000045A   0AD1               BNE.N    ??hw_sdhc_ioctl_58
    700                              {
    701                                  SDHC_PROCTL &= (~ SDHC_PROCTL_DTW_MASK);
   \   0000045C   ....               LDR.N    R0,??DataTable8_6  ;; 0x400b1028
   \   0000045E   0068               LDR      R0,[R0, #+0]
   \   00000460   30F00600           BICS     R0,R0,#0x6
   \   00000464   ....               LDR.N    R1,??DataTable8_6  ;; 0x400b1028
   \   00000466   0860               STR      R0,[R1, #+0]
    702                                  SDHC_PROCTL |= SDHC_PROCTL_DTW(ESDHC_PROCTL_DTW_8BIT);
   \   00000468   ....               LDR.N    R0,??DataTable8_6  ;; 0x400b1028
   \   0000046A   ....               LDR.N    R1,??DataTable8_6  ;; 0x400b1028
   \   0000046C   0968               LDR      R1,[R1, #+0]
   \   0000046E   0160               STR      R1,[R0, #+0]
   \   00000470   04E0               B.N      ??hw_sdhc_ioctl_54
    703                              }
    704                              else
    705                              {
    706                                  result = ESDHC_ERROR_INVALID_BUS_WIDTH; 
   \                     ??hw_sdhc_ioctl_58:
   \   00000472   5FF0050A           MOVS     R10,#+5
   \   00000476   01E0               B.N      ??hw_sdhc_ioctl_54
    707                              }
    708                          }
    709                          else
    710                          {
    711                              result = IO_ERROR_DEVICE_BUSY;
   \                     ??hw_sdhc_ioctl_55:
   \   00000478   5FF00A0A           MOVS     R10,#+10
    712                          }
    713                      }       
    714                      break;
   \                     ??hw_sdhc_ioctl_54:
   \   0000047C   30E0               B.N      ??hw_sdhc_ioctl_10
    715                  //获取卡当前状态
    716                  case IO_IOCTL_ESDHC_GET_CARD:
    717                      if (NULL == param32_ptr) 
   \                     ??hw_sdhc_ioctl_2:
   \   0000047E   002C               CMP      R4,#+0
   \   00000480   02D1               BNE.N    ??hw_sdhc_ioctl_59
    718                      {
    719                          result = IO_ERROR_INVALID_PARAMETER;
   \   00000482   5FF00C0A           MOVS     R10,#+12
   \   00000486   28E0               B.N      ??hw_sdhc_ioctl_60
    720                      } 
    721                      else 
    722                      {
    723                          //等待80个时钟
    724                          SDHC_SYSCTL |= SDHC_SYSCTL_INITA_MASK;
   \                     ??hw_sdhc_ioctl_59:
   \   00000488   ....               LDR.N    R0,??DataTable8_2  ;; 0x400b102c
   \   0000048A   0068               LDR      R0,[R0, #+0]
   \   0000048C   50F00060           ORRS     R0,R0,#0x8000000
   \   00000490   ....               LDR.N    R1,??DataTable8_2  ;; 0x400b102c
   \   00000492   0860               STR      R0,[R1, #+0]
    725                          while (SDHC_SYSCTL & SDHC_SYSCTL_INITA_MASK){};
   \                     ??hw_sdhc_ioctl_61:
   \   00000494   ....               LDR.N    R0,??DataTable8_2  ;; 0x400b102c
   \   00000496   0068               LDR      R0,[R0, #+0]
   \   00000498   0001               LSLS     R0,R0,#+4
   \   0000049A   FBD4               BMI.N    ??hw_sdhc_ioctl_61
    726                              
    727                          //读取SD卡返回的状态
    728                          if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM_MASK)
   \   0000049C   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   0000049E   0068               LDR      R0,[R0, #+0]
   \   000004A0   0006               LSLS     R0,R0,#+24
   \   000004A2   08D5               BPL.N    ??hw_sdhc_ioctl_62
    729                          {
    730                              SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM_MASK;
   \   000004A4   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   000004A6   0068               LDR      R0,[R0, #+0]
   \   000004A8   50F08000           ORRS     R0,R0,#0x80
   \   000004AC   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   000004AE   0860               STR      R0,[R1, #+0]
    731                              SDHC_Card.CARD_TYPE = ESDHC_CARD_NONE;
   \   000004B0   ....               LDR.N    R0,??DataTable8
   \   000004B2   0021               MOVS     R1,#+0
   \   000004B4   0170               STRB     R1,[R0, #+0]
    732                          }
    733                          if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS_MASK)
   \                     ??hw_sdhc_ioctl_62:
   \   000004B6   ....               LDR.N    R0,??DataTable8_8  ;; 0x400b1024
   \   000004B8   0068               LDR      R0,[R0, #+0]
   \   000004BA   C003               LSLS     R0,R0,#+15
   \   000004BC   07D5               BPL.N    ??hw_sdhc_ioctl_63
    734                          {
    735                              if (ESDHC_CARD_NONE == SDHC_Card.CARD_TYPE)
   \   000004BE   ....               LDR.N    R0,??DataTable8
   \   000004C0   0078               LDRB     R0,[R0, #+0]
   \   000004C2   0028               CMP      R0,#+0
   \   000004C4   06D1               BNE.N    ??hw_sdhc_ioctl_64
    736                              {
    737                              	SDHC_Card.CARD_TYPE = ESDHC_CARD_UNKNOWN;
   \   000004C6   ....               LDR.N    R0,??DataTable8
   \   000004C8   0121               MOVS     R1,#+1
   \   000004CA   0170               STRB     R1,[R0, #+0]
   \   000004CC   02E0               B.N      ??hw_sdhc_ioctl_64
    738                              }
    739                          }
    740                          else
    741                          {
    742                          	SDHC_Card.CARD_TYPE = ESDHC_CARD_NONE;
   \                     ??hw_sdhc_ioctl_63:
   \   000004CE   ....               LDR.N    R0,??DataTable8
   \   000004D0   0021               MOVS     R1,#+0
   \   000004D2   0170               STRB     R1,[R0, #+0]
    743                          }
    744                          *param32_ptr = SDHC_Card.CARD_TYPE;
   \                     ??hw_sdhc_ioctl_64:
   \   000004D4   ....               LDR.N    R0,??DataTable8
   \   000004D6   0078               LDRB     R0,[R0, #+0]
   \   000004D8   2060               STR      R0,[R4, #+0]
    745                      }
    746                      break;
   \                     ??hw_sdhc_ioctl_60:
   \   000004DA   01E0               B.N      ??hw_sdhc_ioctl_10
    747                  default:
    748                      result = IO_ERROR_INVALID_IOCTL_CMD;
   \                     ??hw_sdhc_ioctl_1:
   \   000004DC   5FF0090A           MOVS     R10,#+9
    749                      break;
    750              }
    751              return result;
   \                     ??hw_sdhc_ioctl_10:
   \   000004E0   5046               MOV      R0,R10
   \   000004E2   08B0               ADD      SP,SP,#+32
   \   000004E4   BDE8F087           POP      {R4-R10,PC}      ;; return
    752          }
    753          
    754          
    755          //=========================================================================
    756          //函数名称：SDHC_set_baudrate                                                        
    757          //功能概要：设置SDHC模块的时钟。                                                
    758          //参数说明：clock:系统时钟                                               
    759          //         baudrate：波特率                                 
    760          //函数返回：无                                                               
    761          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    762          static void SDHC_set_baudrate(uint32 clock,uint32 baudrate)
    763          {
   \                     SDHC_set_baudrate:
   \   00000000   F0B4               PUSH     {R4-R7}
    764          	uint32 i, pres, div, min, minpres = 0x80, mindiv = 0x0F;
   \   00000002   8022               MOVS     R2,#+128
   \   00000004   0F23               MOVS     R3,#+15
    765          	int32  val;
    766          
    767              //找到相近的分频因子
    768              min = (uint32)-1;
   \   00000006   5FF0FF36           MOVS     R6,#-1
    769              for (pres = 2; pres <= 256; pres <<= 1) 
   \   0000000A   0224               MOVS     R4,#+2
   \   0000000C   0EE0               B.N      ??SDHC_set_baudrate_0
    770              {
    771                  for (div = 1; div <= 16; div++) 
    772                  {
    773                      val = pres * div * baudrate - clock;
   \                     ??SDHC_set_baudrate_1:
   \   0000000E   05FB04F7           MUL      R7,R5,R4
   \   00000012   4F43               MULS     R7,R1,R7
   \   00000014   3F1A               SUBS     R7,R7,R0
    774                      if (val >= 0)
   \   00000016   002F               CMP      R7,#+0
   \   00000018   04D4               BMI.N    ??SDHC_set_baudrate_2
    775                      {
    776                          if (min > val) 
   \   0000001A   B742               CMP      R7,R6
   \   0000001C   02D2               BCS.N    ??SDHC_set_baudrate_2
    777                          {
    778                              min = val;
   \   0000001E   3E00               MOVS     R6,R7
    779                              minpres = pres;
   \   00000020   2200               MOVS     R2,R4
    780                              mindiv = div;
   \   00000022   2B00               MOVS     R3,R5
    781                          }
    782                      }
    783                  }
   \                     ??SDHC_set_baudrate_2:
   \   00000024   6D1C               ADDS     R5,R5,#+1
   \                     ??SDHC_set_baudrate_3:
   \   00000026   112D               CMP      R5,#+17
   \   00000028   F1D3               BCC.N    ??SDHC_set_baudrate_1
   \   0000002A   6400               LSLS     R4,R4,#+1
   \                     ??SDHC_set_baudrate_0:
   \   0000002C   B4F5807F           CMP      R4,#+256
   \   00000030   01D8               BHI.N    ??SDHC_set_baudrate_4
   \   00000032   0125               MOVS     R5,#+1
   \   00000034   F7E7               B.N      ??SDHC_set_baudrate_3
    784              }
    785          
    786              //禁止SDHC模块时钟
    787              SDHC_SYSCTL &= (~ SDHC_SYSCTL_SDCLKEN_MASK);
   \                     ??SDHC_set_baudrate_4:
   \   00000036   ....               LDR.N    R0,??DataTable8_2  ;; 0x400b102c
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   30F00800           BICS     R0,R0,#0x8
   \   0000003E   ....               LDR.N    R1,??DataTable8_2  ;; 0x400b102c
   \   00000040   0860               STR      R0,[R1, #+0]
    788          
    789              //修改分频因子
    790              div = SDHC_SYSCTL & (~ (SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_SDCLKFS_MASK | SDHC_SYSCTL_DVS_MASK));
   \   00000042   ....               LDR.N    R0,??DataTable8_2  ;; 0x400b102c
   \   00000044   0068               LDR      R0,[R0, #+0]
   \   00000046   ....               LDR.N    R1,??DataTable8_26  ;; 0xfff0000f
   \   00000048   11EA0005           ANDS     R5,R1,R0
    791              SDHC_SYSCTL = div | (SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_SDCLKFS(minpres >> 1) | SDHC_SYSCTL_DVS(mindiv - 1));
   \   0000004C   D001               LSLS     R0,R2,#+7
   \   0000004E   10F47F40           ANDS     R0,R0,#0xFF00
   \   00000052   2843               ORRS     R0,R0,R5
   \   00000054   591E               SUBS     R1,R3,#+1
   \   00000056   0901               LSLS     R1,R1,#+4
   \   00000058   11F0F001           ANDS     R1,R1,#0xF0
   \   0000005C   0843               ORRS     R0,R1,R0
   \   0000005E   50F46020           ORRS     R0,R0,#0xE0000
   \   00000062   ....               LDR.N    R1,??DataTable8_2  ;; 0x400b102c
   \   00000064   0860               STR      R0,[R1, #+0]
    792          
    793              //等在时钟稳定
    794              while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB_MASK))
   \                     ??SDHC_set_baudrate_5:
   \   00000066   ....               LDR.N    R0,??DataTable8_8  ;; 0x400b1024
   \   00000068   0068               LDR      R0,[R0, #+0]
   \   0000006A   0007               LSLS     R0,R0,#+28
   \   0000006C   05D4               BMI.N    ??SDHC_set_baudrate_6
    795              {
    796          		for(i = 0;i < 200000;i++)
   \   0000006E   0020               MOVS     R0,#+0
   \                     ??SDHC_set_baudrate_7:
   \   00000070   ....               LDR.N    R1,??DataTable8_27  ;; 0x30d40
   \   00000072   8842               CMP      R0,R1
   \   00000074   F7D2               BCS.N    ??SDHC_set_baudrate_5
   \   00000076   401C               ADDS     R0,R0,#+1
   \   00000078   FAE7               B.N      ??SDHC_set_baudrate_7
    797          		{
    798          		}
    799              };
    800          
    801              //使能SDHC模块时钟
    802              SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN_MASK;
   \                     ??SDHC_set_baudrate_6:
   \   0000007A   ....               LDR.N    R0,??DataTable8_2  ;; 0x400b102c
   \   0000007C   0068               LDR      R0,[R0, #+0]
   \   0000007E   50F00800           ORRS     R0,R0,#0x8
   \   00000082   ....               LDR.N    R1,??DataTable8_2  ;; 0x400b102c
   \   00000084   0860               STR      R0,[R1, #+0]
    803              SDHC_IRQSTAT |= SDHC_IRQSTAT_DTOE_MASK;
   \   00000086   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   00000088   0068               LDR      R0,[R0, #+0]
   \   0000008A   50F48010           ORRS     R0,R0,#0x100000
   \   0000008E   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   00000090   0860               STR      R0,[R1, #+0]
    804          }
   \   00000092   F0BC               POP      {R4-R7}
   \   00000094   7047               BX       LR               ;; return
    805          
    806          //=========================================================================
    807          //函数名称：SDHC_is_running                                                        
    808          //功能概要：检测SDHC模块是否忙                                                
    809          //参数说明：无                              
    810          //函数返回：1：正忙;0：其他。                                                               
    811          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    812          static uint8 SDHC_is_running(void)
    813          {
    814              return (0 != (SDHC_PRSSTAT & (SDHC_PRSSTAT_RTA_MASK | SDHC_PRSSTAT_WTA_MASK | SDHC_PRSSTAT_DLA_MASK | SDHC_PRSSTAT_CDIHB_MASK | SDHC_PRSSTAT_CIHB_MASK)));
   \                     SDHC_is_running:
   \   00000000   ....               LDR.N    R0,??DataTable8_8  ;; 0x400b1024
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   40F20731           MOVW     R1,#+775
   \   00000008   0842               TST      R0,R1
   \   0000000A   01D0               BEQ.N    ??SDHC_is_running_0
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   00E0               B.N      ??SDHC_is_running_1
   \                     ??SDHC_is_running_0:
   \   00000010   0020               MOVS     R0,#+0
   \                     ??SDHC_is_running_1:
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   7047               BX       LR               ;; return
    815          }   
    816          
    817          //=========================================================================
    818          //函数名称：SDHC_status_wait                                                        
    819          //功能概要：等待中断标志位置位                                                
    820          //参数说明：mask：待不断的标志位掩码                              
    821          //函数返回：返回传入的数                                                              
    822          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    823          static uint32 SDHC_status_wait(uint32 mask)
    824          {
    825              uint32	result;
    826              do
    827              {
    828                  result = SDHC_IRQSTAT & mask;
   \                     SDHC_status_wait:
   \                     ??SDHC_status_wait_0:
   \   00000000   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   0140               ANDS     R1,R0,R1
    829              } 
    830              while (0 == result);
   \   00000006   0029               CMP      R1,#+0
   \   00000008   FAD0               BEQ.N    ??SDHC_status_wait_0
    831              return result;
   \   0000000A   0800               MOVS     R0,R1
   \   0000000C   7047               BX       LR               ;; return
    832          }
    833          
    834          //=========================================================================
    835          //函数名称：SDHC_send_command                                                        
    836          //功能概要：发送命令                                                
    837          //参数说明：command：命令结构体指针                              
    838          //函数返回：0：成功，1：错误，-1：超时。                                                              
    839          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    840          static uint32 SDHC_send_command (ESDHC_COMMAND_STRUCT_PTR command)
    841          {
   \                     SDHC_send_command:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    842              uint32	xfertyp;//Transfer Type Register (SDHC_XFERTYP)
    843              
    844              //检查和配置命令
    845              xfertyp = ESDHC_COMMAND_XFERTYP[command->COMMAND & 0x3F];
   \   00000004   2078               LDRB     R0,[R4, #+0]
   \   00000006   10F03F00           ANDS     R0,R0,#0x3F
   \   0000000A   ........           ADR.W    R1,ESDHC_COMMAND_XFERTYP
   \   0000000E   51F82050           LDR      R5,[R1, R0, LSL #+2]
    846              if ((0 == xfertyp) && (0 != command->COMMAND))
   \   00000012   002D               CMP      R5,#+0
   \   00000014   04D1               BNE.N    ??SDHC_send_command_0
   \   00000016   2078               LDRB     R0,[R4, #+0]
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   01D0               BEQ.N    ??SDHC_send_command_0
    847              {
    848                  return 1;
   \   0000001C   0120               MOVS     R0,#+1
   \   0000001E   95E0               B.N      ??SDHC_send_command_1
    849              }
    850          
    851              //卡移除检测
    852              SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM_MASK;
   \                     ??SDHC_send_command_0:
   \   00000020   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   50F08000           ORRS     R0,R0,#0x80
   \   00000028   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   0000002A   0860               STR      R0,[R1, #+0]
    853          
    854              //等待CMD通道空闲
    855              while (SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB_MASK){};
   \                     ??SDHC_send_command_2:
   \   0000002C   ....               LDR.N    R0,??DataTable8_8  ;; 0x400b1024
   \   0000002E   0068               LDR      R0,[R0, #+0]
   \   00000030   C007               LSLS     R0,R0,#+31
   \   00000032   FBD4               BMI.N    ??SDHC_send_command_2
    856          
    857              //设置传输类型寄存器参数
    858              //写命令参数寄存器(Command Argument Register，SDHC_CMDARG)
    859              SDHC_CMDARG = command->ARGUMENT;
   \   00000034   6068               LDR      R0,[R4, #+4]
   \   00000036   ....               LDR.N    R1,??DataTable8_28  ;; 0x400b1008
   \   00000038   0860               STR      R0,[R1, #+0]
    860              //清除XFERTYP寄存器的命令类型域
    861              xfertyp &= (~ SDHC_XFERTYP_CMDTYP_MASK);
   \   0000003A   35F44005           BICS     R5,R5,#0xC00000
    862              //设置XFERTYP寄存器的命令类型域
    863              xfertyp |= SDHC_XFERTYP_CMDTYP(command->TYPE);
   \   0000003E   6078               LDRB     R0,[R4, #+1]
   \   00000040   8005               LSLS     R0,R0,#+22
   \   00000042   10F44000           ANDS     R0,R0,#0xC00000
   \   00000046   0543               ORRS     R5,R0,R5
    864              //如果为恢复类型
    865              if (ESDHC_TYPE_RESUME == command->TYPE)
   \   00000048   6078               LDRB     R0,[R4, #+1]
   \   0000004A   0228               CMP      R0,#+2
   \   0000004C   01D1               BNE.N    ??SDHC_send_command_3
    866              {
    867              	//如果命令类型为恢复CMD52写功能选择，则置数据传送选择位。
    868                  xfertyp |= SDHC_XFERTYP_DPSEL_MASK;
   \   0000004E   55F40015           ORRS     R5,R5,#0x200000
    869              }
    870              //如果是切换忙类型
    871              if (ESDHC_TYPE_SWITCH_BUSY == command->TYPE)
   \                     ??SDHC_send_command_3:
   \   00000052   6078               LDRB     R0,[R4, #+1]
   \   00000054   0428               CMP      R0,#+4
   \   00000056   0DD1               BNE.N    ??SDHC_send_command_4
    872              {
    873              	
    874                  if ((xfertyp & SDHC_XFERTYP_RSPTYP_MASK) == SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48))
   \   00000058   15F44030           ANDS     R0,R5,#0x30000
   \   0000005C   B0F5003F           CMP      R0,#+131072
   \   00000060   04D1               BNE.N    ??SDHC_send_command_5
    875                  {
    876                      xfertyp &= (~ SDHC_XFERTYP_RSPTYP_MASK);
   \   00000062   35F44035           BICS     R5,R5,#0x30000
    877                      xfertyp |= SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY);
   \   00000066   55F44035           ORRS     R5,R5,#0x30000
   \   0000006A   03E0               B.N      ??SDHC_send_command_4
    878                  }
    879                  else
    880                  {
    881                      xfertyp &= (~ SDHC_XFERTYP_RSPTYP_MASK);
   \                     ??SDHC_send_command_5:
   \   0000006C   35F44035           BICS     R5,R5,#0x30000
    882                      xfertyp |= SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48);
   \   00000070   55F40035           ORRS     R5,R5,#0x20000
    883                  }
    884              }
    885              //清除块数
    886              SDHC_BLKATTR &= (~ SDHC_BLKATTR_BLKCNT_MASK);
   \                     ??SDHC_send_command_4:
   \   00000074   ....               LDR.N    R0,??DataTable8_5  ;; 0x400b1004
   \   00000076   0068               LDR      R0,[R0, #+0]
   \   00000078   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   ....               LDR.N    R1,??DataTable8_5  ;; 0x400b1004
   \   0000007C   0860               STR      R0,[R1, #+0]
    887              //块数判断
    888              if (0 != command->BLOCKS)
   \   0000007E   E068               LDR      R0,[R4, #+12]
   \   00000080   0028               CMP      R0,#+0
   \   00000082   1DD0               BEQ.N    ??SDHC_send_command_6
    889              {
    890              	//块不为0
    891                  if ((xfertyp & SDHC_XFERTYP_RSPTYP_MASK) != SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY))
   \   00000084   15F44030           ANDS     R0,R5,#0x30000
   \   00000088   B0F5403F           CMP      R0,#+196608
   \   0000008C   01D0               BEQ.N    ??SDHC_send_command_7
    892                  {
    893                      xfertyp |= SDHC_XFERTYP_DPSEL_MASK;
   \   0000008E   55F40015           ORRS     R5,R5,#0x200000
    894                  }
    895                  if (command->READ)
   \                     ??SDHC_send_command_7:
   \   00000092   207A               LDRB     R0,[R4, #+8]
   \   00000094   0028               CMP      R0,#+0
   \   00000096   01D0               BEQ.N    ??SDHC_send_command_8
    896                  {
    897                      xfertyp |= SDHC_XFERTYP_DTDSEL_MASK;    
   \   00000098   55F01005           ORRS     R5,R5,#0x10
    898                  }
    899                  if (command->BLOCKS > 1)
   \                     ??SDHC_send_command_8:
   \   0000009C   E068               LDR      R0,[R4, #+12]
   \   0000009E   0228               CMP      R0,#+2
   \   000000A0   01D3               BCC.N    ??SDHC_send_command_9
    900                  {
    901                      xfertyp |= SDHC_XFERTYP_MSBSEL_MASK;    
   \   000000A2   55F02005           ORRS     R5,R5,#0x20
    902                  }
    903                  if ((uint32)-1 != command->BLOCKS)
   \                     ??SDHC_send_command_9:
   \   000000A6   E068               LDR      R0,[R4, #+12]
   \   000000A8   10F1010F           CMN      R0,#+1
   \   000000AC   08D0               BEQ.N    ??SDHC_send_command_6
    904                  {
    905                  	SDHC_BLKATTR |= SDHC_BLKATTR_BLKCNT(command->BLOCKS);
   \   000000AE   ....               LDR.N    R0,??DataTable8_5  ;; 0x400b1004
   \   000000B0   0068               LDR      R0,[R0, #+0]
   \   000000B2   E168               LDR      R1,[R4, #+12]
   \   000000B4   50EA0140           ORRS     R0,R0,R1, LSL #+16
   \   000000B8   ....               LDR.N    R1,??DataTable8_5  ;; 0x400b1004
   \   000000BA   0860               STR      R0,[R1, #+0]
    906                      xfertyp |= SDHC_XFERTYP_BCEN_MASK;
   \   000000BC   55F00205           ORRS     R5,R5,#0x2
    907                  }
    908              }
    909          
    910              //执行命令
    911              SDHC_DSADDR = 0;
   \                     ??SDHC_send_command_6:
   \   000000C0   ....               LDR.N    R0,??DataTable8_29  ;; 0x400b1000
   \   000000C2   0021               MOVS     R1,#+0
   \   000000C4   0160               STR      R1,[R0, #+0]
    912              SDHC_XFERTYP = xfertyp;
   \   000000C6   ....               LDR.N    R0,??DataTable8_30  ;; 0x400b100c
   \   000000C8   0560               STR      R5,[R0, #+0]
    913              
    914              //等待状态寄存器置位
    915              if (SDHC_status_wait (SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CC_MASK) != SDHC_IRQSTAT_CC_MASK)
   \   000000CA   ....               LDR.N    R0,??DataTable8_31  ;; 0xe0001
   \   000000CC   ........           BL       SDHC_status_wait
   \   000000D0   0128               CMP      R0,#+1
   \   000000D2   07D0               BEQ.N    ??SDHC_send_command_10
    916              {
    917              	SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CC_MASK;
   \   000000D4   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   000000D6   0068               LDR      R0,[R0, #+0]
   \   000000D8   ....               LDR.N    R1,??DataTable8_32  ;; 0xf0001
   \   000000DA   0843               ORRS     R0,R1,R0
   \   000000DC   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   000000DE   0860               STR      R0,[R1, #+0]
    918                  return 1;
   \   000000E0   0120               MOVS     R0,#+1
   \   000000E2   33E0               B.N      ??SDHC_send_command_1
    919              }
    920          
    921              //检测卡是否被移除
    922              if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM_MASK)
   \                     ??SDHC_send_command_10:
   \   000000E4   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   000000E6   0068               LDR      R0,[R0, #+0]
   \   000000E8   0006               LSLS     R0,R0,#+24
   \   000000EA   07D5               BPL.N    ??SDHC_send_command_11
    923              {
    924              	SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CC_MASK;
   \   000000EC   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   000000EE   0068               LDR      R0,[R0, #+0]
   \   000000F0   50F00110           ORRS     R0,R0,#0x10001
   \   000000F4   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   000000F6   0860               STR      R0,[R1, #+0]
    925                  return 1;
   \   000000F8   0120               MOVS     R0,#+1
   \   000000FA   27E0               B.N      ??SDHC_send_command_1
    926              }
    927          
    928              //检查命令是否超时
    929              if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE_MASK)
   \                     ??SDHC_send_command_11:
   \   000000FC   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   000000FE   0068               LDR      R0,[R0, #+0]
   \   00000100   C003               LSLS     R0,R0,#+15
   \   00000102   08D5               BPL.N    ??SDHC_send_command_12
    930              {
    931              	SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CC_MASK;
   \   00000104   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   00000106   0068               LDR      R0,[R0, #+0]
   \   00000108   50F00110           ORRS     R0,R0,#0x10001
   \   0000010C   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   0000010E   0860               STR      R0,[R1, #+0]
    932                  return -1;
   \   00000110   5FF0FF30           MOVS     R0,#-1
   \   00000114   1AE0               B.N      ??SDHC_send_command_1
    933              }
    934              if ((xfertyp & SDHC_XFERTYP_RSPTYP_MASK) != SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO))
   \                     ??SDHC_send_command_12:
   \   00000116   15F4403F           TST      R5,#0x30000
   \   0000011A   10D0               BEQ.N    ??SDHC_send_command_13
    935              {
    936                  command->RESPONSE[0] = SDHC_CMDRSP(0);
   \   0000011C   ....               LDR.N    R0,??DataTable8_33  ;; 0x400b1010
   \   0000011E   0068               LDR      R0,[R0, #+0]
   \   00000120   2061               STR      R0,[R4, #+16]
    937                  if ((xfertyp & SDHC_XFERTYP_RSPTYP_MASK) == SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136))
   \   00000122   15F44030           ANDS     R0,R5,#0x30000
   \   00000126   B0F5803F           CMP      R0,#+65536
   \   0000012A   08D1               BNE.N    ??SDHC_send_command_13
    938                  {
    939                      command->RESPONSE[1] = SDHC_CMDRSP(1);
   \   0000012C   ....               LDR.N    R0,??DataTable8_34  ;; 0x400b1014
   \   0000012E   0068               LDR      R0,[R0, #+0]
   \   00000130   6061               STR      R0,[R4, #+20]
    940                      command->RESPONSE[2] = SDHC_CMDRSP(2);
   \   00000132   ....               LDR.N    R0,??DataTable8_35  ;; 0x400b1018
   \   00000134   0068               LDR      R0,[R0, #+0]
   \   00000136   A061               STR      R0,[R4, #+24]
    941                      command->RESPONSE[3] = SDHC_CMDRSP(3);
   \   00000138   ....               LDR.N    R0,??DataTable8_36  ;; 0x400b101c
   \   0000013A   0068               LDR      R0,[R0, #+0]
   \   0000013C   E061               STR      R0,[R4, #+28]
    942                  }
    943              }
    944              
    945              SDHC_IRQSTAT |= SDHC_IRQSTAT_CC_MASK;
   \                     ??SDHC_send_command_13:
   \   0000013E   ....               LDR.N    R0,??DataTable8_15  ;; 0x400b1030
   \   00000140   0068               LDR      R0,[R0, #+0]
   \   00000142   50F00100           ORRS     R0,R0,#0x1
   \   00000146   ....               LDR.N    R1,??DataTable8_15  ;; 0x400b1030
   \   00000148   0860               STR      R0,[R1, #+0]
    946          
    947              return 0;
   \   0000014A   0020               MOVS     R0,#+0
   \                     ??SDHC_send_command_1:
   \   0000014C   32BD               POP      {R1,R4,R5,PC}    ;; return
    948          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     SDHC_Card

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   30800440           DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   2C100B40           DC32     0x400b102c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   00800001           DC32     0x1008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   C0100B40           DC32     0x400b10c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   04100B40           DC32     0x400b1004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   28100B40           DC32     0x400b1028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   44100B40           DC32     0x400b1044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   24100B40           DC32     0x400b1024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   00D00440           DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   04D00440           DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   08D00440           DC32     0x4004d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0CD00440           DC32     0x4004d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   10D00440           DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   14D00440           DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   30100B40           DC32     0x400b1030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   34100B40           DC32     0x400b1034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   B3007F00           DC32     0x7f00b3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   20100B40           DC32     0x400b1020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   20007000           DC32     0x700020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   10007000           DC32     0x700010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   40787D01           DC32     0x17d7840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   00D8B805           DC32     0x5b8d800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   80841E00           DC32     0x1e8480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   20A10700           DC32     0x7a120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   00003040           DC32     0x40300000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0F00F0FF           DC32     0xfff0000f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   400D0300           DC32     0x30d40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   08100B40           DC32     0x400b1008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   00100B40           DC32     0x400b1000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0C100B40           DC32     0x400b100c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   01000E00           DC32     0xe0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   01000F00           DC32     0xf0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   10100B40           DC32     0x400b1010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \   00000000   14100B40           DC32     0x400b1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \   00000000   18100B40           DC32     0x400b1018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \   00000000   1C100B40           DC32     0x400b101c
    949          

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     SDHC_is_running            0
     SDHC_send_command         16
     SDHC_set_baudrate         16
     SDHC_status_wait           0
     hw_sdhc_init               8
     hw_sdhc_ioctl             64
     hw_sdhc_receive_block      4
     hw_sdhc_send_block         4


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     SDHC_Card               24
     ESDHC_COMMAND_XFERTYP  256
     hw_sdhc_init           244
     hw_sdhc_receive_block  146
     hw_sdhc_send_block      94
     hw_sdhc_ioctl         1256
     SDHC_set_baudrate      150
     SDHC_is_running         22
     SDHC_status_wait        14
     SDHC_send_command      334
     ??DataTable8             4
     ??DataTable8_1           4
     ??DataTable8_2           4
     ??DataTable8_3           4
     ??DataTable8_4           4
     ??DataTable8_5           4
     ??DataTable8_6           4
     ??DataTable8_7           4
     ??DataTable8_8           4
     ??DataTable8_9           4
     ??DataTable8_10          4
     ??DataTable8_11          4
     ??DataTable8_12          4
     ??DataTable8_13          4
     ??DataTable8_14          4
     ??DataTable8_15          4
     ??DataTable8_16          4
     ??DataTable8_17          4
     ??DataTable8_18          4
     ??DataTable8_19          4
     ??DataTable8_20          4
     ??DataTable8_21          4
     ??DataTable8_22          4
     ??DataTable8_23          4
     ??DataTable8_24          4
     ??DataTable8_25          4
     ??DataTable8_26          4
     ??DataTable8_27          4
     ??DataTable8_28          4
     ??DataTable8_29          4
     ??DataTable8_30          4
     ??DataTable8_31          4
     ??DataTable8_32          4
     ??DataTable8_33          4
     ??DataTable8_34          4
     ??DataTable8_35          4
     ??DataTable8_36          4

 
    24 bytes in section .bss
 2 664 bytes in section .text
 
 2 664 bytes of CODE memory
    24 bytes of DATA memory

Errors: none
Warnings: 5
