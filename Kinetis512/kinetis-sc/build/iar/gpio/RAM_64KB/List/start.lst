###############################################################################
#                                                                             #
#                                                       06/Mar/2012  12:46:34 #
# IAR ANSI C/C++ Compiler V6.10.1.22143/W32 EVALUATION for ARM                #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\My Works\K60\Kinetis512\kinetis-sc\src\cpu\start.c    #
#    Command line =  "F:\My Works\K60\Kinetis512\kinetis-sc\src\cpu\start.c"  #
#                    -D IAR -D TWR_K60N512 -lCN "F:\My                        #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_64KB\ #
#                    List\" -lB "F:\My Works\K60\Kinetis512\kinetis-sc\build\ #
#                    iar\gpio\RAM_64KB\List\" -o "F:\My                       #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_64KB\ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h" #
#                     -I "F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpi #
#                    o\..\..\..\src\projects\gpio\" -I "F:\My                 #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\common\" -I "F:\My Works\K60\Kinetis512\kinetis-sc\b #
#                    uild\iar\gpio\..\..\..\src\cpu\" -I "F:\My               #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\cpu\headers\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\uart\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\mcg\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\wdog\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\platforms\" -I "F:\My Works\K60\Kinetis512\kinetis-s #
#                    c\build\iar\gpio\..\" -Ol --use_c++_inline               #
#    List file    =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _64KB\List\start.lst                                     #
#    Object file  =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _64KB\Obj\start.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\My Works\K60\Kinetis512\kinetis-sc\src\cpu\start.c
      1          /*
      2           * File:	start.c
      3           * Purpose:	Kinetis start up routines. 
      4           *
      5           * Notes:		
      6           */
      7          
      8          #include "start.h"
      9          #include "common.h"
     10          #include "wdog.h"
     11          #include "sysinit.h"
     12          
     13          /********************************************************************/
     14          /*!
     15           * \brief   Kinetis Start
     16           * \return  None
     17           *
     18           * This function calls all of the needed starup routines and then 
     19           * branches to the main process.
     20           */

   \                                 In section .text, align 2, keep-with-next
     21          void start(void)
     22          {
   \                     start:
   \   00000000   80B5               PUSH     {R7,LR}
     23          	/* Disable the watchdog timer */
     24          	wdog_disable();
   \   00000002   ........           BL       wdog_disable
     25          
     26          	/* Copy any vector or data sections that need to be in RAM */
     27          	common_startup();
   \   00000006   ........           BL       common_startup
     28          
     29          	/* Perform processor initialization */
     30          	sysinit();
   \   0000000A   ........           BL       sysinit
     31                  
     32              printf("\n\n");
   \   0000000E   ....               ADR.N    R0,??DataTable53  ;; 0x0A, 0x0A, 0x00, 0x00
   \   00000010   ........           BL       printf
     33          	
     34          	/* Determine the last cause(s) of reset */
     35          	if (MC_SRSH & MC_SRSH_SW_MASK)
   \   00000014   ........           LDR.W    R0,??DataTable55  ;; 0x4007e000
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   4007               LSLS     R0,R0,#+29
   \   0000001C   03D5               BPL.N    ??start_0
     36          		printf("Software Reset\n");
   \   0000001E   ........           ADR.W    R0,`?<Constant "Software Reset\\n">`
   \   00000022   ........           BL       printf
     37          	if (MC_SRSH & MC_SRSH_LOCKUP_MASK)
   \                     ??start_0:
   \   00000026   ........           LDR.W    R0,??DataTable55  ;; 0x4007e000
   \   0000002A   0078               LDRB     R0,[R0, #+0]
   \   0000002C   8007               LSLS     R0,R0,#+30
   \   0000002E   03D5               BPL.N    ??start_1
     38          		printf("Core Lockup Event Reset\n");
   \   00000030   ........           ADR.W    R0,`?<Constant "Core Lockup Event Reset\\n">`
   \   00000034   ........           BL       printf
     39          	if (MC_SRSH & MC_SRSH_JTAG_MASK)
   \                     ??start_1:
   \   00000038   ........           LDR.W    R0,??DataTable55  ;; 0x4007e000
   \   0000003C   0078               LDRB     R0,[R0, #+0]
   \   0000003E   C007               LSLS     R0,R0,#+31
   \   00000040   03D5               BPL.N    ??start_2
     40          		printf("JTAG Reset\n");
   \   00000042   ........           ADR.W    R0,`?<Constant "JTAG Reset\\n">`
   \   00000046   ........           BL       printf
     41          	
     42          	if (MC_SRSL & MC_SRSL_POR_MASK)
   \                     ??start_2:
   \   0000004A   ........           LDR.W    R0,??DataTable55_1  ;; 0x4007e001
   \   0000004E   0078               LDRB     R0,[R0, #+0]
   \   00000050   0006               LSLS     R0,R0,#+24
   \   00000052   03D5               BPL.N    ??start_3
     43          		printf("Power-on Reset\n");
   \   00000054   ........           ADR.W    R0,`?<Constant "Power-on Reset\\n">`
   \   00000058   ........           BL       printf
     44          	if (MC_SRSL & MC_SRSL_PIN_MASK)
   \                     ??start_3:
   \   0000005C   ........           LDR.W    R0,??DataTable55_1  ;; 0x4007e001
   \   00000060   0078               LDRB     R0,[R0, #+0]
   \   00000062   4006               LSLS     R0,R0,#+25
   \   00000064   03D5               BPL.N    ??start_4
     45          		printf("External Pin Reset\n");
   \   00000066   ........           ADR.W    R0,`?<Constant "External Pin Reset\\n">`
   \   0000006A   ........           BL       printf
     46          	if (MC_SRSL & MC_SRSL_COP_MASK)
   \                     ??start_4:
   \   0000006E   ........           LDR.W    R0,??DataTable55_1  ;; 0x4007e001
   \   00000072   0078               LDRB     R0,[R0, #+0]
   \   00000074   8006               LSLS     R0,R0,#+26
   \   00000076   03D5               BPL.N    ??start_5
     47          		printf("Watchdog(COP) Reset\n");
   \   00000078   ........           ADR.W    R0,`?<Constant "Watchdog(COP) Reset\\n">`
   \   0000007C   ........           BL       printf
     48          	if (MC_SRSL & MC_SRSL_LOC_MASK)
   \                     ??start_5:
   \   00000080   ........           LDR.W    R0,??DataTable55_1  ;; 0x4007e001
   \   00000084   0078               LDRB     R0,[R0, #+0]
   \   00000086   4007               LSLS     R0,R0,#+29
   \   00000088   03D5               BPL.N    ??start_6
     49          		printf("Loss of Clock Reset\n");
   \   0000008A   ........           ADR.W    R0,`?<Constant "Loss of Clock Reset\\n">`
   \   0000008E   ........           BL       printf
     50          	if (MC_SRSL & MC_SRSL_LVD_MASK)
   \                     ??start_6:
   \   00000092   ........           LDR.W    R0,??DataTable55_1  ;; 0x4007e001
   \   00000096   0078               LDRB     R0,[R0, #+0]
   \   00000098   8007               LSLS     R0,R0,#+30
   \   0000009A   03D5               BPL.N    ??start_7
     51          		printf("Low-voltage Detect Reset\n");
   \   0000009C   ........           ADR.W    R0,`?<Constant "Low-voltage Detect Re...">`
   \   000000A0   ........           BL       printf
     52          	if (MC_SRSL & MC_SRSL_WAKEUP_MASK)
   \                     ??start_7:
   \   000000A4   ........           LDR.W    R0,??DataTable55_1  ;; 0x4007e001
   \   000000A8   0078               LDRB     R0,[R0, #+0]
   \   000000AA   C007               LSLS     R0,R0,#+31
   \   000000AC   03D5               BPL.N    ??start_8
     53          		printf("LLWU Reset\n");	
   \   000000AE   ........           ADR.W    R0,`?<Constant "LLWU Reset\\n">`
   \   000000B2   ........           BL       printf
     54          	
     55          
     56          	/* Determine specific Kinetis device and revision */
     57          	cpu_identify();
   \                     ??start_8:
   \   000000B6   ........           BL       cpu_identify
     58          	
     59          	/* Jump to main process */
     60          	main();
   \   000000BA   ........           BL       main
     61          
     62          	/* No actions to perform after this so wait forever */
     63          	while(1);
   \                     ??start_9:
   \   000000BE   FEE7               B.N      ??start_9
     64          }
     65          /********************************************************************/
     66          /*!
     67           * \brief   Kinetis Identify
     68           * \return  None
     69           *
     70           * This is primarly a reporting function that displays information
     71           * about the specific CPU to the default terminal including:
     72           * - Kinetis family
     73           * - package
     74           * - die revision
     75           * - P-flash size
     76           * - Ram size
     77           */

   \                                 In section .text, align 2, keep-with-next
     78          void cpu_identify (void)
     79          {
   \                     cpu_identify:
   \   00000000   80B5               PUSH     {R7,LR}
     80              /* Determine the Kinetis family */
     81              switch((SIM_SDID & SIM_SDID_FAMID(0x7))>>SIM_SDID_FAMID_SHIFT) 
   \   00000002   ....               LDR.N    R0,??DataTable55_2  ;; 0x40048024
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   0009               LSRS     R0,R0,#+4
   \   00000008   10F00700           ANDS     R0,R0,#0x7
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   0BD0               BEQ.N    ??cpu_identify_0
   \   00000010   0228               CMP      R0,#+2
   \   00000012   13D0               BEQ.N    ??cpu_identify_1
   \   00000014   0DD3               BCC.N    ??cpu_identify_2
   \   00000016   0428               CMP      R0,#+4
   \   00000018   1AD0               BEQ.N    ??cpu_identify_3
   \   0000001A   14D3               BCC.N    ??cpu_identify_4
   \   0000001C   0628               CMP      R0,#+6
   \   0000001E   21D0               BEQ.N    ??cpu_identify_5
   \   00000020   1BD3               BCC.N    ??cpu_identify_6
   \   00000022   0728               CMP      R0,#+7
   \   00000024   23D0               BEQ.N    ??cpu_identify_7
   \   00000026   27E0               B.N      ??cpu_identify_8
     82              {  
     83              	case 0x0:
     84              		printf("\nK10-");
   \                     ??cpu_identify_0:
   \   00000028   ........           ADR.W    R0,`?<Constant "\\nK10-">`
   \   0000002C   ........           BL       printf
     85              		break;
   \   00000030   26E0               B.N      ??cpu_identify_9
     86              	case 0x1:
     87              		printf("\nK20-");
   \                     ??cpu_identify_2:
   \   00000032   ........           ADR.W    R0,`?<Constant "\\nK20-">`
   \   00000036   ........           BL       printf
     88              		break;
   \   0000003A   21E0               B.N      ??cpu_identify_9
     89              	case 0x2:
     90              		printf("\nK30-");
   \                     ??cpu_identify_1:
   \   0000003C   ........           ADR.W    R0,`?<Constant "\\nK30-">`
   \   00000040   ........           BL       printf
     91              		break;
   \   00000044   1CE0               B.N      ??cpu_identify_9
     92              	case 0x3:
     93              		printf("\nK40-");
   \                     ??cpu_identify_4:
   \   00000046   ........           ADR.W    R0,`?<Constant "\\nK40-">`
   \   0000004A   ........           BL       printf
     94              		break;
   \   0000004E   17E0               B.N      ??cpu_identify_9
     95              	case 0x4:
     96              		printf("\nK60-");
   \                     ??cpu_identify_3:
   \   00000050   ........           ADR.W    R0,`?<Constant "\\nK60-">`
   \   00000054   ........           BL       printf
     97              		break;
   \   00000058   12E0               B.N      ??cpu_identify_9
     98              	case 0x5:
     99              		printf("\nK70-");
   \                     ??cpu_identify_6:
   \   0000005A   ........           ADR.W    R0,`?<Constant "\\nK70-">`
   \   0000005E   ........           BL       printf
    100              		break;
   \   00000062   0DE0               B.N      ??cpu_identify_9
    101              	case 0x6:
    102              		printf("\nK50-");
   \                     ??cpu_identify_5:
   \   00000064   ........           ADR.W    R0,`?<Constant "\\nK50-">`
   \   00000068   ........           BL       printf
    103              		break;
   \   0000006C   08E0               B.N      ??cpu_identify_9
    104              	case 0x7:
    105              		printf("\nK53-");
   \                     ??cpu_identify_7:
   \   0000006E   ........           ADR.W    R0,`?<Constant "\\nK53-">`
   \   00000072   ........           BL       printf
    106              		break;
   \   00000076   03E0               B.N      ??cpu_identify_9
    107          	default:
    108          		printf("\nUnrecognized Kinetis family device.\n");  
   \                     ??cpu_identify_8:
   \   00000078   ........           ADR.W    R0,`?<Constant "\\nUnrecognized Kinetis...">`
   \   0000007C   ........           BL       printf
    109          		break;  	
    110              }
    111          
    112              /* Determine the package size */
    113              switch((SIM_SDID & SIM_SDID_PINID(0xF))>>SIM_SDID_PINID_SHIFT) 
   \                     ??cpu_identify_9:
   \   00000080   ....               LDR.N    R0,??DataTable55_2  ;; 0x40048024
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   10F00F00           ANDS     R0,R0,#0xF
   \   00000088   0228               CMP      R0,#+2
   \   0000008A   12D0               BEQ.N    ??cpu_identify_10
   \   0000008C   0428               CMP      R0,#+4
   \   0000008E   15D0               BEQ.N    ??cpu_identify_11
   \   00000090   0528               CMP      R0,#+5
   \   00000092   18D0               BEQ.N    ??cpu_identify_12
   \   00000094   0628               CMP      R0,#+6
   \   00000096   1BD0               BEQ.N    ??cpu_identify_13
   \   00000098   0728               CMP      R0,#+7
   \   0000009A   1ED0               BEQ.N    ??cpu_identify_14
   \   0000009C   0828               CMP      R0,#+8
   \   0000009E   21D0               BEQ.N    ??cpu_identify_15
   \   000000A0   0928               CMP      R0,#+9
   \   000000A2   24D0               BEQ.N    ??cpu_identify_16
   \   000000A4   0A28               CMP      R0,#+10
   \   000000A6   27D0               BEQ.N    ??cpu_identify_17
   \   000000A8   0C28               CMP      R0,#+12
   \   000000AA   2AD0               BEQ.N    ??cpu_identify_18
   \   000000AC   0E28               CMP      R0,#+14
   \   000000AE   2DD0               BEQ.N    ??cpu_identify_19
   \   000000B0   31E0               B.N      ??cpu_identify_20
    114              {  
    115              	case 0x2:
    116              		printf("32pin       ");
   \                     ??cpu_identify_10:
   \   000000B2   ........           ADR.W    R0,`?<Constant "32pin       ">`
   \   000000B6   ........           BL       printf
    117              		break;
   \   000000BA   30E0               B.N      ??cpu_identify_21
    118              	case 0x4:
    119              		printf("48pin       ");
   \                     ??cpu_identify_11:
   \   000000BC   ........           ADR.W    R0,`?<Constant "48pin       ">`
   \   000000C0   ........           BL       printf
    120              		break;
   \   000000C4   2BE0               B.N      ??cpu_identify_21
    121              	case 0x5:
    122              		printf("64pin       ");
   \                     ??cpu_identify_12:
   \   000000C6   ........           ADR.W    R0,`?<Constant "64pin       ">`
   \   000000CA   ........           BL       printf
    123              		break;
   \   000000CE   26E0               B.N      ??cpu_identify_21
    124              	case 0x6:
    125              		printf("80pin       ");
   \                     ??cpu_identify_13:
   \   000000D0   ........           ADR.W    R0,`?<Constant "80pin       ">`
   \   000000D4   ........           BL       printf
    126              		break;
   \   000000D8   21E0               B.N      ??cpu_identify_21
    127              	case 0x7:
    128              		printf("81pin       ");
   \                     ??cpu_identify_14:
   \   000000DA   ........           ADR.W    R0,`?<Constant "81pin       ">`
   \   000000DE   ........           BL       printf
    129              		break;
   \   000000E2   1CE0               B.N      ??cpu_identify_21
    130              	case 0x8:
    131              		printf("100pin      ");
   \                     ??cpu_identify_15:
   \   000000E4   ........           ADR.W    R0,`?<Constant "100pin      ">`
   \   000000E8   ........           BL       printf
    132              		break;
   \   000000EC   17E0               B.N      ??cpu_identify_21
    133              	case 0x9:
    134              		printf("104pin      ");
   \                     ??cpu_identify_16:
   \   000000EE   ........           ADR.W    R0,`?<Constant "104pin      ">`
   \   000000F2   ........           BL       printf
    135              		break;
   \   000000F6   12E0               B.N      ??cpu_identify_21
    136              	case 0xA:
    137              		printf("144pin      ");
   \                     ??cpu_identify_17:
   \   000000F8   ........           ADR.W    R0,`?<Constant "144pin      ">`
   \   000000FC   ........           BL       printf
    138              		break;
   \   00000100   0DE0               B.N      ??cpu_identify_21
    139              	case 0xC:
    140              		printf("196pin      ");
   \                     ??cpu_identify_18:
   \   00000102   ........           ADR.W    R0,`?<Constant "196pin      ">`
   \   00000106   ........           BL       printf
    141              		break;
   \   0000010A   08E0               B.N      ??cpu_identify_21
    142              	case 0xE:
    143              		printf("256pin      ");
   \                     ??cpu_identify_19:
   \   0000010C   ........           ADR.W    R0,`?<Constant "256pin      ">`
   \   00000110   ........           BL       printf
    144              		break;
   \   00000114   03E0               B.N      ??cpu_identify_21
    145          	default:
    146          		printf("\nUnrecognized Kinetis package code.      ");  
   \                     ??cpu_identify_20:
   \   00000116   ........           ADR.W    R0,`?<Constant "\\nUnrecognized Kinetis...">_1`
   \   0000011A   ........           BL       printf
    147          		break;  	
    148              }                
    149          
    150              /* Determine the revision ID */
    151              printf("Silicon rev %d     \n", (SIM_SDID & SIM_SDID_REVID(0xF))>>SIM_SDID_REVID_SHIFT);
   \                     ??cpu_identify_21:
   \   0000011E   ....               LDR.N    R0,??DataTable55_2  ;; 0x40048024
   \   00000120   0068               LDR      R0,[R0, #+0]
   \   00000122   C0F30331           UBFX     R1,R0,#+12,#+4
   \   00000126   ........           ADR.W    R0,`?<Constant "Silicon rev %d     \\n">`
   \   0000012A   ........           BL       printf
    152              
    153              
    154              /* Determine the flash revision */
    155              flash_identify();    
   \   0000012E   ........           BL       flash_identify
    156              
    157              /* Determine the P-flash size */
    158              switch((SIM_FCFG1 & SIM_FCFG1_FSIZE(0xFF))>>SIM_FCFG1_FSIZE_SHIFT)
   \   00000132   ....               LDR.N    R0,??DataTable55_3  ;; 0x4004804c
   \   00000134   0068               LDR      R0,[R0, #+0]
   \   00000136   000E               LSRS     R0,R0,#+24
   \   00000138   0028               CMP      R0,#+0
   \   0000013A   1AD0               BEQ.N    ??cpu_identify_22
   \   0000013C   0128               CMP      R0,#+1
   \   0000013E   1DD0               BEQ.N    ??cpu_identify_23
   \   00000140   0228               CMP      R0,#+2
   \   00000142   20D0               BEQ.N    ??cpu_identify_24
   \   00000144   0328               CMP      R0,#+3
   \   00000146   23D0               BEQ.N    ??cpu_identify_25
   \   00000148   0428               CMP      R0,#+4
   \   0000014A   26D0               BEQ.N    ??cpu_identify_26
   \   0000014C   0528               CMP      R0,#+5
   \   0000014E   29D0               BEQ.N    ??cpu_identify_27
   \   00000150   0628               CMP      R0,#+6
   \   00000152   2CD0               BEQ.N    ??cpu_identify_28
   \   00000154   0728               CMP      R0,#+7
   \   00000156   2FD0               BEQ.N    ??cpu_identify_29
   \   00000158   0828               CMP      R0,#+8
   \   0000015A   32D0               BEQ.N    ??cpu_identify_30
   \   0000015C   0928               CMP      R0,#+9
   \   0000015E   35D0               BEQ.N    ??cpu_identify_31
   \   00000160   0A28               CMP      R0,#+10
   \   00000162   38D0               BEQ.N    ??cpu_identify_32
   \   00000164   0B28               CMP      R0,#+11
   \   00000166   3BD0               BEQ.N    ??cpu_identify_33
   \   00000168   0C28               CMP      R0,#+12
   \   0000016A   3ED0               BEQ.N    ??cpu_identify_34
   \   0000016C   FF28               CMP      R0,#+255
   \   0000016E   41D0               BEQ.N    ??cpu_identify_35
   \   00000170   45E0               B.N      ??cpu_identify_36
    159              {
    160              	case 0x0:
    161              		printf("12 kBytes of P-flash	");
   \                     ??cpu_identify_22:
   \   00000172   ........           ADR.W    R0,`?<Constant "12 kBytes of P-flash\\t">`
   \   00000176   ........           BL       printf
    162              		break;
   \   0000017A   44E0               B.N      ??cpu_identify_37
    163              	case 0x1:
    164              		printf("16 kBytes of P-flash	");
   \                     ??cpu_identify_23:
   \   0000017C   ........           ADR.W    R0,`?<Constant "16 kBytes of P-flash\\t">`
   \   00000180   ........           BL       printf
    165              		break;
   \   00000184   3FE0               B.N      ??cpu_identify_37
    166              	case 0x2:
    167              		printf("32 kBytes of P-flash	");
   \                     ??cpu_identify_24:
   \   00000186   ........           ADR.W    R0,`?<Constant "32 kBytes of P-flash\\t">`
   \   0000018A   ........           BL       printf
    168              		break;
   \   0000018E   3AE0               B.N      ??cpu_identify_37
    169              	case 0x3:
    170              		printf("48 kBytes of P-flash	");
   \                     ??cpu_identify_25:
   \   00000190   ........           ADR.W    R0,`?<Constant "48 kBytes of P-flash\\t">`
   \   00000194   ........           BL       printf
    171              		break;
   \   00000198   35E0               B.N      ??cpu_identify_37
    172              	case 0x4:
    173              		printf("64 kBytes of P-flash	");
   \                     ??cpu_identify_26:
   \   0000019A   ........           ADR.W    R0,`?<Constant "64 kBytes of P-flash\\t">`
   \   0000019E   ........           BL       printf
    174              		break;
   \   000001A2   30E0               B.N      ??cpu_identify_37
    175              	case 0x5:
    176              		printf("96 kBytes of P-flash	");
   \                     ??cpu_identify_27:
   \   000001A4   ........           ADR.W    R0,`?<Constant "96 kBytes of P-flash\\t">`
   \   000001A8   ........           BL       printf
    177              		break;
   \   000001AC   2BE0               B.N      ??cpu_identify_37
    178              	case 0x6:
    179              		printf("128 kBytes of P-flash	");
   \                     ??cpu_identify_28:
   \   000001AE   ........           ADR.W    R0,`?<Constant "128 kBytes of P-flash\\t">`
   \   000001B2   ........           BL       printf
    180              		break;
   \   000001B6   26E0               B.N      ??cpu_identify_37
    181              	case 0x7:
    182              		printf("192 kBytes of P-flash	");
   \                     ??cpu_identify_29:
   \   000001B8   ........           ADR.W    R0,`?<Constant "192 kBytes of P-flash\\t">`
   \   000001BC   ........           BL       printf
    183              		break;
   \   000001C0   21E0               B.N      ??cpu_identify_37
    184              	case 0x8:
    185              		printf("256 kBytes of P-flash	");
   \                     ??cpu_identify_30:
   \   000001C2   ........           ADR.W    R0,`?<Constant "256 kBytes of P-flash\\t">`
   \   000001C6   ........           BL       printf
    186              		break;
   \   000001CA   1CE0               B.N      ??cpu_identify_37
    187              	case 0x9:
    188              		printf("320 kBytes of P-flash	");
   \                     ??cpu_identify_31:
   \   000001CC   ........           ADR.W    R0,`?<Constant "320 kBytes of P-flash\\t">`
   \   000001D0   ........           BL       printf
    189              		break;
   \   000001D4   17E0               B.N      ??cpu_identify_37
    190              	case 0xA:
    191              		printf("384 kBytes of P-flash	");
   \                     ??cpu_identify_32:
   \   000001D6   ........           ADR.W    R0,`?<Constant "384 kBytes of P-flash\\t">`
   \   000001DA   ........           BL       printf
    192              		break;
   \   000001DE   12E0               B.N      ??cpu_identify_37
    193              	case 0xB:
    194              		printf("448 kBytes of P-flash	");
   \                     ??cpu_identify_33:
   \   000001E0   ........           ADR.W    R0,`?<Constant "448 kBytes of P-flash\\t">`
   \   000001E4   ........           BL       printf
    195              		break;
   \   000001E8   0DE0               B.N      ??cpu_identify_37
    196              	case 0xC:
    197              		printf("512 kBytes of P-flash	");
   \                     ??cpu_identify_34:
   \   000001EA   ........           ADR.W    R0,`?<Constant "512 kBytes of P-flash\\t">`
   \   000001EE   ........           BL       printf
    198              		break;
   \   000001F2   08E0               B.N      ??cpu_identify_37
    199              	case 0xFF:
    200              		printf("Full size P-flash	");
   \                     ??cpu_identify_35:
   \   000001F4   ........           ADR.W    R0,`?<Constant "Full size P-flash\\t">`
   \   000001F8   ........           BL       printf
    201              		break;
   \   000001FC   03E0               B.N      ??cpu_identify_37
    202          		default:
    203          			printf("ERR!! Undefined P-flash size\n");  
   \                     ??cpu_identify_36:
   \   000001FE   ........           ADR.W    R0,`?<Constant "ERR!! Undefined P-fla...">`
   \   00000202   ........           BL       printf
    204          			break;  		
    205              }
    206          
    207              /* Determine the RAM size */
    208              switch((SIM_SOPT1 & SIM_SOPT1_RAMSIZE(0xF))>>SIM_SOPT1_RAMSIZE_SHIFT)
   \                     ??cpu_identify_37:
   \   00000206   ....               LDR.N    R0,??DataTable55_4  ;; 0x40047000
   \   00000208   0068               LDR      R0,[R0, #+0]
   \   0000020A   000B               LSRS     R0,R0,#+12
   \   0000020C   10F00F00           ANDS     R0,R0,#0xF
   \   00000210   0528               CMP      R0,#+5
   \   00000212   06D0               BEQ.N    ??cpu_identify_38
   \   00000214   0728               CMP      R0,#+7
   \   00000216   09D0               BEQ.N    ??cpu_identify_39
   \   00000218   0828               CMP      R0,#+8
   \   0000021A   0CD0               BEQ.N    ??cpu_identify_40
   \   0000021C   0928               CMP      R0,#+9
   \   0000021E   0FD0               BEQ.N    ??cpu_identify_41
   \   00000220   13E0               B.N      ??cpu_identify_42
    209              {
    210              	case 0x5:
    211              		printf(" 32 kBytes of RAM\n\n");
   \                     ??cpu_identify_38:
   \   00000222   ........           ADR.W    R0,`?<Constant " 32 kBytes of RAM\\n\\n">`
   \   00000226   ........           BL       printf
    212              		break;
   \   0000022A   12E0               B.N      ??cpu_identify_43
    213              	case 0x7:
    214              		printf(" 64 kBytes of RAM\n\n");
   \                     ??cpu_identify_39:
   \   0000022C   ........           ADR.W    R0,`?<Constant " 64 kBytes of RAM\\n\\n">`
   \   00000230   ........           BL       printf
    215              		break;
   \   00000234   0DE0               B.N      ??cpu_identify_43
    216              	case 0x8:
    217              		printf(" 96 kBytes of RAM\n\n");
   \                     ??cpu_identify_40:
   \   00000236   ........           ADR.W    R0,`?<Constant " 96 kBytes of RAM\\n\\n">`
   \   0000023A   ........           BL       printf
    218              		break;
   \   0000023E   08E0               B.N      ??cpu_identify_43
    219              	case 0x9:
    220              		printf(" 128 kBytes of RAM\n\n");
   \                     ??cpu_identify_41:
   \   00000240   ........           ADR.W    R0,`?<Constant " 128 kBytes of RAM\\n\\n">`
   \   00000244   ........           BL       printf
    221              		break;
   \   00000248   03E0               B.N      ??cpu_identify_43
    222          		default:
    223          			printf(" ERR!! Undefined RAM size\n\n");  
   \                     ??cpu_identify_42:
   \   0000024A   ........           ADR.W    R0,`?<Constant " ERR!! Undefined RAM ...">`
   \   0000024E   ........           BL       printf
    224          			break;  		
    225              }
    226          }
   \                     ??cpu_identify_43:
   \   00000252   01BD               POP      {R0,PC}          ;; return
    227          /********************************************************************/
    228          /*!
    229           * \brief   flash Identify
    230           * \return  None
    231           *
    232           * This is primarly a reporting function that displays information
    233           * about the specific flash parameters and flash version ID for 
    234           * the current device. These parameters are obtained using a special
    235           * flash command call "read resource." The first four bytes returned
    236           * are the flash parameter revision, and the second four bytes are
    237           * the flash version ID.
    238           */

   \                                 In section .text, align 2, keep-with-next
    239          void flash_identify (void)
    240          {
   \                     flash_identify:
   \   00000000   80B5               PUSH     {R7,LR}
    241              /* Get the flash parameter version */
    242          
    243              /* Write the flash FCCOB registers with the values for a read resource command */
    244              FTFL_FCCOB0 = 0x03;
   \   00000002   ....               LDR.N    R0,??DataTable55_5  ;; 0x40020007
   \   00000004   0321               MOVS     R1,#+3
   \   00000006   0170               STRB     R1,[R0, #+0]
    245              FTFL_FCCOB1 = 0x00;
   \   00000008   ....               LDR.N    R0,??DataTable55_6  ;; 0x40020006
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   0170               STRB     R1,[R0, #+0]
    246              FTFL_FCCOB2 = 0x00;
   \   0000000E   ....               LDR.N    R0,??DataTable55_7  ;; 0x40020005
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0170               STRB     R1,[R0, #+0]
    247              FTFL_FCCOB3 = 0x00;
   \   00000014   ....               LDR.N    R0,??DataTable55_8  ;; 0x40020004
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   0170               STRB     R1,[R0, #+0]
    248              FTFL_FCCOB8 = 0x01;
   \   0000001A   ....               LDR.N    R0,??DataTable55_9  ;; 0x4002000f
   \   0000001C   0121               MOVS     R1,#+1
   \   0000001E   0170               STRB     R1,[R0, #+0]
    249          
    250              /* All required FCCOBx registers are written, so launch the command */
    251              FTFL_FSTAT = FTFL_FSTAT_CCIF_MASK;
   \   00000020   ....               LDR.N    R0,??DataTable55_10  ;; 0x40020000
   \   00000022   8021               MOVS     R1,#+128
   \   00000024   0170               STRB     R1,[R0, #+0]
    252          
    253              /* Wait for the command to complete */
    254              while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF_MASK));
   \                     ??flash_identify_0:
   \   00000026   ....               LDR.N    R0,??DataTable55_10  ;; 0x40020000
   \   00000028   0078               LDRB     R0,[R0, #+0]
   \   0000002A   0006               LSLS     R0,R0,#+24
   \   0000002C   FBD5               BPL.N    ??flash_identify_0
    255              
    256              printf("Flash parameter version %d.%d.%d.%d\n",FTFL_FCCOB4,FTFL_FCCOB5,FTFL_FCCOB6,FTFL_FCCOB7);
   \   0000002E   ....               LDR.N    R0,??DataTable55_11  ;; 0x40020008
   \   00000030   0078               LDRB     R0,[R0, #+0]
   \   00000032   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0090               STR      R0,[SP, #+0]
   \   00000036   ....               LDR.N    R0,??DataTable55_12  ;; 0x40020009
   \   00000038   0378               LDRB     R3,[R0, #+0]
   \   0000003A   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003C   ....               LDR.N    R0,??DataTable55_13  ;; 0x4002000a
   \   0000003E   0278               LDRB     R2,[R0, #+0]
   \   00000040   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000042   ....               LDR.N    R0,??DataTable55_14  ;; 0x4002000b
   \   00000044   0178               LDRB     R1,[R0, #+0]
   \   00000046   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   ........           ADR.W    R0,`?<Constant "Flash parameter versi...">`
   \   0000004C   ........           BL       printf
    257          
    258              /* Get the flash version ID */   
    259          
    260              /* Write the flash FCCOB registers with the values for a read resource command */
    261              FTFL_FCCOB0 = 0x03;
   \   00000050   ....               LDR.N    R0,??DataTable55_5  ;; 0x40020007
   \   00000052   0321               MOVS     R1,#+3
   \   00000054   0170               STRB     R1,[R0, #+0]
    262              FTFL_FCCOB1 = 0x00;
   \   00000056   ....               LDR.N    R0,??DataTable55_6  ;; 0x40020006
   \   00000058   0021               MOVS     R1,#+0
   \   0000005A   0170               STRB     R1,[R0, #+0]
    263              FTFL_FCCOB2 = 0x00;
   \   0000005C   ....               LDR.N    R0,??DataTable55_7  ;; 0x40020005
   \   0000005E   0021               MOVS     R1,#+0
   \   00000060   0170               STRB     R1,[R0, #+0]
    264              FTFL_FCCOB3 = 0x04;
   \   00000062   ....               LDR.N    R0,??DataTable55_8  ;; 0x40020004
   \   00000064   0421               MOVS     R1,#+4
   \   00000066   0170               STRB     R1,[R0, #+0]
    265              FTFL_FCCOB8 = 0x01;
   \   00000068   ....               LDR.N    R0,??DataTable55_9  ;; 0x4002000f
   \   0000006A   0121               MOVS     R1,#+1
   \   0000006C   0170               STRB     R1,[R0, #+0]
    266          
    267              /* All required FCCOBx registers are written, so launch the command */
    268              FTFL_FSTAT = FTFL_FSTAT_CCIF_MASK;
   \   0000006E   ....               LDR.N    R0,??DataTable55_10  ;; 0x40020000
   \   00000070   8021               MOVS     R1,#+128
   \   00000072   0170               STRB     R1,[R0, #+0]
    269          
    270              /* Wait for the command to complete */
    271              while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF_MASK));
   \                     ??flash_identify_1:
   \   00000074   ....               LDR.N    R0,??DataTable55_10  ;; 0x40020000
   \   00000076   0078               LDRB     R0,[R0, #+0]
   \   00000078   0006               LSLS     R0,R0,#+24
   \   0000007A   FBD5               BPL.N    ??flash_identify_1
    272          
    273              printf("Flash version ID %d.%d.%d.%d\n",FTFL_FCCOB4,FTFL_FCCOB5,FTFL_FCCOB6,FTFL_FCCOB7);  
   \   0000007C   ....               LDR.N    R0,??DataTable55_11  ;; 0x40020008
   \   0000007E   0078               LDRB     R0,[R0, #+0]
   \   00000080   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0090               STR      R0,[SP, #+0]
   \   00000084   ....               LDR.N    R0,??DataTable55_12  ;; 0x40020009
   \   00000086   0378               LDRB     R3,[R0, #+0]
   \   00000088   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000008A   ....               LDR.N    R0,??DataTable55_13  ;; 0x4002000a
   \   0000008C   0278               LDRB     R2,[R0, #+0]
   \   0000008E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000090   ....               LDR.N    R0,??DataTable55_14  ;; 0x4002000b
   \   00000092   0178               LDRB     R1,[R0, #+0]
   \   00000094   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000096   ........           ADR.W    R0,`?<Constant "Flash version ID %d.%...">`
   \   0000009A   ........           BL       printf
    274          }
   \   0000009E   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   0A0A0000           DC8      0x0A, 0x0A, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   00E00740           DC32     0x4007e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \   00000000   01E00740           DC32     0x4007e001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \   00000000   24800440           DC32     0x40048024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \   00000000   4C800440           DC32     0x4004804c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_4:
   \   00000000   00700440           DC32     0x40047000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_5:
   \   00000000   07000240           DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_6:
   \   00000000   06000240           DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_7:
   \   00000000   05000240           DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_8:
   \   00000000   04000240           DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_9:
   \   00000000   0F000240           DC32     0x4002000f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_10:
   \   00000000   00000240           DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_11:
   \   00000000   08000240           DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_12:
   \   00000000   09000240           DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_13:
   \   00000000   0A000240           DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_14:
   \   00000000   0B000240           DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\n">`:
   \   00000000                      ; Initializer data, 4 bytes
   \   00000000   0A0A0000           DC8 10, 10, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Software Reset\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   536F66747761       DC8 83, 111, 102, 116, 119, 97, 114, 101, 32, 82
   \              72652052    
   \   0000000A   657365740A00       DC8 101, 115, 101, 116, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Core Lockup Event Reset\\n">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   436F7265204C       DC8 67, 111, 114, 101, 32, 76, 111, 99, 107, 117
   \              6F636B75    
   \   0000000A   70204576656E       DC8 112, 32, 69, 118, 101, 110, 116, 32, 82, 101
   \              74205265    
   \   00000014   7365740A0000       DC8 115, 101, 116, 10, 0, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "JTAG Reset\\n">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4A5441472052       DC8 74, 84, 65, 71, 32, 82, 101, 115, 101, 116
   \              65736574    
   \   0000000A   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Power-on Reset\\n">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   506F7765722D       DC8 80, 111, 119, 101, 114, 45, 111, 110, 32, 82
   \              6F6E2052    
   \   0000000A   657365740A00       DC8 101, 115, 101, 116, 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "External Pin Reset\\n">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   45787465726E       DC8 69, 120, 116, 101, 114, 110, 97, 108, 32, 80
   \              616C2050    
   \   0000000A   696E20526573       DC8 105, 110, 32, 82, 101, 115, 101, 116, 10, 0
   \              65740A00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Watchdog(COP) Reset\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   576174636864       DC8 87, 97, 116, 99, 104, 100, 111, 103, 40, 67
   \              6F672843    
   \   0000000A   4F5029205265       DC8 79, 80, 41, 32, 82, 101, 115, 101, 116, 10
   \              7365740A    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Loss of Clock Reset\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   4C6F7373206F       DC8 76, 111, 115, 115, 32, 111, 102, 32, 67, 108
   \              6620436C    
   \   0000000A   6F636B205265       DC8 111, 99, 107, 32, 82, 101, 115, 101, 116, 10
   \              7365740A    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Low-voltage Detect Re...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   4C6F772D766F       DC8 76, 111, 119, 45, 118, 111, 108, 116, 97, 103
   \              6C746167    
   \   0000000A   652044657465       DC8 101, 32, 68, 101, 116, 101, 99, 116, 32, 82
   \              63742052    
   \   00000014   657365740A00       DC8 101, 115, 101, 116, 10, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LLWU Reset\\n">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   4C4C57552052       DC8 76, 76, 87, 85, 32, 82, 101, 115, 101, 116
   \              65736574    
   \   0000000A   0A00               DC8 10, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK10-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B31302D00       DC8 10, 75, 49, 48, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK20-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B32302D00       DC8 10, 75, 50, 48, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK30-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B33302D00       DC8 10, 75, 51, 48, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK40-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B34302D00       DC8 10, 75, 52, 48, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK60-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B36302D00       DC8 10, 75, 54, 48, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK70-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B37302D00       DC8 10, 75, 55, 48, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK50-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B35302D00       DC8 10, 75, 53, 48, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nK53-">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   0A4B35332D00       DC8 10, 75, 53, 51, 45, 0, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nUnrecognized Kinetis...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   0A556E726563       DC8 10, 85, 110, 114, 101, 99, 111, 103, 110, 105
   \              6F676E69    
   \   0000000A   7A6564204B69       DC8 122, 101, 100, 32, 75, 105, 110, 101, 116, 105
   \              6E657469    
   \   00000014   732066616D69       DC8 115, 32, 102, 97, 109, 105, 108, 121, 32, 100
   \              6C792064    
   \   0000001E   65766963652E       DC8 101, 118, 105, 99, 101, 46, 10, 0, 0, 0
   \              0A000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "32pin       ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   333270696E20       DC8 51, 50, 112, 105, 110, 32, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "48pin       ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   343870696E20       DC8 52, 56, 112, 105, 110, 32, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "64pin       ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   363470696E20       DC8 54, 52, 112, 105, 110, 32, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "80pin       ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   383070696E20       DC8 56, 48, 112, 105, 110, 32, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "81pin       ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   383170696E20       DC8 56, 49, 112, 105, 110, 32, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "100pin      ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   31303070696E       DC8 49, 48, 48, 112, 105, 110, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "104pin      ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   31303470696E       DC8 49, 48, 52, 112, 105, 110, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "144pin      ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   31343470696E       DC8 49, 52, 52, 112, 105, 110, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "196pin      ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   31393670696E       DC8 49, 57, 54, 112, 105, 110, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "256pin      ">`:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   32353670696E       DC8 50, 53, 54, 112, 105, 110, 32, 32, 32, 32
   \              20202020    
   \   0000000A   202000000000       DC8 32, 32, 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nUnrecognized Kinetis...">_1`:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   0A556E726563       DC8 10, 85, 110, 114, 101, 99, 111, 103, 110, 105
   \              6F676E69    
   \   0000000A   7A6564204B69       DC8 122, 101, 100, 32, 75, 105, 110, 101, 116, 105
   \              6E657469    
   \   00000014   73207061636B       DC8 115, 32, 112, 97, 99, 107, 97, 103, 101, 32
   \              61676520    
   \   0000001E   636F64652E20       DC8 99, 111, 100, 101, 46, 32, 32, 32, 32, 32
   \              20202020    
   \   00000028   20000000           DC8 32, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Silicon rev %d     \\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   53696C69636F       DC8 83, 105, 108, 105, 99, 111, 110, 32, 114, 101
   \              6E207265    
   \   0000000A   762025642020       DC8 118, 32, 37, 100, 32, 32, 32, 32, 32, 10
   \              2020200A    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "12 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   3132206B4279       DC8 49, 50, 32, 107, 66, 121, 116, 101, 115, 32
   \              74657320    
   \   0000000A   6F6620502D66       DC8 111, 102, 32, 80, 45, 102, 108, 97, 115, 104
   \              6C617368    
   \   00000014   09000000           DC8 9, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "16 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   3136206B4279       DC8 49, 54, 32, 107, 66, 121, 116, 101, 115, 32
   \              74657320    
   \   0000000A   6F6620502D66       DC8 111, 102, 32, 80, 45, 102, 108, 97, 115, 104
   \              6C617368    
   \   00000014   09000000           DC8 9, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "32 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   3332206B4279       DC8 51, 50, 32, 107, 66, 121, 116, 101, 115, 32
   \              74657320    
   \   0000000A   6F6620502D66       DC8 111, 102, 32, 80, 45, 102, 108, 97, 115, 104
   \              6C617368    
   \   00000014   09000000           DC8 9, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "48 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   3438206B4279       DC8 52, 56, 32, 107, 66, 121, 116, 101, 115, 32
   \              74657320    
   \   0000000A   6F6620502D66       DC8 111, 102, 32, 80, 45, 102, 108, 97, 115, 104
   \              6C617368    
   \   00000014   09000000           DC8 9, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "64 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   3634206B4279       DC8 54, 52, 32, 107, 66, 121, 116, 101, 115, 32
   \              74657320    
   \   0000000A   6F6620502D66       DC8 111, 102, 32, 80, 45, 102, 108, 97, 115, 104
   \              6C617368    
   \   00000014   09000000           DC8 9, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "96 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   3936206B4279       DC8 57, 54, 32, 107, 66, 121, 116, 101, 115, 32
   \              74657320    
   \   0000000A   6F6620502D66       DC8 111, 102, 32, 80, 45, 102, 108, 97, 115, 104
   \              6C617368    
   \   00000014   09000000           DC8 9, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "128 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   313238206B42       DC8 49, 50, 56, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F6620502D       DC8 32, 111, 102, 32, 80, 45, 102, 108, 97, 115
   \              666C6173    
   \   00000014   68090000           DC8 104, 9, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "192 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   313932206B42       DC8 49, 57, 50, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F6620502D       DC8 32, 111, 102, 32, 80, 45, 102, 108, 97, 115
   \              666C6173    
   \   00000014   68090000           DC8 104, 9, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "256 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   323536206B42       DC8 50, 53, 54, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F6620502D       DC8 32, 111, 102, 32, 80, 45, 102, 108, 97, 115
   \              666C6173    
   \   00000014   68090000           DC8 104, 9, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "320 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   333230206B42       DC8 51, 50, 48, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F6620502D       DC8 32, 111, 102, 32, 80, 45, 102, 108, 97, 115
   \              666C6173    
   \   00000014   68090000           DC8 104, 9, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "384 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   333834206B42       DC8 51, 56, 52, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F6620502D       DC8 32, 111, 102, 32, 80, 45, 102, 108, 97, 115
   \              666C6173    
   \   00000014   68090000           DC8 104, 9, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "448 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   343438206B42       DC8 52, 52, 56, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F6620502D       DC8 32, 111, 102, 32, 80, 45, 102, 108, 97, 115
   \              666C6173    
   \   00000014   68090000           DC8 104, 9, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "512 kBytes of P-flash\\t">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   353132206B42       DC8 53, 49, 50, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F6620502D       DC8 32, 111, 102, 32, 80, 45, 102, 108, 97, 115
   \              666C6173    
   \   00000014   68090000           DC8 104, 9, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Full size P-flash\\t">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   46756C6C2073       DC8 70, 117, 108, 108, 32, 115, 105, 122, 101, 32
   \              697A6520    
   \   0000000A   502D666C6173       DC8 80, 45, 102, 108, 97, 115, 104, 9, 0, 0
   \              68090000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR!! Undefined P-fla...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   455252212120       DC8 69, 82, 82, 33, 33, 32, 85, 110, 100, 101
   \              556E6465    
   \   0000000A   66696E656420       DC8 102, 105, 110, 101, 100, 32, 80, 45, 102, 108
   \              502D666C    
   \   00000014   617368207369       DC8 97, 115, 104, 32, 115, 105, 122, 101, 10, 0
   \              7A650A00    
   \   0000001E   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " 32 kBytes of RAM\\n\\n">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   203332206B42       DC8 32, 51, 50, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F66205241       DC8 32, 111, 102, 32, 82, 65, 77, 10, 10, 0
   \              4D0A0A00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " 64 kBytes of RAM\\n\\n">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   203634206B42       DC8 32, 54, 52, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F66205241       DC8 32, 111, 102, 32, 82, 65, 77, 10, 10, 0
   \              4D0A0A00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " 96 kBytes of RAM\\n\\n">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   203936206B42       DC8 32, 57, 54, 32, 107, 66, 121, 116, 101, 115
   \              79746573    
   \   0000000A   206F66205241       DC8 32, 111, 102, 32, 82, 65, 77, 10, 10, 0
   \              4D0A0A00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " 128 kBytes of RAM\\n\\n">`:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   20313238206B       DC8 32, 49, 50, 56, 32, 107, 66, 121, 116, 101
   \              42797465    
   \   0000000A   73206F662052       DC8 115, 32, 111, 102, 32, 82, 65, 77, 10, 10
   \              414D0A0A    
   \   00000014   00000000           DC8 0, 0, 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " ERR!! Undefined RAM ...">`:
   \   00000000                      ; Initializer data, 28 bytes
   \   00000000   204552522121       DC8 32, 69, 82, 82, 33, 33, 32, 85, 110, 100
   \              20556E64    
   \   0000000A   6566696E6564       DC8 101, 102, 105, 110, 101, 100, 32, 82, 65, 77
   \              2052414D    
   \   00000014   2073697A650A       DC8 32, 115, 105, 122, 101, 10, 10, 0
   \              0A00        

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Flash parameter versi...">`:
   \   00000000                      ; Initializer data, 40 bytes
   \   00000000   466C61736820       DC8 70, 108, 97, 115, 104, 32, 112, 97, 114, 97
   \              70617261    
   \   0000000A   6D6574657220       DC8 109, 101, 116, 101, 114, 32, 118, 101, 114, 115
   \              76657273    
   \   00000014   696F6E202564       DC8 105, 111, 110, 32, 37, 100, 46, 37, 100, 46
   \              2E25642E    
   \   0000001E   25642E25640A       DC8 37, 100, 46, 37, 100, 10, 0, 0, 0, 0
   \              00000000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Flash version ID %d.%...">`:
   \   00000000                      ; Initializer data, 32 bytes
   \   00000000   466C61736820       DC8 70, 108, 97, 115, 104, 32, 118, 101, 114, 115
   \              76657273    
   \   0000000A   696F6E204944       DC8 105, 111, 110, 32, 73, 68, 32, 37, 100, 46
   \              2025642E    
   \   00000014   25642E25642E       DC8 37, 100, 46, 37, 100, 46, 37, 100, 10, 0
   \              25640A00    
   \   0000001E   0000               DC8 0, 0
    275          /********************************************************************/
    276          

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     cpu_identify        8
     flash_identify      8
     start               8


   Section sizes:

     Function/Label                            Bytes
     --------------                            -----
     start                                      192
     cpu_identify                               596
     flash_identify                             160
     ??DataTable53                                4
     ??DataTable55                                4
     ??DataTable55_1                              4
     ??DataTable55_2                              4
     ??DataTable55_3                              4
     ??DataTable55_4                              4
     ??DataTable55_5                              4
     ??DataTable55_6                              4
     ??DataTable55_7                              4
     ??DataTable55_8                              4
     ??DataTable55_9                              4
     ??DataTable55_10                             4
     ??DataTable55_11                             4
     ??DataTable55_12                             4
     ??DataTable55_13                             4
     ??DataTable55_14                             4
     ?<Constant "\n\n">                           4
     ?<Constant "Software Reset\n">              16
     ?<Constant "Core Lockup Event Reset\n">     28
     ?<Constant "JTAG Reset\n">                  12
     ?<Constant "Power-on Reset\n">              16
     ?<Constant "External Pin Reset\n">          20
     ?<Constant "Watchdog(COP) Reset\n">         24
     ?<Constant "Loss of Clock Reset\n">         24
     ?<Constant "Low-voltage Detect Re...">      28
     ?<Constant "LLWU Reset\n">                  12
     ?<Constant "\nK10-">                         8
     ?<Constant "\nK20-">                         8
     ?<Constant "\nK30-">                         8
     ?<Constant "\nK40-">                         8
     ?<Constant "\nK60-">                         8
     ?<Constant "\nK70-">                         8
     ?<Constant "\nK50-">                         8
     ?<Constant "\nK53-">                         8
     ?<Constant "\nUnrecognized Kinetis...">     40
     ?<Constant "32pin       ">                  16
     ?<Constant "48pin       ">                  16
     ?<Constant "64pin       ">                  16
     ?<Constant "80pin       ">                  16
     ?<Constant "81pin       ">                  16
     ?<Constant "100pin      ">                  16
     ?<Constant "104pin      ">                  16
     ?<Constant "144pin      ">                  16
     ?<Constant "196pin      ">                  16
     ?<Constant "256pin      ">                  16
     ?<Constant "\nUnrecognized Kinetis...">_1   44
     ?<Constant "Silicon rev %d     \n">         24
     ?<Constant "12 kBytes of P-flash\t">        24
     ?<Constant "16 kBytes of P-flash\t">        24
     ?<Constant "32 kBytes of P-flash\t">        24
     ?<Constant "48 kBytes of P-flash\t">        24
     ?<Constant "64 kBytes of P-flash\t">        24
     ?<Constant "96 kBytes of P-flash\t">        24
     ?<Constant "128 kBytes of P-flash\t">       24
     ?<Constant "192 kBytes of P-flash\t">       24
     ?<Constant "256 kBytes of P-flash\t">       24
     ?<Constant "320 kBytes of P-flash\t">       24
     ?<Constant "384 kBytes of P-flash\t">       24
     ?<Constant "448 kBytes of P-flash\t">       24
     ?<Constant "512 kBytes of P-flash\t">       24
     ?<Constant "Full size P-flash\t">           20
     ?<Constant "ERR!! Undefined P-fla...">      32
     ?<Constant " 32 kBytes of RAM\n\n">         20
     ?<Constant " 64 kBytes of RAM\n\n">         20
     ?<Constant " 96 kBytes of RAM\n\n">         20
     ?<Constant " 128 kBytes of RAM\n\n">        24
     ?<Constant " ERR!! Undefined RAM ...">      28
     ?<Constant "Flash parameter versi...">      40
     ?<Constant "Flash version ID %d.%...">      32

 
 2 076 bytes in section .text
 
 2 076 bytes of CODE memory

Errors: none
Warnings: 12
