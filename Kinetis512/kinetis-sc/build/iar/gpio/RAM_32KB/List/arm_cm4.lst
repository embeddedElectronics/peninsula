###############################################################################
#                                                                             #
#                                                       04/Mar/2012  11:29:58 #
# IAR ANSI C/C++ Compiler V6.10.1.22143/W32 EVALUATION for ARM                #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\My Works\K60\Kinetis512\kinetis-sc\src\cpu\arm_cm4.c  #
#    Command line =  "F:\My Works\K60\Kinetis512\kinetis-sc\src\cpu\arm_cm4.c #
#                    " -D IAR -D TWR_K60N512 -lCN "F:\My                      #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_32KB\ #
#                    List\" -lB "F:\My Works\K60\Kinetis512\kinetis-sc\build\ #
#                    iar\gpio\RAM_32KB\List\" -o "F:\My                       #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM_32KB\ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Evaluation\arm\INC\c\DLib_Config_Normal.h" #
#                     -I "F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpi #
#                    o\..\..\..\src\projects\gpio\" -I "F:\My                 #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\common\" -I "F:\My Works\K60\Kinetis512\kinetis-sc\b #
#                    uild\iar\gpio\..\..\..\src\cpu\" -I "F:\My               #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\cpu\headers\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\uart\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\mcg\" -I "F:\My                              #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\drivers\wdog\" -I "F:\My                             #
#                    Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\..\..\..\ #
#                    src\platforms\" -I "F:\My Works\K60\Kinetis512\kinetis-s #
#                    c\build\iar\gpio\..\" -Ol --use_c++_inline               #
#    List file    =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _32KB\List\arm_cm4.lst                                   #
#    Object file  =  F:\My Works\K60\Kinetis512\kinetis-sc\build\iar\gpio\RAM #
#                    _32KB\Obj\arm_cm4.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\My Works\K60\Kinetis512\kinetis-sc\src\cpu\arm_cm4.c
      1          /*
      2           * File:		arm_cm4.c
      3           * Purpose:		Generic high-level routines for ARM Cortex M4 processors
      4           *
      5           * Notes:
      6           */
      7          
      8          #include "common.h"
      9          
     10          /***********************************************************************/
     11          /*
     12           * Configures the ARM system control register for STOP (deep sleep) mode
     13           * and then executes the WFI instruction to enter the mode.
     14           *
     15           * Parameters:
     16           * none
     17           *
     18           * Note: Might want to change this later to allow for passing in a parameter
     19           *       to optionally set the sleep on exit bit.
     20           */
     21          
     22          void stop (void)
     23          {
     24          	/* Set the SLEEPDEEP bit to enable deep sleep mode (STOP) */
     25          	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;	
     26          
     27          	/* WFI instruction will start entry into STOP mode */
     28          	asm("WFI");
     29          }
     30          /***********************************************************************/
     31          /*
     32           * Configures the ARM system control register for WAIT (sleep) mode
     33           * and then executes the WFI instruction to enter the mode.
     34           *
     35           * Parameters:
     36           * none
     37           *
     38           * Note: Might want to change this later to allow for passing in a parameter
     39           *       to optionally set the sleep on exit bit.
     40           */
     41          
     42          void wait (void)
     43          {
     44          	/* Clear the SLEEPDEEP bit to make sure we go into WAIT (sleep) mode instead
     45          	 * of deep sleep.
     46          	 */
     47          	SCB_SCR &= ~SCB_SCR_SLEEPDEEP_MASK;	
     48          
     49          	/* WFI instruction will start entry into WAIT mode */
     50          	asm("WFI");
     51          }
     52          /***********************************************************************/
     53          /*
     54           * Change the value of the vector table offset register to the specified value.
     55           *
     56           * Parameters:
     57           * vtor     new value to write to the VTOR
     58           */
     59          
     60          void write_vtor (int vtor)
     61          {
     62                  /* Write the VTOR with the new value */
     63                  SCB_VTOR = vtor;	
     64          }
     65          /***********************************************************************/
     66          /*
     67           * Initialize the NVIC to enable the specified IRQ.
     68           * 
     69           * NOTE: The function only initializes the NVIC to enable a single IRQ. 
     70           * Interrupts will also need to be enabled in the ARM core. This can be 
     71           * done using the EnableInterrupts macro.
     72           *
     73           * Parameters:
     74           * irq    irq number to be enabled (the irq number NOT the vector number)
     75           */
     76          
     77          void enable_irq (int irq)
     78          {
     79              int div;
     80              
     81              /* Make sure that the IRQ is an allowable number. Right now up to 91 is 
     82               * used.
     83               */
     84              if (irq > 91)
     85                  printf("\nERR! Invalid IRQ value passed to enable irq function!\n");
     86              
     87              /* Determine which of the NVICISERs corresponds to the irq */
     88              div = irq/32;
     89              
     90              switch (div)
     91              {
     92              	case 0x0:
     93                        NVICICPR0 = 1 << (irq%32);
     94                        NVICISER0 = 1 << (irq%32);
     95                        break;
     96              	case 0x1:
     97                        NVICICPR1 = 1 << (irq%32);
     98                        NVICISER1 = 1 << (irq%32);
     99                        break;
    100              	case 0x2:
    101                        NVICICPR2 = 1 << (irq%32);
    102                        NVICISER2 = 1 << (irq%32);
    103                        break;
    104              }              
    105          }
    106          /***********************************************************************/
    107          /*
    108           * Initialize the NVIC to disable the specified IRQ.
    109           * 
    110           * NOTE: The function only initializes the NVIC to disable a single IRQ. 
    111           * If you want to disable all interrupts, then use the DisableInterrupts
    112           * macro instead. 
    113           *
    114           * Parameters:
    115           * irq    irq number to be disabled (the irq number NOT the vector number)
    116           */
    117          
    118          void disable_irq (int irq)
    119          {
    120              int div;
    121              
    122              /* Make sure that the IRQ is an allowable number. Right now up to 91 is 
    123               * used.
    124               */
    125              if (irq > 91)
    126                  printf("\nERR! Invalid IRQ value passed to disable irq function!\n");
    127              
    128              /* Determine which of the NVICICERs corresponds to the irq */
    129              div = irq/32;
    130              
    131              switch (div)
    132              {
    133              	case 0x0:
    134                        NVICICER0 = 1 << (irq%32);
    135                        break;
    136              	case 0x1:
    137                        NVICICER1 = 1 << (irq%32);
    138                        break;
    139              	case 0x2:
    140                        NVICICER2 = 1 << (irq%32);
    141                        break;
    142              }              
    143          }
    144          /***********************************************************************/
    145          /*
    146           * Initialize the NVIC to set specified IRQ priority.
    147           * 
    148           * NOTE: The function only initializes the NVIC to set a single IRQ priority. 
    149           * Interrupts will also need to be enabled in the ARM core. This can be 
    150           * done using the EnableInterrupts macro.
    151           *
    152           * Parameters:
    153           * irq    irq number to be enabled (the irq number NOT the vector number)
    154           * prio   irq priority. 0-15 levels. 0 max priority
    155           */
    156          
    157          void set_irq_priority (int irq, int prio)
    158          {
    159              /*irq priority pointer*/
    160              uint8 *prio_reg;
    161              
    162              /* Make sure that the IRQ is an allowable number. Right now up to 91 is 
    163               * used.
    164               */
    165              if (irq > 91)
    166                  printf("\nERR! Invalid IRQ value passed to priority irq function!\n");
    167          
    168              if (prio > 15)
    169                  printf("\nERR! Invalid priority value passed to priority irq function!\n");
    170              
    171              /* Determine which of the NVICIPx corresponds to the irq */
    172              prio_reg = (uint8 *)(((uint32)&NVICIP0) + irq);
    173              /* Assign priority to IRQ */
    174              *prio_reg = ( (prio&0xF) << (8 - ARM_INTERRUPT_LEVEL_BITS) );             
    175          }
    176          /***********************************************************************/
    177          

Errors: 4
Warnings: 7
